<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/18/hello-world/"/>
      <url>/2023/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>API签名认证</title>
      <link href="/2023/09/01/API%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/"/>
      <url>/2023/09/01/API%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="API签名认证"><a href="#API签名认证" class="headerlink" title="API签名认证"></a>API签名认证</h1><h6 id="有以下场景，当用户在搜索框搜索时，需要同时展示与用户搜索相关的用户名，图片相关和文章相关，该如何解决？"><a href="#有以下场景，当用户在搜索框搜索时，需要同时展示与用户搜索相关的用户名，图片相关和文章相关，该如何解决？" class="headerlink" title="有以下场景，当用户在搜索框搜索时，需要同时展示与用户搜索相关的用户名，图片相关和文章相关，该如何解决？"></a>有以下场景，当用户在搜索框搜索时，需要同时展示与用户搜索相关的用户名，图片相关和文章相关，该如何解决？</h6><p>解决方案：</p><p>  新增type字段：前端type调用后端同一个接口，后端根据type调用不同的service查询</p><p>比如前端传递type=user，后端执行userService.query</p><p>逻辑</p><p>1.如果type为空，那么搜索出所有的数据</p><p>2.如果type不为空</p><pre><code>   a.如果type合法，那么查出对应数据   b.否则报错</code></pre><p>问题：type增多后，要把逻辑堆积在controller代码里么？</p><p>如何让搜索系统更轻松地接入更多的数据源？</p><h3 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h3><p>介绍：帮助我们用户（客户端）去更轻松的实现功能，不需要关心门面背后的细节。</p><p>聚合搜索类业务基本上都是门面模式：即前端不用关心后端从哪里来，怎么去取不同的来源，怎么去聚合不同来源的数据，更方便地获取到内容</p><p>当调用你的系统（接口）的客户端觉得麻烦的时候，就应该考虑抽象一个门面</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>1.定制统一的数据源接入规范（标准）：</p><p>什么数据源允许接入</p><p>你的数据源满足什么要求</p><p>需要介入方注意什么事情</p><p>聚合搜索系统需要接入的系统能够根据关键词进行搜索，并且支持分页搜索</p><p>2.假如说我们的数据源已经支持了搜索，但是原有的方法参数和我们的规范不一致，怎么办？</p><p>使用适配器模式：通过转换，让两个系统能够完成对接</p><h3 id="注册器模式（本质也是单例）"><a href="#注册器模式（本质也是单例）" class="headerlink" title="注册器模式（本质也是单例）"></a>注册器模式（本质也是单例）</h3><p>提前通过一个map或者其他类型存储好后面需要调用的对象</p><p>效果：替代了if…else…，代码大幅度减少，可维护可扩展</p><h3 id="API签名认证-1"><a href="#API签名认证-1" class="headerlink" title="API签名认证"></a>API签名认证</h3><p>本质：</p><p>   1.签发签名</p><p>   2.使用签名（校验签名）</p><p>为什么需要？</p><p>   1.保证安全性，不能随便一个人调用</p><pre><code>2.适用于无需保存登录态的场景，只认签名，不关注用户的登录态</code></pre><h4 id="签名认证的实现"><a href="#签名认证的实现" class="headerlink" title="签名认证的实现"></a>签名认证的实现</h4><p>通过http request header头传递参数</p><p>参数1：accessKey：调用的标识userA，userB（复杂，无序，无规律）</p><p>参数2：secertKey：密钥（复杂，无序，无规律）该参数不能放到请求头中（类似用户名和密码没区别：ak，sk是无状态的）</p><h5 id="千万不要直接把密钥直接在服务器之间传递，有可能被拦截"><a href="#千万不要直接把密钥直接在服务器之间传递，有可能被拦截" class="headerlink" title="千万不要直接把密钥直接在服务器之间传递，有可能被拦截"></a>千万不要直接把密钥直接在服务器之间传递，有可能被拦截</h5><p>参数3：用户请求参数</p><p>参数4：sign</p><p>加密方式：对称加密，非对称加密，md5签名（不可解密）</p><p>用户参数+密钥=》签名生成算法（MD5，HMac，Sha1）=》不可解密的值abc+abcdefgh=》sajdgdioajdgioa</p><h5 id="怎么知道这个签名认证对不对？"><a href="#怎么知道这个签名认证对不对？" class="headerlink" title="怎么知道这个签名认证对不对？"></a>怎么知道这个签名认证对不对？</h5><p>服务端用一摸一样的参数和算法生成签名，只要和用户传的一致，就表示一致</p><h5 id="怎么防重放？"><a href="#怎么防重放？" class="headerlink" title="怎么防重放？"></a>怎么防重放？</h5><p>参数5：加nonce随机数，只能用一次，服务端要保存用过的随机数</p><p>参数6：加timestamp时间戳，校验时间戳是否过期</p><p>API签名认证是一个很灵活的设计，具体要有哪些参数，参数名如何一定要根据场景来。（比如userId，appid，version，固定值）</p><h2 id="开发简易的SDK"><a href="#开发简易的SDK" class="headerlink" title="开发简易的SDK"></a>开发简易的SDK</h2><p>项目名：huaziapi-client-sdk</p><h4 id="为什么需要Starter？"><a href="#为什么需要Starter？" class="headerlink" title="为什么需要Starter？"></a>为什么需要Starter？</h4><p>理想情况：开发者只需要关心调用哪些接口，传递哪些参数，就跟调用自己写的代码一样简单</p><p>开发starter的好处：开发者引入之后，可以直接在application.yml中配置，自动创建客户端</p><h3 id="Starter开发流程"><a href="#Starter开发流程" class="headerlink" title="Starter开发流程"></a>Starter开发流程</h3><p>初始化，环境依赖（一定要移除pom文件的build）：</p><p>spring-boot-configuration-processor的作用是自动生成配置的代码提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置类（启动类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;yuapi.client&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YuApiClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     \* appId</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     */</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     \* 秘钥</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     */</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">private</span> String appSecret;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     \* 用户 id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     */</span></span><br><span class="line">​    <span class="keyword">private</span> String userId;</span><br><span class="line">​    <span class="meta">@Bean</span></span><br><span class="line">​    <span class="keyword">public</span> YuApiClient <span class="title function_">yuApiClient</span><span class="params">()</span> &#123;</span><br><span class="line">​        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">YuApiClient</span>(appId, appSecret, userId);</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册配置类，resources/META_INF/spring.factories 文件：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\# spring boot starter</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.yupi.yuapiclientsdk.YuApiClientConfig</span><br></pre></td></tr></table></figure><p>mvn install 打包代码为本地依赖包</p><p>创建新项目（复用server项目） 测试</p><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>什么是网关？</p><p>理解成火车站的检票口，统一去检票</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>统一去进行一些操作，处理一些问题</p><p>比如：</p><p>1.路由</p><p>2.负载均衡</p><p>3.统一鉴权</p><p>4.跨域</p><p>5.统一业务处理</p><p>6.访问控制</p><p>7.发布控制</p><p>8.流量染色</p><p>9.接口保护</p><p>​       a.限制请求</p><p>​       b.信息脱敏</p><p>​       c.降级（熔断）</p><p>​       d.限流：学习令牌桶算法，学习漏桶算法，学习RedisLimitHandler</p><p>​        e.超时时间</p><p>10.统一日志</p><p>11.统一文档</p><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><p>起到转发的作用。比如有接口A和接口B，网关会记录这些信息，根据用户访问地址和参数，转发请求到对应的接口（服务器/集群）</p><p>/a=》接口A</p><p>/b=》接口B</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</a></p><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>网关统一处理跨域，不用在每个项目里单独处理</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration</a></p><h5 id="发布控制"><a href="#发布控制" class="headerlink" title="发布控制"></a>发布控制</h5><p>灰度发布，比如上线新接口，先给新接口20%的流量，老接口80%，在慢慢调整比重。</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-factory</a></p><h5 id="流量染色"><a href="#流量染色" class="headerlink" title="流量染色"></a>流量染色</h5><p>给请求（流量）添加一些标识，一般是设置请求头中，添加新的请求头</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory</a></p><p>全局染色：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters</a></p><h5 id="统一接口保护"><a href="#统一接口保护" class="headerlink" title="统一接口保护"></a>统一接口保护</h5><p>1.限制请求：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersize-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersize-gatewayfilter-factory</a></p><p>2.信息脱敏：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory</a></p><p>3.降级熔断</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers</a></p><p>4.限流：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory</a></p><p>5.超时时间：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration</a></p><p>6.重试（业务保护）：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory</a></p><h5 id="统一业务处理"><a href="#统一业务处理" class="headerlink" title="统一业务处理"></a>统一业务处理</h5><p>把一些每个项目中都要做的通用逻辑放到上层（网关），统一处理，比如本项目的次数统计</p><h5 id="统一鉴权"><a href="#统一鉴权" class="headerlink" title="统一鉴权"></a>统一鉴权</h5><p>判断用户是否有权限进行操作，无论访问什么接口，我都统一去判断权限，不用重复写。</p><h5 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h5><p>黑白名单，比如限制 DDOS IP</p><h5 id="统一日志"><a href="#统一日志" class="headerlink" title="统一日志"></a>统一日志</h5><p>统一的请求、响应信息记录</p><h5 id="统一文档"><a href="#统一文档" class="headerlink" title="统一文档"></a>统一文档</h5><p>将下游文件进行聚合，在一个页面查看</p><p><a href="https://doc.xiaominfo.com/docs/middleware-sources/aggregation-introduction">https://doc.xiaominfo.com/docs/middleware-sources/aggregation-introduction</a></p><h3 id="网关的分类"><a href="#网关的分类" class="headerlink" title="网关的分类"></a>网关的分类</h3><p>1.全局网关（接入层网关）：作用是负载均衡，请求日志，不和业务逻辑绑定</p><p>2.业务网关（微服务网关）：会有一些业务逻辑，作用是将请求转发到不同的业务/项目/接口/服务</p><p>参考文章：<a href="https://blog.csdn.net/qq_21040559/article/details/122961395">https://blog.csdn.net/qq_21040559/article/details/122961395</a></p><h4 id="网关实现"><a href="#网关实现" class="headerlink" title="网关实现"></a>网关实现</h4><p>1.Nginx（全局网关），Kong网关（API网关，Kong：<a href="https://github.com/Kong/kong，编程成本相对高一点）">https://github.com/Kong/kong，编程成本相对高一点）</a></p><p>2.spring cloud gateway（取代了Zuul）性能高，可以用java代码写逻辑，适合学习</p><p>网关技术选型：<a href="https://zhuanlan.zhihu.com/p/500587132">https://zhuanlan.zhihu.com/p/500587132</a></p><h2 id="Spring-Cloud-Gateway用法"><a href="#Spring-Cloud-Gateway用法" class="headerlink" title="Spring Cloud Gateway用法"></a>Spring Cloud Gateway用法</h2><p>官网：<a href="https://spring.io/projects/spring-cloud-gateway/">https://spring.io/projects/spring-cloud-gateway/</a></p><p>官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/</a></p><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><p>路由（根据什么条件，转发请求到哪里）</p><p>断言：一组规则，条件，用来确定如何转发路由</p><p>过滤器：对请求进行一系列的处理，比如添加请求头，添加请求参数</p><p>请求流程：</p><p>  1.客户端发起请求</p><p>   2.handler Mapping:根据断言，去将请求转发到对应的路由</p><p>  3.Web Handler：处理请求（一层层经过过滤器）</p><p>  4.实际调用服务</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924205143.png" alt=""></p><h3 id="两种配置方式"><a href="#两种配置方式" class="headerlink" title="两种配置方式"></a>两种配置方式</h3><p>1.配置式（方便，规范）</p><p>​     a.简化版</p><p>​     b.全称版</p><p>2.编程式（灵活，相对麻烦）</p><p>建议开启日志：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">​    org:</span><br><span class="line">​      springframework:</span><br><span class="line">​        cloud:</span><br><span class="line">​          gateway: trace</span><br></pre></td></tr></table></figure><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>1.After 在 xx 时间之后<br>2Before 在 xx 时间之前<br>3Between 在 xx 时间之间<br>4请求类别<br>5请求头（包含 Cookie）<br>6查询参数<br>7客户端地址<br><strong>8</strong>权重</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>基本功能：对请求头、请求参数、响应头的增删改查<br>1添加请求头<br>2添加请求参数<br>3添加响应头<br>4降级<br>5限流<br>6重试</p><p>引入：</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">​    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">​    &lt;artifactId&gt;spring-cloud-starter-circuitbreaker-reactor-resilience4j&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="1-请求转发"><a href="#1-请求转发" class="headerlink" title="1.请求转发"></a>1.请求转发</h4><p>使用前缀匹配断言：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-path-route-predicate-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-path-route-predicate-factory</a></p><p>所有路径为：/api/<strong>的请求进行转发，转发到<a href="http://localhost:8123/api/">http://localhost:8123/api/</a></strong></p><p>比如说请求网关：<a href="http://localhost:8090/api/name/get?name=huazi">http://localhost:8090/api/name/get?name=huazi</a></p><p>转发到：<a href="http://localhost:8123/api//name/get?name=huazi">http://localhost:8123/api//name/get?name=huazi</a></p><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="string">​</span>    <span class="attr">gateway:</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">default-filters:</span></span><br><span class="line"><span class="string">​</span>        <span class="string">\-</span> <span class="string">AddResponseHeader=source,</span> <span class="string">yupi</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">routes:</span></span><br><span class="line"><span class="string">​</span>        <span class="string">\-</span> <span class="attr">id:</span> <span class="string">api_route</span></span><br><span class="line"><span class="string">​</span>          <span class="attr">uri:</span> <span class="string">http://localhost:8123</span></span><br><span class="line"><span class="string">​</span>          <span class="attr">predicates:</span></span><br><span class="line"><span class="string">​</span>            <span class="string">\-</span> <span class="string">Path=/api/**</span></span><br></pre></td></tr></table></figure><h4 id="2-编写业务逻辑"><a href="#2-编写业务逻辑" class="headerlink" title="2.编写业务逻辑"></a>2.编写业务逻辑</h4><p>使用了 GlobalFilter（编程式），全局请求拦截处理（类似 AOP）</p><p>因为网关项目没引入 MyBatis 等操作数据库的类库，如果该操作较为复杂，可以由 backend 增删改查项目提供接口，我们直接调用，不用再重复写逻辑了。<br>●HTTP 请求（用 HTTPClient、用 RestTemplate、Feign）<br>●RPC（Dubbo）</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>预期是等模拟接口调用完成，才记录响应日志、统计调用次数。</p><p>但现实是 chain.filter 方法立刻返回了，直到 filter 过滤器 return 后才调用了模拟接口。</p><p>原因是：chain.filter 是个异步操作，理解为前端的 promise</p><p>解决方案：利用 response 装饰者，增强原有 response 的处理能力</p><p>参考博客：<a href="https://blog.csdn.net/qq_19636353/article/details/126759522（以这个为主）">https://blog.csdn.net/qq_19636353/article/details/126759522（以这个为主）</a></p><p>其他参考：</p><p>●<a href="https://blog.csdn.net/m0_67595943/article/details/124667975">https://blog.csdn.net/m0_67595943/article/details/124667975</a></p><p>●<a href="https://blog.csdn.net/weixin_43933728/article/details/121359727?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_43933728/article/details/121359727</a></p><p>●<a href="https://blog.csdn.net/zx156955/article/details/121670681">https://blog.csdn.net/zx156955/article/details/121670681</a></p><p>●<a href="https://blog.csdn.net/qq_39529562/article/details/108911983">https://blog.csdn.net/qq_39529562/article/details/108911983</a></p><h3 id="网关业务逻辑"><a href="#网关业务逻辑" class="headerlink" title="网关业务逻辑"></a>网关业务逻辑</h3><p>问题：网关项目比较纯净，没有操作数据库的包，并且还要调用我们之前写过的代码？</p><p>复制粘贴维护麻烦</p><p>理想：直接请求其他项目的方法</p><h4 id="怎么调用其他项目的方法？"><a href="#怎么调用其他项目的方法？" class="headerlink" title="怎么调用其他项目的方法？"></a>怎么调用其他项目的方法？</h4><p>1.复制代码和依赖，环境</p><p>2.HTTP请求（提供一个接口，供其他项目调用）</p><p>3.RPC</p><p>4.把公共的代码打个jar包，其他项目去引用（客户端SDK）</p><h3 id="HTTP请求如何调用？"><a href="#HTTP请求如何调用？" class="headerlink" title="HTTP请求如何调用？"></a>HTTP请求如何调用？</h3><ol><li>提供方开发一个接口（地址、请求方法、参数、返回值）</li><li>调用方使用 HTTP Client 之类的代码包去发送 HTTP 请求</li></ol><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>作用：像调用本地方法一样调用远程方法。</p><p>和直接 HTTP 调用的区别：</p><p>1对开发者更透明，减少了很多的沟通成本。<br>2RPC 向远程服务器发送请求时，未必要使用 HTTP 协议，比如还可以用 TCP / IP，性能更高。（内部服务更适用）</p><p>RPC 调用模型：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924213353.png" alt=""></p><h3 id="Dubbo框架（RPC实现）"><a href="#Dubbo框架（RPC实现）" class="headerlink" title="Dubbo框架（RPC实现）"></a>Dubbo框架（RPC实现）</h3><p>其他RPC框架：GRPC，TRPC</p><p>最好的学习方式：阅读官方文档</p><p><a href="https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/quick-start/spring-boot/">https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/quick-start/spring-boot/</a></p><p>两种调用方式：</p><ol><li><p>Spring Boot 代码（注解 + 编程式）：写 Java 接口，服务提供者和消费者都去引用这个接口</p></li><li><p>IDL（接口调用语言）：创建一个公共的接口定义文件，服务提供者和消费者读取这个文件。优点是跨语言，所有的框架都认识</p></li></ol><p>底层是 Triple 协议：</p><p><a href="https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/">https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/</a></p><h3 id="整合运用"><a href="#整合运用" class="headerlink" title="整合运用"></a>整合运用</h3><p>建议大家用 Nacos！<br>整合 Nacos 注册中心：<a href="https://dubbo.apache.org/zh/docs3-v2/java-sdk/reference-manual/registry/nacos/">https://dubbo.apache.org/zh/docs3-v2/java-sdk/reference-manual/registry/nacos/</a></p><p>注意：</p><p>1.服务接口类必须要在同一个包下，建议是抽象出一个公共项目（放接口、实体类等）</p><p>2.设置注解（比如启动类的 EnableDubbo、接口实现类和 Bean 引用的注解）</p><p>3.添加配置</p><p>4.服务调用项目 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo --&gt;</span></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">​            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">​            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">​            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">​            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">​           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">​            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>和提供者项目尽量引入相同的依赖和配置</span><br></pre></td></tr></table></figure><h3 id="抽象公共服务"><a href="#抽象公共服务" class="headerlink" title="抽象公共服务"></a>抽象公共服务</h3><p>项目名：huazi-common</p><p>目的是让方法、实体类在多个项目间复用，减少重复编写。</p><p>服务抽取：<br>1.数据库中查是否已分配给用户秘钥（根据 accessKey 拿到用户信息，返回用户信息，为空表示不存在）<br>2.从数据库中查询模拟接口是否存在（请求路径、请求方法、请求参数，返回接口信息，为空表示不存在）<br>3.接口调用次数 + 1 invokeCount（accessKey、secretKey（标识用户），请求接口路径）</p><p>步骤：</p><p>1新建干净的 maven 项目，只保留必要的公共依赖</p><p>2抽取 service 和实体类</p><p>3install 本地 maven 包</p><p>4让服务提供者引入 common 包，测试是否正常运行</p><p>5让服务消费者引入 common 包</p>]]></content>
      
      
      <categories>
          
          <category> API签名认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Stack</title>
      <link href="/2023/09/01/Elastic%20Stack/"/>
      <url>/2023/09/01/Elastic%20Stack/</url>
      
        <content type="html"><![CDATA[<h1 id="Elastic-Stack"><a href="#Elastic-Stack" class="headerlink" title="Elastic Stack"></a>Elastic Stack</h1><p>官网：<a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></p><p>包含了数据的整合=》提取=》存储=》使用</p><p> 各组件介绍：</p><p>​       beats套件：从各种不同类型文件/应用中采取数据。比如：a,b,c,d,e,aa,bb,cc,dd,ee</p><p>​       logstash：从多个采集器或数据源来抽取/转换数据。向es输送</p><p>​       elasticsearch：存储，查询数据</p><p>​       kibana：可视化es的数据</p><h3 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h3><p>elasticsearch：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/setup.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/setup.html</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/zip-windows.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/zip-windows.html</a></p><p>只要是一套技术，所有版本必须一致！！！此处都用7.17版本</p><h3 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h3><p>kibana：</p><p><a href="https://www.elastic.co/guide/en/kibana/7.17/introduction.html">https://www.elastic.co/guide/en/kibana/7.17/introduction.html</a></p><p><a href="https://www.elastic.co/guide/en/kibana/7.17/install.html">https://www.elastic.co/guide/en/kibana/7.17/install.html</a></p><h3 id="Elasticsearch概念"><a href="#Elasticsearch概念" class="headerlink" title="Elasticsearch概念"></a>Elasticsearch概念</h3><p>把它当作MySQL一样的数据库去学习和理解</p><p>  入门学习：</p><p>​       index索引=》MYSQL里的表（table）</p><p>​       建表，增删改查（查询需要花费的学习时间最多）</p><p>​       用客户端去调用ElasticSearch（3种）</p><p>​       语法：SQL，代码的方法（4种语法）</p><p>ES相比于MySQL。能够自动帮我们做分词，能够非常高效，灵活的查询内容</p><h3 id="索引（倒排索引）"><a href="#索引（倒排索引）" class="headerlink" title="索引（倒排索引）"></a>索引（倒排索引）</h3><p>正向索引：理解为书籍目录，可以快速帮你找到对应的内容（怎么根据页码找到文章）</p><p>倒排索引：怎么根据文章找到内容</p><p>文章A：你好，我是rapper</p><p> 文章B：华子你好，我是repper</p><p>切词：</p><p>你好，我是，rapper</p><p>华子，你好，我是，coder</p><p>构建倒排索引表：</p><div class="table-container"><table><thead><tr><th>词</th><th>内容id</th></tr></thead><tbody><tr><td>你好</td><td>文章A，B</td></tr><tr><td>我是</td><td>文章A，B</td></tr><tr><td>rapper</td><td>文章A</td></tr><tr><td>华子</td><td>文章B</td></tr><tr><td>coder</td><td>文章B</td></tr></tbody></table></div><p>用户搜：“华子rapper”</p><p>ES先切词：华子，rapper</p><p>然后去倒排索引表找对应的文章</p><h2 id="ES的几种调用方式"><a href="#ES的几种调用方式" class="headerlink" title="ES的几种调用方式"></a>ES的几种调用方式</h2><h4 id="1-restful-api调用（HTTP请求）"><a href="#1-restful-api调用（HTTP请求）" class="headerlink" title="1.restful api调用（HTTP请求）"></a>1.restful api调用（HTTP请求）</h4><p>GET请求：<a href="http://localhost:9200/">http://localhost:9200/</a></p><p>curl可以模拟发送请求：curl-X GET “local host:9200/?pretty”</p><p>ES的启动端口</p><p>   1.9200：给外部用户（给客户端调用）的端口</p><p>   2.9300：给ES集群内部通信的（外部调用不了）</p><h4 id="2-Libana-devtools"><a href="#2-Libana-devtools" class="headerlink" title="2.Libana devtools"></a>2.Libana devtools</h4><p>自由的对ES进行操作（本质也是restful api）</p><p>devtools不建议生产环境使用</p><h4 id="3-客户端调用"><a href="#3-客户端调用" class="headerlink" title="3.客户端调用"></a>3.客户端调用</h4><p>java客户端，go客户端</p><p>参考文章：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/_getting_started.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/_getting_started.html</a></p><h2 id="ES的语法"><a href="#ES的语法" class="headerlink" title="ES的语法"></a>ES的语法</h2><h3 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h3><p>json格式，好理解；和http请求最兼容，应用也广，个人推荐</p><h5 id="建表，插入数据"><a href="#建表，插入数据" class="headerlink" title="建表，插入数据"></a>建表，插入数据</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST post/_doc/ro1R-oYBDwC2db8WGdlL</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华子2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华子的描述2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>DSL语法：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET post/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">​    <span class="punctuation">&#123;</span></span><br><span class="line">​      <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">​    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>根据id查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET post/_doc/ro1R-oYBDwC2db8WGdlL</span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST post/_doc/ro1R-oYBDwC2db8WGdlL</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华子2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华子的描述2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>删除普通索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE index_name</span><br></pre></td></tr></table></figure><p>删除数据流式索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE —_data_stream/logs-my_app-default</span><br></pre></td></tr></table></figure><h2 id="EQL"><a href="#EQL" class="headerlink" title="EQL"></a>EQL</h2><p>专门查询ECS文档（标准指标文档）的数据的语法，更加规范，但只适用于特定的场景（比如事件流）</p><p>文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/eql.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/eql.html</a></p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST my_event/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鱼333333皮&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2099-05-06T16:21:15.000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;event&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​    <span class="attr">&quot;original&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \&quot;GET /images/bg.jpg HTTP/1.0\&quot; 200 24736&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">GET my_event/_eql/search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">​    any where 1 == 1</span></span><br><span class="line"><span class="string">  &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/sql-getting-started.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/sql-getting-started.html</a></p><p>学习成本低，但是可能需要插件支持，性能较差</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /_sql?format=txt</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SELECT * FROM post where title like &#x27;%鱼皮%&#x27;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/explicit-mapping.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/explicit-mapping.html</a></p><p>可以理解为数据库的表结构，有哪些字段，字段类型</p><p>ES支持动态mapping，表结构可以动态改变，而不像MySQL一样必须手动建表，设有的字段就不能插入</p><p>显示创建mapping：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET user/_mapping</span><br><span class="line">PUT user</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span>    <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">​      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">​      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span>   <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span>  <span class="punctuation">&#125;</span>     </span><br><span class="line">​    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>指定了分词的规则</p><p>内置分词器：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-analyzers.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-analyzers.html</a></p><p>空格分词器：whitespace，结果The，quick，brown，fox</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;whitespace&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span>     <span class="string">&quot;The quick brown fox.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>标准分词器，结果：is，this，deja，vu</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span>  <span class="punctuation">[</span> <span class="string">&quot;lowercase&quot;</span><span class="punctuation">,</span> <span class="string">&quot;asciifolding&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span>      <span class="string">&quot;Is this déja vu?&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>关键词分词器：就是不分词，整句话当作专业术语</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span>     <span class="string">&quot;The quick brown fox.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>IK分词器（ES插件）</p><p>中文友好：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.17.7（注意版本一致）">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.17.7（注意版本一致）</a></p><p>思考：怎么让ik按自己想法分词？</p><p>解决方案：自定义词典</p><p>ik_smart和ik_max_word的区别？举例：“小黑子”</p><p>ik_smart是智能分词，尽量选择最象一个词的拆分方式，比如 “小”，“黑子”</p><p>ik_max_word尽可能地分词，可以包括组合词，比如“小黑” “黑子”</p><h2 id="打分机制"><a href="#打分机制" class="headerlink" title="打分机制"></a>打分机制</h2><p>比如有3条内容;</p><p> 1.鱼皮是狗</p><p>2.鱼皮是小黑子</p><p>3.我是小黑子</p><p>用户搜索：</p><p> 1.鱼皮，第一条分数最高，因为第一条匹配了关键词，而且很短（匹配比例更大）</p><p>2.鱼皮小黑子=》鱼皮，小，黑子，排序结果：2&gt;3&gt;1</p><p>参考文章：<a href="https://liyupi.blog.csdn.net/article/details/119176943">https://liyupi.blog.csdn.net/article/details/119176943</a></p><p>官方参考文章：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/master/controlling-relevance.html">https://www.elastic.co/guide/en/elasticsearch/guide/master/controlling-relevance.html</a></p><h2 id="ES调用方式"><a href="#ES调用方式" class="headerlink" title="ES调用方式"></a>ES调用方式</h2><p>1.HTTP Restful调用</p><p>2.kibana操作（dev tools）</p><p>3.客户端操作（java）</p><h2 id="java操作ES"><a href="#java操作ES" class="headerlink" title="java操作ES"></a>java操作ES</h2><p>3种方式</p><p>1.ES官方的java API</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/introduction.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/introduction.html</a></p><p>快速开始：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/connecting.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/connecting.html</a></p><p>2.ES以前官方的java API，HighLevelRestClient（已弃用）</p><p>3.Spring Data Elasticsearch（推荐）</p><p>spring-data系列：spring提供的操作数据的框架</p><p>spring-data-redis：操作redis的一套方法</p><p>spring-data-mongodb：操作mongodb的一套方法</p><p>spring-data-elasticsearch：操作elasticsearch的一套方法</p><p>官方文档：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.4.10/reference/html/">https://docs.spring.io/spring-data/elasticsearch/docs/4.4.10/reference/html/</a></p><h2 id="用ES实现搜索接口"><a href="#用ES实现搜索接口" class="headerlink" title="用ES实现搜索接口"></a>用ES实现搜索接口</h2><h4 id="1-建表（建立索引）"><a href="#1-建表（建立索引）" class="headerlink" title="1.建表（建立索引）"></a>1.建表（建立索引）</h4><p>数据库表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 帖子表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> post</span><br><span class="line">(</span><br><span class="line">​    id         <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">​    title      <span class="type">varchar</span>(<span class="number">512</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">​    content    text                               <span class="keyword">null</span> comment <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">​    tags       <span class="type">varchar</span>(<span class="number">1024</span>)                      <span class="keyword">null</span> comment <span class="string">&#x27;标签列表（json 数组）&#x27;</span>,</span><br><span class="line">​    thumbNum   <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;点赞数&#x27;</span>,</span><br><span class="line">​    favourNum  <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;收藏数&#x27;</span>,</span><br><span class="line">​    userId     <span class="type">bigint</span>                             <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建用户 id&#x27;</span>,</span><br><span class="line">​    createTime datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">​    updateTime datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">​    isDelete   tinyint  <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span>,</span><br><span class="line">​    index idx_userId (userId)</span><br><span class="line">) comment <span class="string">&#x27;帖子&#x27;</span> <span class="keyword">collate</span> <span class="operator">=</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>ES Mapping：</p><p>id（可以不放到字段设置里）</p><p>ES中，尽量存放需要用户筛选（搜索）的数据</p><p>aliases：别名（为了后续方便数据迁移）</p><p>字段类型是text，这个字段是可被分词的，可以模糊查询的，而如果是keyword，只能完全匹配，精确查询</p><p>analyzer（存储时生效的分词器）：用ik_max_word 拆的更碎，索引更多，更有可能被调出来</p><p>search_analyzer（查询时生效的分词器）：用ik_smart，更偏向于用户想搜的分词，如果想要让text类型的分词字段也支持精确查询，可以创建keyword类型子字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fields<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">​    &quot;</span>keyword<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">​      &quot;</span>type<span class="string">&quot;: &quot;</span>keyword<span class="string">&quot;,</span></span><br><span class="line"><span class="string">​      &quot;</span>ignore_above<span class="string">&quot;: 256 // 超过字符数则忽略查询</span></span><br><span class="line"><span class="string">​    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure><p>建表结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">POST post_v1</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​    <span class="attr">&quot;post&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">​            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​       <span class="punctuation">&#125;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">​            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;isDelete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span></span><br><span class="line">​    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-增删改查"><a href="#2-增删改查" class="headerlink" title="2.增删改查"></a>2.增删改查</h4><p>第一种方式LElasticsearchRepository<PostEsDTo,Long>,默认提供了简单的增删改查，多用于可预期的，相对没那么复杂的查询，自定义查询，返回结果相对简单直接</p><p>接口代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;T, ID&gt; &#123;</span><br><span class="line">​    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; S <span class="title function_">save</span><span class="params">(S entity)</span>;</span><br><span class="line">​    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; Iterable&lt;S&gt; <span class="title function_">saveAll</span><span class="params">(Iterable&lt;S&gt; entities)</span>;</span><br><span class="line">​    Optional&lt;T&gt; <span class="title function_">findById</span><span class="params">(ID id)</span>;</span><br><span class="line">​    <span class="type">boolean</span> <span class="title function_">existsById</span><span class="params">(ID id)</span>;</span><br><span class="line">​    Iterable&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">​    Iterable&lt;T&gt; <span class="title function_">findAllById</span><span class="params">(Iterable&lt;ID&gt; ids)</span>;</span><br><span class="line">​    <span class="type">long</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line">​    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(ID id)</span>;</span><br><span class="line">​    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(T entity)</span>;</span><br><span class="line">​    <span class="keyword">void</span> <span class="title function_">deleteAllById</span><span class="params">(Iterable&lt;? extends ID&gt; ids)</span>;</span><br><span class="line">​    <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">(Iterable&lt;? extends T&gt; entities)</span>;</span><br><span class="line">​    <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES中，_开头的字段表示系统默认字段，比如id，如果系统不指定，会自动生成。但是不会在_source字段补充id的值，所以建议大家手动指定</p><p>支持根据方法名自动生成方法，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PostEsDTO&gt; <span class="title function_">findByTitle</span><span class="params">(String title)</span>;</span><br></pre></td></tr></table></figure><p>第二种方式：Spring默认给我们的提供的es的客户端对象</p><p>ElasticsearchRestTemplate，也提供增删改查，他的增删改查更加灵活，适用于更复杂的操作，返回结果更完整，但需要自己分析</p><p>对于复杂的查询，建议使用第二种方式</p><p>三个步骤：</p><p>  1.取参数</p><p>   2.把参数结合为ES支持的搜索条件</p><p>   3.从返回值中取结果</p><h4 id="3-查询DSL"><a href="#3-查询DSL" class="headerlink" title="3.查询DSL"></a>3.查询DSL</h4><p>参考文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-bool-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-bool-query.html</a></p><p>示例代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET post/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">​    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 组合条件</span></span><br><span class="line">​      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 必须都满足</span></span><br><span class="line">​        <span class="punctuation">&#123;</span> <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;鱼皮&quot;</span>        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// match 模糊查询</span></span><br><span class="line">​        <span class="punctuation">&#123;</span> <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;知识星球&quot;</span>        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">​      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">​        <span class="punctuation">&#123;</span> <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span> <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;published&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// term 精确查询</span></span><br><span class="line">​        <span class="punctuation">&#123;</span> <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;publish_date&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2015-01-01&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span> <span class="comment">// range 范围查询</span></span><br><span class="line">​      <span class="punctuation">]</span></span><br><span class="line">​    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>wildcard模糊查询</p><p>regexp正则匹配查询</p><p>查询结果中，score代表匹配分数</p><p>建议先测试DSL，在翻译成java</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">​        <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="punctuation">]</span></span><br><span class="line">​      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">​        <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span></span><br><span class="line">​      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">​        <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;isDelete&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​        <span class="punctuation">&#123;</span></span><br><span class="line">​          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​            <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;框架&quot;</span></span><br><span class="line">​          <span class="punctuation">&#125;</span></span><br><span class="line">​        <span class="punctuation">&#125;</span></span><br><span class="line">​      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">​      <span class="attr">&quot;minimum_should_match&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">​    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 分页</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="comment">// 分页</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_createTime&quot;</span><span class="punctuation">,</span> <span class="string">&quot;desc&quot;</span><span class="punctuation">,</span> <span class="string">&quot;reviewStatus&quot;</span><span class="punctuation">,</span> <span class="string">&quot;priority&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tags&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 要查的字段</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 排序</span></span><br><span class="line">​    <span class="punctuation">&#123;</span></span><br><span class="line">​      <span class="attr">&quot;priority&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span></span><br><span class="line">​    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​    <span class="punctuation">&#123;</span></span><br><span class="line">​      <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span></span><br><span class="line">​    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">​    <span class="punctuation">&#123;</span></span><br><span class="line">​      <span class="attr">&quot;publishTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">​        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">​      <span class="punctuation">&#125;</span></span><br><span class="line">​    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>翻译为java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">BoolQueryBuilder</span> <span class="variable">boolQueryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 过滤</span></span><br><span class="line"></span><br><span class="line">​        boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">&quot;isDelete&quot;</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (id != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">&quot;id&quot;</span>, id));</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (notId != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.mustNot(QueryBuilders.termQuery(<span class="string">&quot;id&quot;</span>, notId));</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (userId != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">&quot;userId&quot;</span>, userId));</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 必须包含所有标签</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(tagList)) &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">for</span> (String tag : tagList) &#123;</span><br><span class="line"></span><br><span class="line">​                boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">&quot;tags&quot;</span>, tag));</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 包含任何一个标签即可</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(orTagList)) &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="type">BoolQueryBuilder</span> <span class="variable">orTagBoolQueryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">for</span> (String tag : orTagList) &#123;</span><br><span class="line"></span><br><span class="line">​                orTagBoolQueryBuilder.should(QueryBuilders.termQuery(<span class="string">&quot;tags&quot;</span>, tag));</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​            orTagBoolQueryBuilder.minimumShouldMatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.filter(orTagBoolQueryBuilder);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 按关键词检索</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (StringUtils.isNotBlank(searchText)) &#123;</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, searchText));</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;content&quot;</span>, searchText));</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.minimumShouldMatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 按标题检索</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (StringUtils.isNotBlank(title)) &#123;</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, title));</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.minimumShouldMatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 按内容检索</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (StringUtils.isNotBlank(content)) &#123;</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;content&quot;</span>, content));</span><br><span class="line"></span><br><span class="line">​            boolQueryBuilder.minimumShouldMatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 排序</span></span><br><span class="line"></span><br><span class="line">​        SortBuilder&lt;?&gt; sortBuilder = SortBuilders.scoreSort();</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (StringUtils.isNotBlank(sortField)) &#123;</span><br><span class="line"></span><br><span class="line">​            sortBuilder = SortBuilders.fieldSort(sortField);</span><br><span class="line"></span><br><span class="line">​            sortBuilder.order(CommonConstant.SORT_ORDER_ASC.equals(sortOrder) ? SortOrder.ASC : SortOrder.DESC);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 分页</span></span><br><span class="line"></span><br><span class="line">​        <span class="type">PageRequest</span> <span class="variable">pageRequest</span> <span class="operator">=</span> PageRequest.of((<span class="type">int</span>) current, (<span class="type">int</span>) pageSize);</span><br><span class="line"></span><br><span class="line">​        <span class="comment">// 构造查询</span></span><br><span class="line"></span><br><span class="line">​        <span class="type">NativeSearchQuery</span> <span class="variable">searchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>().withQuery(boolQueryBuilder)</span><br><span class="line"></span><br><span class="line">​                .withPageable(pageRequest).withSorts(sortBuilder).build();</span><br><span class="line"></span><br><span class="line">​        SearchHits&lt;PostEsDTO&gt; searchHits = elasticsearchRestTemplate.search(searchQuery, PostEsDTO.class);</span><br></pre></td></tr></table></figure><p>动静分离设计：先模糊筛选静态数据，查出数据后，再根据查到的内容id去数据库查找到动态数据</p><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>一般情况下，如果做查询搜索功能，使用ES来模糊搜索，但是数据是存放在数据库MySQL里的，所以我们需要把MySQL中的数据和ES进行同步，保证数据一致（以MySQL为主）</p><p>MySQL=&gt;ES（单向）</p><p>首先安装完ES，把MySQL数据全量同步到ES里，写一个单次脚本4种方式，全量同步（首次）+增量同步（新数据）：</p><p>1.定时任务，比如一分钟一次，找到MySQL中过去几分钟内（至少是定时周期的2倍）发生改变的数据，然后更新到ES</p><p>优点：简单易懂，占用资源少，不用引入第三方中间件</p><p>缺点：有时间差</p><p>应用场景：数据短时间内不同步影响不大，或者数据几乎不发生修改</p><p>2.双写：写数据时侯，必须也去写ES，更新删除数据库同理。（事务：建议先保证MySQL写成功，如果ES写失败了，可以通过定时任务+日志+告警进行检测和修复）</p><p>3.用Logstash数据同步管道（一般要配合kafka消息队列+beats采集器）：</p><p>4.Canal监听MySQL Binlog，实时同步</p><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>传输和处理数据的管道</p><p><a href="https://www.elastic.co/guide/en/logstash/7.17/getting-started-with-logstash.html">https://www.elastic.co/guide/en/logstash/7.17/getting-started-with-logstash.html</a></p><p><a href="https://artifacts.elastic.co/downloads/logstash/logstash-7.17.9-windows-x86_64.zip">https://artifacts.elastic.co/downloads/logstash/logstash-7.17.9-windows-x86_64.zip</a></p><p>好处：用起来方便，插件多</p><p>缺点：成本更大，一般要配合其他组件使用（比如kafka）</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230923193222.png" alt=""></p><p>事件Demo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> logstash-7.17.9</span><br><span class="line">.\bin\logstash.bat -e <span class="string">&quot;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>快速开始文档：</p><p><a href="https://www.elastic.co/guide/en/logstash/7.17/running-logstash-windows.html">https://www.elastic.co/guide/en/logstash/7.17/running-logstash-windows.html</a></p><p>监听udp并输出：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment"># Sample Logstash configuration for receiving</span></span><br><span class="line">\<span class="comment"># UDP syslog messages over port 514</span></span><br><span class="line"><span class="section">input</span> &#123;</span><br><span class="line">  <span class="section">udp</span> &#123;</span><br><span class="line">​    <span class="attribute">port</span> =&gt; <span class="number">514</span></span><br><span class="line">​    type =&gt; <span class="string">&quot;syslog&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  <span class="section">stdout</span> &#123; <span class="attribute">codec</span> =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把MySQL同步给Elasticsearch</p><p>问题 1：找不到 mysql 的包<br>Error: unable to load mysql-connector-java-5.1.36-bin.jar from :jdbc_driver_library, file not readable (please check user and group permissions for the path)<br>  Exception: LogStash::PluginLoadingError</p><p>解决：修改 Logstash 任务配置中的 jdbc_driver_library 为驱动包的绝对路径（驱动包可以从 maven 仓库中拷贝）</p><p>增量配置：是不是可以只查最新更新的？可以记录上次更新的数据时间，只查出来 &gt; 该更新时间的数据</p><p>sql_last_value 是取上次查到的数据的最后一行的指定的字段，如果要全量更新，只要删除掉 E:\software\ElasticStack\logstash-7.17.9\data\plugins\inputs\jdbc\logstash_jdbc_last_run 文件即可（这input {</p><p>  jdbc {</p><p>​    jdbc_driver_library =&gt; “E:\software\ElasticStack\logstash-7.17.9\config\mysql-connector-java-8.0.29.jar”</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attribute">jdbc_driver_class</span> =&gt; <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">​    jdbc_connection_string =&gt; <span class="string">&quot;jdbc:mysql://localhost:3306/my_db&quot;</span></span><br><span class="line">​    jdbc_user =&gt; <span class="string">&quot;root&quot;</span></span><br><span class="line">​    jdbc_password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">​    statement =&gt; <span class="string">&quot;SELECT * from post where updateTime &gt; :sql_last_value&quot;</span></span><br><span class="line">​    tracking_column =&gt; <span class="string">&quot;updatetime&quot;</span></span><br><span class="line">​    tracking_column_type =&gt; <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">​    use_column_value =&gt; <span class="literal">true</span></span><br><span class="line">​    parameters =&gt; &#123; &quot;favorite_artist&quot; =&gt; &quot;Beethoven&quot; &#125;</span><br><span class="line">​    <span class="attribute">schedule</span> =&gt; <span class="string">&quot;*/5 * * * * *&quot;</span></span><br><span class="line">​    jdbc_default_timezone =&gt; <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  <span class="section">stdout</span> &#123; <span class="attribute">codec</span> =&gt; rubydebug &#125;</span><br><span class="line">&#125;个文件存储了上次同步到的数据）</span><br></pre></td></tr></table></figure><p>注意查询语句中要按照updateTime排序，保证最后一条是最大的：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">input</span> &#123;</span><br><span class="line">  <span class="section">jdbc</span> &#123;</span><br><span class="line">​    <span class="attribute">jdbc_driver_library</span> =&gt; <span class="string">&quot;E:\software\ElasticStack\logstash-7.17.9\config\mysql-connector-java-8.0.29.jar&quot;</span></span><br><span class="line">​    jdbc_driver_class =&gt; <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">​    jdbc_connection_string =&gt; <span class="string">&quot;jdbc:mysql://localhost:3306/my_db&quot;</span></span><br><span class="line">​    jdbc_user =&gt; <span class="string">&quot;root&quot;</span></span><br><span class="line">​    jdbc_password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">​    statement =&gt; <span class="string">&quot;SELECT * from post where updateTime &gt; :sql_last_value and updateTime &lt; now() order by updateTime desc&quot;</span></span><br><span class="line">​    tracking_column =&gt; <span class="string">&quot;updatetime&quot;</span></span><br><span class="line">​    tracking_column_type =&gt; <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">​    use_column_value =&gt; <span class="literal">true</span></span><br><span class="line">​    parameters =&gt; &#123; &quot;favorite_artist&quot; =&gt; &quot;Beethoven&quot; &#125;</span><br><span class="line">​    <span class="attribute">schedule</span> =&gt; <span class="string">&quot;*/5 * * * * *&quot;</span></span><br><span class="line">​    jdbc_default_timezone =&gt; <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  <span class="section">stdout</span> &#123; <span class="attribute">codec</span> =&gt; rubydebug &#125;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">​    <span class="attribute">hosts</span> =&gt; <span class="string">&quot;http://localhost:9200&quot;</span></span><br><span class="line">​    index =&gt; <span class="string">&quot;post_v1&quot;</span></span><br><span class="line">​    document_id =&gt; <span class="string">&quot;%&#123;id&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个问题：<br>1字段全变成小写了<br>2多了一些我们不想同步的字段</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">input</span> &#123;</span><br><span class="line">  <span class="section">jdbc</span> &#123;</span><br><span class="line">​    <span class="attribute">jdbc_driver_library</span> =&gt; <span class="string">&quot;E:\software\ElasticStack\logstash-7.17.9\config\mysql-connector-java-8.0.29.jar&quot;</span></span><br><span class="line">​    jdbc_driver_class =&gt; <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">​    jdbc_connection_string =&gt; <span class="string">&quot;jdbc:mysql://localhost:3306/my_db&quot;</span></span><br><span class="line">​    jdbc_user =&gt; <span class="string">&quot;root&quot;</span></span><br><span class="line">​    jdbc_password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">​    statement =&gt; <span class="string">&quot;SELECT * from post where updateTime &gt; :sql_last_value and updateTime &lt; now() order by updateTime desc&quot;</span></span><br><span class="line">​    tracking_column =&gt; <span class="string">&quot;updatetime&quot;</span></span><br><span class="line">​    tracking_column_type =&gt; <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">​    use_column_value =&gt; <span class="literal">true</span></span><br><span class="line">​    parameters =&gt; &#123; &quot;favorite_artist&quot; =&gt; &quot;Beethoven&quot; &#125;</span><br><span class="line">​    <span class="attribute">schedule</span> =&gt; <span class="string">&quot;*/5 * * * * *&quot;</span></span><br><span class="line">​    jdbc_default_timezone =&gt; <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">​    <span class="section">mutate</span> &#123;</span><br><span class="line">​        <span class="attribute">rename</span> =&gt; &#123;</span><br><span class="line">​          &quot;updatetime&quot; =&gt; &quot;updateTime&quot;</span><br><span class="line">​          &quot;userid&quot; =&gt; &quot;userId&quot;</span><br><span class="line">​          &quot;createtime&quot; =&gt; &quot;createTime&quot;</span><br><span class="line">​          &quot;isdelete&quot; =&gt; &quot;isDelete&quot;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="attribute">remove_field</span> =&gt; [<span class="string">&quot;thumbnum&quot;</span>, <span class="string">&quot;favournum&quot;</span>]</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  <span class="section">stdout</span> &#123; <span class="attribute">codec</span> =&gt; rubydebug &#125;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">​    <span class="attribute">hosts</span> =&gt; <span class="string">&quot;127.0.0.1:9200&quot;</span></span><br><span class="line">​    index =&gt; <span class="string">&quot;post_v1&quot;</span></span><br><span class="line">​    document_id =&gt; <span class="string">&quot;%&#123;id&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="订阅数据库流水的同步方式Canal"><a href="#订阅数据库流水的同步方式Canal" class="headerlink" title="订阅数据库流水的同步方式Canal"></a>订阅数据库流水的同步方式Canal</h4><p><a href="https://github.com/alibaba/canal/">https://github.com/alibaba/canal/</a></p><p>优点：实时同步，实时性非常强<br>原理：数据库每次修改时，会修改 binlog 文件，只要监听该文件的修改，就能第一时间得到消息并处理<br>canal：帮你监听 binlog，并解析 binlog 为你可以理解的内容。<br>它伪装成了 MySQL 的从节点，获取主节点给的 binlog，如图：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230923193956.png" alt=""></p><p>快速开始：<a href="https://github.com/alibaba/canal/wiki/QuickStart">https://github.com/alibaba/canal/wiki/QuickStart</a></p><p>windows 系统，找到你本地的 mysql 安装目录，在根目录下新建 my.ini 文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">**[mysqld]**</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">mysql-bin # 开启 binlog</span></span><br><span class="line"><span class="attr">binlog-format</span>=<span class="string">ROW # 选择 ROW 模式</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="string">1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span></span><br></pre></td></tr></table></figure><p>如果 java 找不到，修改 startup.bat 脚本为你自己的 java home：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">set</span> <span class="string">JAVA_HOME=C:\Users\59278\.jdks\corretto-1.8.0_302</span></span><br><span class="line"><span class="attr">echo</span> <span class="string">%JAVA_HOME%</span></span><br><span class="line"><span class="attr">set</span> <span class="string">PATH=%JAVA_HOME%\bin;%PATH%</span></span><br><span class="line"><span class="attr">echo</span> <span class="string">%PATH%</span></span><br></pre></td></tr></table></figure><p>问题：mysql 无法链接，Caused by: java.io.IOException: caching_sha2_password Auth failed</p><p>解决方案：</p><p><a href="https://github.com/alibaba/canal/issues/3902">https://github.com/alibaba/canal/issues/3902</a></p><p>ALTER USER ‘canal’@’%’ IDENTIFIED WITH mysql_native_password BY ‘canal’;</p><p>ALTER USER ‘canal’@’%’ IDENTIFIED BY ‘canal’ PASSWORD EXPIRE NEVER;</p><p>FLUSH PRIVILEGES;</p><p> 配置 kibana 可视化看板</p><p> 1创建索引<br>2导入数据<br>3创建索引模式<br>4选择图表、拖拉拽<br>5保存</p>]]></content>
      
      
      <categories>
          
          <category> Elastic Stack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2023/09/01/Redis/"/>
      <url>/2023/09/01/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p>  基于内存的K/V存储中间件</p><p>   NoSQL键值对数据库</p><p>Redis不仅仅是数据库，它还能作为消息队列</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924153947.png" alt=""></p><h5 id="关系型SQL和NoSQL的对比"><a href="#关系型SQL和NoSQL的对比" class="headerlink" title="关系型SQL和NoSQL的对比"></a>关系型SQL和NoSQL的对比</h5><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924154043.png" alt=""></p><h4 id="Redis特征"><a href="#Redis特征" class="headerlink" title="Redis特征"></a>Redis特征</h4><p>1.支持多种数据结构</p><p>2.单线程，每个命令的执行具备原子性，中途不会执行其他命令（指命令处理始终是单线程的）</p><p>3.高性能，低延时（基于内存，IO多路复用，良好编码）</p><p>4.支持数据持久化</p><p>5.支持主从，分片集群</p><p>6.支持多语言客户端</p><h5 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h5><p>建议Linux下安装，直接到官网进行安装，注意安装后更改redis.conf文件，设置bind ip，requirepass密码等参数。</p><h4 id="Redis连接方式"><a href="#Redis连接方式" class="headerlink" title="Redis连接方式"></a>Redis连接方式</h4><p>   redis-cli</p><p>   GUL</p><p>   多语言SDK</p><p>​    </p><h4 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h4><p>Redis的命令根据数据结构分为多个</p><p>1.redis官网命令集：<a href="https://redis.io/commands/，中文版：http://www.redis.cn/commands.html">https://redis.io/commands/，中文版：http://www.redis.cn/commands.html</a></p><p>2.redis-cli help命令查看，help 【command】可以查看某个具体的命令，help@xxx可以查看某个分组下的命令</p><p>通用命令<br>●set key value<br>●get key<br>●keys pattern 模糊搜索多个 key。性能较差，生产环境（尤其是主节点）不建议使用<br>●del key…<br>●exists key 判断 key 是否存在<br>●expire key 设置过期时间<br>●ttl key 查询剩余存活时间，未设置过期时间则为 -1</p><h2 id="Redis基本数据结构"><a href="#Redis基本数据结构" class="headerlink" title="Redis基本数据结构"></a>Redis基本数据结构</h2><p>支持存储字符串，数字，浮点数（实际储存都是字节数组）</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924155257.png" alt=""></p><p>单key的value最大不能超过512M</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924155602.png" alt=""></p><p>实际使用时，通常用冒号连接多个词来拼接 key，比如 [项目名]:[业务名]:[类名]:[id]。在某些 GUI 工具中，会自动根据冒号来划分层级，浏览更方便。</p><h4 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h4><p>值是一个Hash结构（类似java的hashMap）</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924155712.png" alt=""></p><p>常用命令：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924155749.png" alt=""></p><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>理解为Java的LinkedList双向链表，特点是有序，插入删除速度快，但查找性能一般：</p><p>常见命令如下：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924160001.png" alt=""></p><h3 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h3><p>集合，类似于java中的HashSet，特点是单set内元素不能重复，查找性能高</p><p>常见命令如下：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924160350.png" alt=""></p><h3 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h3><p>有序集合，在set的基础上给每个元素多存一个分数，类似于value类型为整型的HashMap</p><p>特点是有序，查找性能高，适合用于排行榜，统计TopN</p><p>常见命令：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924160424.png" alt=""></p><h2 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h2><p>可以在Redis官网查看所有客户端以及推荐的客户端：<a href="https://redis.io/docs/clients">https://redis.io/docs/clients</a></p><p>对于java，主要推荐以下三种：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924160552.png" alt=""></p><p>其中，Jedis 的命令和原生 redis 命令行的命令一致，学习成本最低（注意它是线程不安全的，通常配合连接池使用）；Lettuce 和 Spring 兼容最好（Spring Data Redis 默认集成）、基于 Netty 性能最高；Redisson 提供了和 Java 集合用法一致的分布式集合，适用于更复杂的业务场景。</p><h3 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h3><p>Spring data 整合封装了一系列数据访问的操作，spring data redis则是封装了对Jedis，Letture这两个Redis客户端的操作，提供了统一的RedisTemplate来操作Redis</p><p>RedisTemplate针对不同的Redis数据结构提供不同的API，划分更明确：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924161120.png" alt=""></p><p>注意，要在Spring data redis 中使用Letture线程池的话，要额外引入apache commonss-pools依赖</p><h5 id="RedisTemplate序列化"><a href="#RedisTemplate序列化" class="headerlink" title="RedisTemplate序列化"></a>RedisTemplate序列化</h5><p>RedisTemplate默认使用JDK原生序列化器，可读性差，内存占用大，因此可以用以下两种方式来改变序列化机制：</p><p>  1.自定义RedisTemplate，指定key和value的序列化器</p><p>  2.使用自带的StringRedisTemplate，key和value默认使用使用String序列化器，仅支持写入String类型key和value，因此需要自己将对象序列化成string来写入redis，从redis读出数据时也要手动反系列化</p><h1 id="二-Redis实战"><a href="#二-Redis实战" class="headerlink" title="二.Redis实战"></a>二.Redis实战</h1><p>业务场景：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924161714.png" alt=""></p><h3 id="共享Session（单点登录）"><a href="#共享Session（单点登录）" class="headerlink" title="共享Session（单点登录）"></a>共享Session（单点登录）</h3><p>介绍</p><p>为什么需要共享Session？</p><p>防止多个后端服务器的数据存储不一致，导致用户访问时出现未登录的情况</p><p>如何实现共享Session？</p><p>使用独立的内存存储来存放Session</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924162004.png" alt=""></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>为了安全性，随机生成token，而不是拼接用户信息，防止恶意伪造或者爆破</p><h5 id="选用何种value数据结构存放用户信息？"><a href="#选用何种value数据结构存放用户信息？" class="headerlink" title="选用何种value数据结构存放用户信息？"></a>选用何种value数据结构存放用户信息？</h5><p>string还是hash？有以下两种方案：</p><p>​    1.先在程序中将对象进行JSON序列化，在以string类型写入</p><p>​     2.直接以hash数据结构写入</p><p>因为用户信息是对象，建议选hash数据结构，占用内存更少，且支持对单个字段的增删改查</p><p>具体流程：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924162519.png" alt=""></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>1.存入Redis的数据一定要设置过期时间！</p><p>2.存入Redis的数据尽量保证精简和安全，比如存入用户信息时可以移除密码等敏感数据</p><p>3.一登陆用户访问系统后，记得刷新token过期时间（续费）。并且访问任何路径时都要刷新token，而不仅需要登录的路径，可以新增一层独立的拦截器来实现token刷新，如下图：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924163657.png" alt=""></p><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>介绍</p><p>什么是缓存？</p><p>临时存放数据的缓冲区。</p><p>缓存无处不在：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924163825.png" alt=""></p><p>为什么需要缓存？</p><p>提前准备好数据，便于更快的读写。</p><p>缓存不是银弹，要权衡利弊！</p><p>优点：</p><p> 减低后端节点负载</p><p> 提升数据读写性能</p><p>缺点：</p><p>​     额外引入中间件，增大运维成本</p><p>​     额外开发和解决问题带来的问题，增大开发成本</p><p>​     需要保证数据的一致性</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h5 id="关键流程"><a href="#关键流程" class="headerlink" title="关键流程"></a>关键流程</h5><p>  1.暂无缓存，从数据库读，然后设置更新缓存</p><p>   2.已有缓存，直接读缓存</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924164447.png" alt=""></p><h5 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h5><p>几种常用策略，一般选择主动更新+超时剔除兜底</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924164355.png" alt=""></p><p>主动更新缓存的几种方式：</p><p>1.cache aside：以数据库的数据为准，业务层自己来控制缓存的写入</p><p>2.write/read through：使用现成的数据写入服务，让服务来维护数据库和缓存的一致性，我们只用写数据即可</p><p>3.write behind cache：先更新缓存，通过异步线程定期将缓存的数据持久化（同步到数据库中）</p><p>是选择删除缓存还是更新缓存？</p><p>建议选择删除缓存，等待下次查询自动设置缓存，做到随用随取，可以避免每次更新数据库后都更新缓存的无效写操作。</p><p>多线程情况下，如何保证缓存和数据库一致性？</p><p>1.单机：使用本地事务</p><p>2.分布式：使用TCC等分布式事务</p><p>先删除缓存还是先操作数据库？</p><p>下图是两种方式在多线程下可能出现的问题：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924165445.png" alt=""></p><p>这两种方式都不能百分百保证一致性，但建议选择【先操作数据库，再删除缓存】，出现问题的概率会更低。可以配合延时双删保证缓存一定被删除。</p><h3 id="问题及解决"><a href="#问题及解决" class="headerlink" title="问题及解决"></a>问题及解决</h3><h5 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h5><p>攻击者可以恶意请求数据库中不存在的数据，从而使得每次查询都要绕过缓存查数据库，增大数据库的压力</p><p>解决方案：</p><p>1.缓存空值：比如塞一个空字符串，注意可以给空对象设置一个过期时间设置短一点，或者在新增数据时强制清除对应缓存（防止查出来还是null）</p><p>2.布隆过滤器</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924165906.png" alt=""></p><p>预防做法：</p><p>1增强对请求数据的校验，比如 id &gt; 0</p><p>2增强对数据格式的控制，比如 id 设置为 10 位，不为 10 位的请求直接拒绝</p><p>3增强用户权限校验</p><p>4通过限流来保护数据库</p><h5 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h5><p>问题：大量key同时失效或Redis宕机导致大量请求访问数据库，带来巨大的压力</p><p>解决思路：</p><p>  1.不要让key同时失效</p><p>  2.尽量不让Redis宕机</p><p>具体解决方案：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924170159.png" alt=""></p><h5 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h5><p>又叫热点key失效：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924170239.png" alt=""></p><p>两种解决方案：<br>1互斥锁：只有一个线程会负责缓存重建，其余线程拿不到锁，就等着<br>2逻辑过期：key 设置为永不过期，在 value 中记录过期时间，业务中根据这个过期时间来判断缓存是否有效；如果缓存已过期，只有一个线程能抢到锁（然后需要再次判断是否存在缓存），开启独立线程去更新缓存，然后立即返回过期数据；其他抢不到锁的线程也立即返回过期数据，不用等着锁释放。<br>如图：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924170326.png" alt=""></p><p>两种方式都使用了互斥锁来降低缓存重建的开销。<br>方案优缺点对比：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924170702.png" alt=""></p><h4 id="分布式全局id生成"><a href="#分布式全局id生成" class="headerlink" title="分布式全局id生成"></a>分布式全局id生成</h4><p>介绍</p><p>为什么需要分布式全局ID生成器？</p><p>1.对于订单这种数据，数据库自增的规律性太明显，会暴露一些信息（比如根据昨日和今日的订单号差值看出销量）</p><p>2.数据量过大时，不同表的id分别自增，容易出现id冲突</p><p>分布式全局ID生成应满足的特点：</p><p> 1.唯一：整个系统每个id都是唯一的</p><p>2.递增：虽然不连续，但整体ID保持递增，有利于数据库创建索引（也符合自然规律）</p><p>3.安全：不通过id看出敏感业务信息</p><p>4.高可用：作为核心业务，不会挂掉，否则会影响新数据的生成</p><p>5.高性能：作为频繁调用的服务，性能一定要高</p><p>几种常见的ID生成方法，建议根据自己的实际需求选择和设计算法：</p><p>雪花算法：性能更高，引入机器序号，但依赖全局时钟<br>数据库自增：单独的自增表，所有 id 全从这个表取。但性能没有 Redis 高<br>UUID：随机生成十六进制字符串，性能高，但是乱序、字符串会占用更多空间<br>Redis 自增 ID：利用 incr 命令实现</p><p>Redis 自增 ID 完全可以满足以上几个分布式全局 ID 的特点。单 key 的自增</p><h4 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h4><p>以下是一种ID生成的设计，使用Long类型存储id：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924171910.png" alt=""></p><p>使用 Redis 的 Incr 命令，可以实现后 32 位的原子性递增。<br>Redis 的 key 可以设计为 [业务]:[类型]:[日期]，这样每天都会从 1 开始生成序列号。如果用单 key，可能会出现生成序号数溢出 2^32 的情况</p><h3 id="秒杀业务"><a href="#秒杀业务" class="headerlink" title="秒杀业务"></a>秒杀业务</h3><p>秒杀业务的核心流程是：判断如期和库存，扣减库存，创建订单</p><p>如下图：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924172205.png" alt=""></p><p>注意，秒杀库存信息和商品信息最好是独立的两张表，不要放在一起影响性能。</p><h4 id="订单超卖问题"><a href="#订单超卖问题" class="headerlink" title="订单超卖问题"></a>订单超卖问题</h4><p>出现的原因：有多个人同时下单，在库存扣减前大家查到的库存都大于0，所以都触发了扣库存操作。</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924172404.png" alt=""></p><p>1）悲观锁：假定每次并发都会冲突，所以干脆给操作整体加锁，将并发改为同步执行。<br>可以通过 synchronized 关键字实现。<br>优点是实现简单，缺点是严重影响性能（大家可以同时抢购）。</p><p>2）乐观锁：假定并发不一定会冲突，所以不加锁，而是通过判断数据是否在查出来之后被其他线程修改过，来决定是否允许操作。</p><p>乐观锁主要有版本号法和 CAS 两种实现方式。</p><p>版本号法：<br>给数据增加一个版本号字段，每次修改操作版本号 + 1，就可以通过版本号来判断数据是否有被修改。</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924173359.png" alt=""></p><p>CAS 是对乐观锁的简化，即直接用一个每次都会查询和更新的字段来代替版本号，比如库存 stock 字段：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230924173425.png" alt=""></p><p>优点：性能好<br>缺点：存在成功率低的问题（很多人查到的版本号是一样的， 结果只能有一个人操作成功），可以使用分段锁来改进。比如将 100 个库存分为 10 份，大家分别抢这 10 份。</p><p>对于以上这种场景，其实不用判断 stock 是否变化，可以直接判断 stock &gt; 0，从而保障成功率。</p><h4 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h4><p>优惠券或者秒杀活动的目的是为了吸引新用户，因此不能让一个用户把所有东西都抢走了。所以需要额外判断用户当前下单数是否 &gt; 0。</p><p>这一步操作在多线程场景下依然会出现问题：新用户第一次进来同时抢 10 次，结果判断下单数都是 0，然后就都抢成功了。</p><p>所以还是需要加锁，因为订单是新创建的数据，所以无法使用乐观锁，使用悲观锁实现。</p><p>  单机实现</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用AI进行数据分析</title>
      <link href="/2023/09/01/%E5%88%A9%E7%94%A8AI%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/01/%E5%88%A9%E7%94%A8AI%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="利用AI进行数据分析"><a href="#利用AI进行数据分析" class="headerlink" title="利用AI进行数据分析"></a>利用AI进行数据分析</h1><p>使用 csv 对 excel 文件的数据进行提取和压缩</p><p>开源库：<a href="https://easyexcel.opensource.alibaba.com/docs/current/">https://easyexcel.opensource.alibaba.com/docs/current/</a></p><h3 id="如何对AI进行系统预设？"><a href="#如何对AI进行系统预设？" class="headerlink" title="如何对AI进行系统预设？"></a>如何对AI进行系统预设？</h3><p>如果想要让 AI 更好地理解我们的输入，给我们预期的、精确格式的输出，我们就需要严格控制咱们的提问词。</p><p>1.使用系统预设</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230926170710.png" alt=""></p><p>1）控制输入格式（便于 AI 精确地理解我们的需求）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你是一个数据分析师和前端开发专家，接下来我会按照以下固定格式给你提供内容：</span><br><span class="line">分析需求：</span><br><span class="line">&#123;数据分析的需求或者目标&#125;</span><br><span class="line">原始数据：</span><br><span class="line">&#123;csv格式的原始数据，用,作为分隔符&#125;</span><br><span class="line">请根据以上内容，帮我生成数据分析结论和可视化图表代码</span><br></pre></td></tr></table></figure><p>2）控制输出格式（便于 AI 返回的内容能够更加方便地为我们所用）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">你是一个数据分析师和前端开发专家，接下来我会按照以下固定格式给你提供内容：</span><br><span class="line">分析需求：</span><br><span class="line">&#123;数据分析的需求或者目标&#125;</span><br><span class="line">原始数据：</span><br><span class="line">&#123;csv格式的原始数据，用,作为分隔符&#125;</span><br><span class="line">请根据这两部分内容，按照以下指定格式生成内容（此外不要输出任何多余的开头、结尾、注释）</span><br><span class="line">【【【【【</span><br><span class="line">&#123;前端 Echarts V5 的 option 配置对象js代码，合理地将数据进行可视化，不要生成任何多余的内容，比如注释&#125;</span><br><span class="line">【【【【【</span><br><span class="line">&#123;明确的数据分析结论、越详细越好，不要生成多余的注释&#125;</span><br></pre></td></tr></table></figure><p>生成的内容：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">【【【【【</span><br><span class="line">&#123;</span><br><span class="line">​    title: &#123;</span><br><span class="line">​        text: &#x27;网站用户增长情况&#x27;,</span><br><span class="line">​        subtext: &#x27;&#x27;</span><br><span class="line">​    &#125;,</span><br><span class="line">​    tooltip: &#123;</span><br><span class="line">​        trigger: &#x27;axis&#x27;,</span><br><span class="line">​        axisPointer: &#123;</span><br><span class="line">​            type: &#x27;shadow&#x27;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;,</span><br><span class="line">​    legend: &#123;</span><br><span class="line">​        data: [&#x27;用户数&#x27;]</span><br><span class="line">​    &#125;,</span><br><span class="line">​    xAxis: &#123;</span><br><span class="line">​        data: [&#x27;1号&#x27;, &#x27;2号&#x27;, &#x27;3号&#x27;]</span><br><span class="line">​    &#125;,</span><br><span class="line">​    yAxis: &#123;&#125;,</span><br><span class="line">​    series: [&#123;</span><br><span class="line">​        name: &#x27;用户数&#x27;,</span><br><span class="line">​        type: &#x27;bar&#x27;,</span><br><span class="line">​        data: [10, 20, 30]</span><br><span class="line">​    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">【【【【【</span><br><span class="line">根据数据分析可得，该网站用户数量逐日增长，时间越长，用户数量增长越多。</span><br></pre></td></tr></table></figure><p>3）指定一个示例问答，one-shot 或者 few-shot</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230926170741.png" alt=""></p><h3 id="3种调用AI的方式"><a href="#3种调用AI的方式" class="headerlink" title="3种调用AI的方式"></a>3种调用AI的方式</h3><h4 id="1-直接调用官方接口"><a href="#1-直接调用官方接口" class="headerlink" title="1.直接调用官方接口"></a>1.直接调用官方接口</h4><p>比如OpenAI或者其他AI原始大模型官网的接口</p><p>官方文档：<a href="https://platform.openai.com/docs/api-reference">https://platform.openai.com/docs/api-reference</a></p><p>优点：不经封装，最灵活，最原始</p><p>缺点：要钱，要魔法</p><p>本质上 OpenAI 就是提供了 HTTP 接口，我们可以用任何语言去调用</p><p>1）在请求头中指定 OPENAI_API_KEY<br>Authorization: Bearer OPENAI_API_KEY<br>2）找到你要使用的接口，比如 AI 对话接口：<a href="https://platform.openai.com/docs/api-reference/chat/create">https://platform.openai.com/docs/api-reference/chat/create</a><br>3）按照接口文档的示例，构造 HTTP 请求，比如用 Hutool 工具类、或者 HTTPClient</p><p>具体示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> \* AI 对话（需要自己创建请求响应对象）</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> \* <span class="meta">@param</span> request</span><br><span class="line"></span><br><span class="line"> \* <span class="meta">@param</span> openAiApiKey</span><br><span class="line"></span><br><span class="line"> \* <span class="meta">@return</span></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> CreateChatCompletionResponse <span class="title function_">createChatCompletion</span><span class="params">(CreateChatCompletionRequest request, String openAiApiKey)</span> &#123;</span><br><span class="line">​    <span class="keyword">if</span> (StringUtils.isBlank(openAiApiKey)) &#123;</span><br><span class="line">​        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;未传 openAiApiKey&quot;</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.openai.com/v1/chat/completions&quot;</span>;</span><br><span class="line">​    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(request);</span><br><span class="line">​    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">​    .header(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span> + openAiApiKey)</span><br><span class="line">​    .body(json)</span><br><span class="line">​    .execute()</span><br><span class="line">​    .body();</span><br><span class="line">​    <span class="keyword">return</span> JSONUtil.toBean(result, CreateChatCompletionResponse.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用云服务器提供的封装接口"><a href="#2-使用云服务器提供的封装接口" class="headerlink" title="2.使用云服务器提供的封装接口"></a>2.使用云服务器提供的封装接口</h3><p>比如：Azure 云<br>优点：本地都能用<br>缺点：依然要钱，而且可能比直接调用原始的接口更贵</p><h4 id="3-鱼聪明AI开放平台"><a href="#3-鱼聪明AI开放平台" class="headerlink" title="3.鱼聪明AI开放平台"></a>3.鱼聪明AI开放平台</h4><p>鱼聪明 AI 提供了现成的 SDK 来让大家更方便地使用 AI 能力。<br>鱼聪明 AI 网站：<a href="https://yucongming.com/（也可以直接公众号搜索【鱼聪明AI】移动端使用）">https://yucongming.com/（也可以直接公众号搜索【鱼聪明AI】移动端使用）</a></p><p>优点：目前不要钱，而且有很多现成的模型（prompt 系统预设）给大家用<br>缺点：不完全灵活，但是可以定义自己的模型</p><p>使用流程：</p><p>参考 sdk 项目文档快速使用：<a href="https://github.com/liyupi/yucongming-java-sdk">https://github.com/liyupi/yucongming-java-sdk</a></p><h4 id="后端流程"><a href="#后端流程" class="headerlink" title="后端流程"></a>后端流程</h4><p>1.构造用户请求（用户消息、csv 数据、图表类型）</p><p>2调用鱼聪明 sdk，得到 AI 响应结果</p><p>3从 AI 响应结果中，取出需要的信息</p><p>4保存图表到数据库</p><h4 id="前端生成图表"><a href="#前端生成图表" class="headerlink" title="前端生成图表"></a>前端生成图表</h4><p>使用库：<a href="https://git.hust.cc/echarts-for-react/">https://git.hust.cc/echarts-for-react/</a></p><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><p>现在的网站足够安全么？</p><p>a 如果用户上传一个超大的文件怎么办？</p><p>b 如果用户用科技疯狂点击提交，怎么办？</p><p>c 如果 AI 的生成太慢（比如需要一分钟），又有很多用户要同时生成，给系统造成了压力，怎么兼</p><p>顾用户体验和系统的可用性？</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>如果用户上传一个超大文件怎么办？比如1000G？</p><h5 id="只要涉及到用户自主上传操作，一定要检验文件（图像）"><a href="#只要涉及到用户自主上传操作，一定要检验文件（图像）" class="headerlink" title="只要涉及到用户自主上传操作，一定要检验文件（图像）"></a>只要涉及到用户自主上传操作，一定要检验文件（图像）</h5><p>检验的维度：</p><p>​      文件的大小</p><p>​       文件的后缀</p><p>​       文件的内容（成本更高一点）</p><p>​        文件的合规性（比如敏感的内容，建议用第三方审核功能）</p><p>可以接入腾讯云的图片万象数据审核（COS对象存储审核功能）</p><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><p>现状：我们把每个图表的原始数据全部存放在了同一个数据表（chart 表）的字段里。</p><p>问题：</p><p>1如果用户上传的原始数据量很大、图表数日益增多，查询 Chart 表就会很慢。</p><p>2对于 BI 平台，用户是有查看原始数据、对原始数据进行简单查询的需求的。现在如果把所有数据</p><p>存放在一个字段（列）中，查询时，只能取出这个列的所有内容。</p><p>解决方案 =&gt; 分库分表：</p><p>把每个图表对应的原始数据单独保存为一个新的数据表，而不是都存在一个字段里。</p><p>优点：</p><p>1 存储时，能够分开存储，互不影响（也能增加安全性）</p><p>2 查询时，可以使用各种 sql 语句灵活取出需要的字段，查询性能更快</p><p>实现：</p><p>分开存储：</p><p> 1.存储图标信息时，不把数据存储为字段，而是新建一个chart_{图标id}的数据表。通过图表id，数据列名，数据类型等字段，生成SQL语句，并且执行即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> chart_1659210482555121666</span><br><span class="line">(</span><br><span class="line">​    日期  <span class="type">int</span> <span class="keyword">null</span>,</span><br><span class="line">​    用户数 <span class="type">int</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>分开查询：</p><p>1.以前的直接查询图标，取chartDATA字段，现在改为读取chart_{id}的数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> chart_&#123;<span class="number">1659210482555121666</span>&#125;</span><br></pre></td></tr></table></figure><p>具体实现：MyBatis的动态SQL（根据代码灵活的生成）</p><p>1.想清楚哪些是需要动态替换的，比如要查询的数据表名chart_{65565145545654155833}</p><p>2.在ChartMapper.xml中定义sql语句</p><p>以下这种最灵活，但是要小心SQL注入的风险：</p><p>比如：select * from chart_15222 where id=1 or 1=1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryChartData&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">​    $&#123;querySql&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 ChartMapper 中定义方法，方法名和上一步的 select 的 id 相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">queryChartData</span><span class="params">(String querySql)</span>;</span><br></pre></td></tr></table></figure><p>测试调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">chartId</span> <span class="operator">=</span> <span class="string">&quot;1659210482555121666&quot;</span>;</span><br><span class="line">​        <span class="type">String</span> <span class="variable">querySql</span> <span class="operator">=</span> String.format(<span class="string">&quot;select * from chart_%s&quot;</span>, chartId);</span><br><span class="line">​        List&lt;Map&lt;String, Object&gt;&gt; resultData = chartMapper.queryChartData(querySql);</span><br><span class="line">​        System.out.println(resultData);</span><br></pre></td></tr></table></figure><h5 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h5><p>水平分表</p><p>●垂直分库在大型互联网应用中，为了应对高并发、海量数据等挑战，往往需要对数据库进行拆分。</p><p>常见的拆分方式有水平分表和垂直分库两种。</p><p>水平分表（Sharding）</p><p>水平分表是将同一张表中的数据按一定的规则划分到不同的物理存储位置上，以达到分摊单张表的</p><p>数据及访问压力的目的。对于SQL分为两类：id-based分表和range-based分表。</p><p>水平分表的优点：</p><p>●单个表的数据量减少，查询效率提高；</p><p>●可以通过增加节点，提高系统的扩展性和容错性。</p><p>水平分表的缺点：</p><p>●事务并发处理复杂度增加，需要增加分布式事务的管理，性能和复杂度都有所牺牲；</p><p>●跨节点查询困难，需要设计跨节点的查询模块。</p><p>垂直分库（Vertical Partitioning）</p><p>垂直分库，指的是根据业务模块的不同，将不同的字段或表分到不同的数据库中。垂直分库基于数</p><p>据库内核支持，对应用透明，无需额外的开发代码，易于维护升级。</p><p>垂直分库的优点：</p><p>●减少单个数据库的数据量，提高系统的查询效率</p><p>●增加了系统的可扩展性，比水平分表更容易实现。</p><p>垂直分库的缺点：</p><p>●不同数据库之间的维护和同步成本较高；</p><p>●现有系统的改造存在一定的难度；</p><p>●系统的性能会受到数据库之间互相影响的影响。</p><p>需要根据实际的业务场景和技术架构情况，综合考虑各种因素来选择适合自己的分库分表策略。</p>]]></content>
      
      
      <categories>
          
          <category> 利用AI进行数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流算法分析</title>
      <link href="/2023/09/01/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/01/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="限流算法分析"><a href="#限流算法分析" class="headerlink" title="限流算法分析"></a>限流算法分析</h1><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>现在的问题：使用系统是需要消耗成本的，用户可能疯狂刷量，让你破产</p><p>解决问题：</p><p>   1.控制成本=》限制用户调用总次数</p><p>​    2.用户在短时间内疯狂使用，导致服务器资源被占满，让其他用户无法使用=》限流</p><h5 id="限流的几种算法"><a href="#限流的几种算法" class="headerlink" title="限流的几种算法"></a>限流的几种算法</h5><p>建议阅读文章：<a href="https://juejin.cn/post/6967742960540581918">https://juejin.cn/post/6967742960540581918</a></p><p>限流就是控制网络接口发送或请求的速率，它可以防止DoS攻击和限制Web爬虫</p><p>限流，也称流量控制，是指系统在面临高并发，或者大流量请求的情况下，限制新的请求对系统的访问，从而保证系统的稳定性，限流导致部分用户请求处理不及时或者被拒，这就影响用户体验，所以一般需要系统稳定和用户体验之间平衡以下</p><h4 id="常见的限流算法"><a href="#常见的限流算法" class="headerlink" title="常见的限流算法"></a>常见的限流算法</h4><h4 id="固定窗口限流算法"><a href="#固定窗口限流算法" class="headerlink" title="固定窗口限流算法"></a>固定窗口限流算法</h4><p>首先维护一个计数器，将单位时间段当做一个窗口，计数器记录这个窗口接收请求的次数。</p><ul><li>当次数少于限流阀值，就允许访问，并且计数器+1</li><li>当次数大于限流阀值，就拒绝访问。</li><li>当前的时间窗口过去之后，计数器清零。</li></ul><p>假设单位时间是1秒，限流阀值为3。在单位时间1秒内，每来一个请求,计数器就加1，如果计数器累加的次数超过限流阀值3，后续的请求全部拒绝。等到1s结束后，计数器清0，重新开始计数。如下图：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230926200557.png" alt=""></p><p>但是，这种算法有一个很明显的<strong>临界问题</strong>：假设限流阀值为5个请求，单位时间窗口是1s,如果我们在单位时间内的前0.8-1s和1-1.2s，分别并发5个请求。虽然都没有超过阀值，但是如果算0.8-1.2s,则并发数高达10，已经<strong>超过单位时间1s不超过5阀值</strong>的定义啦。</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230926200852.png" alt=""></p><h4 id="滑动窗口限流算法"><a href="#滑动窗口限流算法" class="headerlink" title="滑动窗口限流算法"></a>滑动窗口限流算法</h4><p>滑动窗口限流解决固定窗口临界值的问题。它将单位时间周期分为n个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期。</p><p>一张图解释滑动窗口算法，如下：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230926200940.png" alt=""></p><p>假设单位时间还是1s，滑动窗口算法把它划分为5个小周期，也就是滑动窗口（单位时间）被划分为</p><p>5个小格子。每格表示0.2s。每过0.2s，时间窗口就会往右滑动一格。然后呢，每个小周期，都有自</p><p>己独立的计数器，如果请求是0.83s到达的，0.8~1.0s对应的计数器就会加1。</p><p>我们来看下滑动窗口是如何解决临界问题的？</p><p>假设我们1s内的限流阀值还是5个请求，<code>0.8~1.0s</code>内（比如0.9s的时候）来了5个请求，落在黄色</p><p>格子里。时间过了1.0s这个点之后，又来5个请求，落在紫色格子里。如果<strong>是固定窗口算法，是不会</strong></p><p><strong>被限流的</strong>，但是<strong>滑动窗口的话，每过一个小周期，它会右移一个小格</strong>。过了1.0s这个点后，会</p><p>右移一小格，当前的单位时间段是0.2~1.2s，这个区域的请求已经超过限定的5了，已触发限流啦，</p><p>实际上，紫色格子的请求都被拒绝啦。</p><p><strong>TIPS:</strong> 当滑动窗口的格子周期划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确。</p><h5 id="滑动窗口算法虽然解决了固定窗口的临界问题，但是一旦到达限流后，请求都会直接暴力被拒绝。酱紫我们会损失一部分请求，这其实对于产品来说，并不太友好。"><a href="#滑动窗口算法虽然解决了固定窗口的临界问题，但是一旦到达限流后，请求都会直接暴力被拒绝。酱紫我们会损失一部分请求，这其实对于产品来说，并不太友好。" class="headerlink" title="滑动窗口算法虽然解决了固定窗口的临界问题，但是一旦到达限流后，请求都会直接暴力被拒绝。酱紫我们会损失一部分请求，这其实对于产品来说，并不太友好。"></a>滑动窗口算法虽然解决了<strong>固定窗口的临界问题</strong>，但是一旦到达限流后，请求都会直接暴力被拒绝。酱紫我们会损失一部分请求，这其实对于产品来说，并不太友好。</h5><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h4><p>漏桶算法面对限流，就更加的柔性，不存在直接的粗暴拒绝。</p><p>它的原理很简单，可以认为就是<strong>注水漏水</strong>的过程。往漏桶中以任意速率流入水，以固定的速率流出</p><p>水。当水超过桶的容量时，会被溢出，也就是被丢弃。因为桶容量是不变的，保证了整体的速率。</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230926201311.png" alt=""></p><ul><li>流入的水滴，可以看作是访问系统的请求，这个流入速率是不确定的。</li><li>桶的容量一般表示系统所能处理的请求数。</li><li>如果桶的容量满了，就达到限流的阀值，就会丢弃水滴（拒绝请求）</li><li>流出的水滴，是恒定过滤的，对应服务按照固定的速率处理请求。</li></ul><p>在正常流量的时候，系统按照固定的速率处理请求，是我们想要的。但是<strong>面对突发流量</strong>的时候，漏</p><p>桶算法还是循规蹈矩地处理请求，这就不是我们想看到的啦。流量变突发时，我们肯定<strong>希望系统尽</strong></p><p><strong>量快点处理请求</strong>，提升用户体验嘛。</p><h4 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h4><p>面对突发流量时，我们可以使用令牌桶算法限流。</p><h5 id="令牌桶算法原理："><a href="#令牌桶算法原理：" class="headerlink" title="令牌桶算法原理："></a>令牌桶算法原理：</h5><ul><li>有一个令牌管理员，根据限流大小，定速往令牌桶里放令牌。</li><li>如果令牌数量满了，超过令牌桶容量的限制，那就丢弃。</li><li>系统在接受到一个用户请求时，都会先去令牌桶要一个令牌。如果拿到令牌，那么就处理这个请求的业务逻辑；</li><li>如果拿不到令牌，就直接拒绝这个请求。</li></ul><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230926201656.png" alt=""></p><p>如果令牌发放的策略正确，这个系统即不会被拖垮，也能提高机器的利用率。Guava的RateLimiter</p><p>限流组件，就是基于<strong>令牌桶算法</strong>实现的。</p><h4 id="个人总结："><a href="#个人总结：" class="headerlink" title="个人总结："></a>个人总结：</h4><p>1.固定窗口限流</p><p>单位时间内允许部分操作</p><p>1个小时只允许10个用户操作</p><p>优点：最简单</p><p>缺点：可能出现流量突刺</p><p>比如：固定时间是一个小时，前59分钟没有一个操作，第59分钟来了10个操作，第一个小时01分钟又来了10个操作，相当于两分钟来了20个操作，服务器仍有高峰危险</p><p>2.滑动窗口限流</p><p>单位时间内允许部分操作，但是这个时间是滑动的，需要制定一个滑动单位</p><p>比如滑动单位1min</p><p>开始前</p><p>0s  1h  2h</p><p>一分钟后：</p><p>1min   1h1min</p><p>优点：能够解决上述流量突刺的问题，因为第59分钟时，限流窗口是59分-1小时59分钟，这个时间段内只能接受10个请求，只要还在这个窗口内，更多的操作就会被拒绝</p><p>缺点：实现相对复杂，限流效果和你的滑动单位有关，滑动单位越小，限流效果越好，但往往很难选到一个特别合适的滑动单位</p><p>3.漏桶算法（推荐）</p><p>以固定速率处理请求（漏水），当请求桶满了后，拒绝请求</p><p>每秒处理10个请求，桶的容量是10，每0.1秒固定处理一次请求，如果1秒内来了10个请求，桶的容量10，都可以处理完，但如果来了11个请求，最后那个请求就会溢出桶，被拒绝</p><p>优点：能够在一定程度上应对流量突刺，能够固定速率处理请求，保证服务器的安全</p><p>缺点：没有办法迅速处理请求，只能一个一个按顺序来处理（固定速率的特点）</p><p>4.令牌桶算法（推荐）</p><p>管理员先生成一批令牌，每秒生成10个令牌，当用户要操作前，先去拿到一个令牌，有令牌的人就有资格执行操作，能同时执行操作，拿不到令牌就等着</p><p>优点：能够并发处理同时的请求，并发性能会更高</p><p>需要考虑的问题。还是存在时间单位选取问题</p><h5 id="限流粒度"><a href="#限流粒度" class="headerlink" title="限流粒度"></a>限流粒度</h5><p>1.针对某个方法限流，单位时间最多允许同时xx个操作使用这个方法</p><p>2.针对某个用户限流，比如单个用户单位时间内最多允许xx个操作</p><p>3.针对某个用户x方法限流，比如单个用户单位时间内最多执行xx次这个方法</p><h5 id="限流的实现"><a href="#限流的实现" class="headerlink" title="限流的实现"></a>限流的实现</h5><p>1.本地限流（单机限流）</p><p>每个服务器单独限流，一般适用于单体项目，就是你的项目只有一个服务器</p><p>guava RateLimiter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">​    <span class="comment">// 每秒限流5个请求</span></span><br><span class="line">​    <span class="type">RateLimiter</span> <span class="variable">limiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">5.0</span>);</span><br><span class="line">​    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">​        <span class="keyword">if</span> (limiter.tryAcquire()) &#123;</span><br><span class="line">​            <span class="comment">// 处理请求</span></span><br><span class="line">​        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">​            <span class="comment">// 超过流量限制，需要做何处理</span></span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.分布式限流（多机限流）</p><p>如果你的项目有多个服务器，比如微服务，那么建议使用分布式限流</p><p>1.把用户的使用频率等数据放到一个集中的存储进行统计。比如Redis，这样无论用户请求落到那台服务器上，都以集中的数据存储的数据为主（Redisson-是一个caozuoRedis的工具库）</p><p>2.在网关集中进行限流和统计（比如Sentinel，Spring Cloud Gateway）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RSemaphore;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">​    <span class="comment">// 创建RedissonClient</span></span><br><span class="line">​    <span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create();</span><br><span class="line">​    <span class="comment">// 获取限流器</span></span><br><span class="line">​    <span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;mySemaphore&quot;</span>);</span><br><span class="line">​    <span class="comment">// 尝试获取许可证</span></span><br><span class="line">​    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> semaphore.tryAcquire();</span><br><span class="line">​    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">​        <span class="comment">// 处理请求</span></span><br><span class="line">​    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">​        <span class="comment">// 超过流量限制，需要做何处理</span></span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redisson限流实现"><a href="#Redisson限流实现" class="headerlink" title="Redisson限流实现"></a>Redisson限流实现</h4><p>Redisson内置一个限流工具类，可以帮助你利用Redis来存储，来统计</p><p>官方项目仓库和文档：<a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><p>步骤：</p><p>0.本店安装Redis</p><p>1.引入Redisson代码包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.21.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建RedissonConfig配置类，用于初始化RedissonClient对象单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line">​    <span class="keyword">private</span> Integer database;</span><br><span class="line">​    <span class="keyword">private</span> String host;</span><br><span class="line">​    <span class="keyword">private</span> Integer port;</span><br><span class="line">​    <span class="keyword">private</span> String password;</span><br><span class="line">​   </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">​    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">​        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">​        config.useSingleServer()</span><br><span class="line">​        .setDatabase(database)</span><br><span class="line">​        .setAddress(<span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">​        <span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">​        <span class="keyword">return</span> redisson;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写RedisLimiterManger：</p><p>什么是Manger？专门提供RedisLimier限流基础服务的（提供了通用的能力，可以放到任何一个项目中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* 专门提供 RedisLimiter 限流基础服务的（提供了通用的能力）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLimiterManager</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="meta">@Resource</span></span><br><span class="line">​    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     \* 限流操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     *</span></span><br><span class="line"><span class="comment">​     \* <span class="doctag">@param</span> key 区分不同的限流器，比如不同的用户 id 应该分别统计</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​     */</span></span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRateLimit</span><span class="params">(String key)</span> &#123;</span><br><span class="line">​        <span class="comment">// 创建一个名称为user_limiter的限流器，每秒最多访问 2 次</span></span><br><span class="line">​        <span class="type">RRateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> redissonClient.getRateLimiter(key);</span><br><span class="line">​        rateLimiter.trySetRate(RateType.OVERALL, <span class="number">2</span>, <span class="number">1</span>, RateIntervalUnit.SECONDS);</span><br><span class="line">​        <span class="comment">// 每当一个操作来了后，请求一个令牌</span></span><br><span class="line">​        <span class="type">boolean</span> <span class="variable">canOp</span> <span class="operator">=</span> rateLimiter.tryAcquire(<span class="number">1</span>);</span><br><span class="line">​        <span class="keyword">if</span> (!canOp) &#123;</span><br><span class="line">​            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.TOO_MANY_REQUEST);</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisLimiterManagerTest</span> &#123;</span><br><span class="line">​    <span class="meta">@Resource</span></span><br><span class="line">​    <span class="keyword">private</span> RedisLimiterManager redisLimiterManager;</span><br><span class="line">​    <span class="meta">@Test</span></span><br><span class="line">​    <span class="keyword">void</span> <span class="title function_">doRateLimit</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">​        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">​        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">​           redisLimiterManager.doRateLimit(userId);</span><br><span class="line">​            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">​        &#125;</span><br><span class="line">​        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">​        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">​            redisLimiterManager.doRateLimit(userId);</span><br><span class="line">​            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.应用到限流的方法中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line"><span class="comment">// 限流判断，每个用户一个限流器</span></span><br><span class="line">redisLimiterManager.doRateLimit(<span class="string">&quot;genChartByAi_&quot;</span> + loginUser.getId());</span><br><span class="line"><span class="comment">// 后续操作</span></span><br><span class="line">xxxxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 限流算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端优化</title>
      <link href="/2023/07/24/%E5%90%8E%E7%AB%AF%E4%BC%98%E5%8C%961/"/>
      <url>/2023/07/24/%E5%90%8E%E7%AB%AF%E4%BC%98%E5%8C%961/</url>
      
        <content type="html"><![CDATA[<h1 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h1><h2 id="封装全局异常处理器"><a href="#封装全局异常处理器" class="headerlink" title="封装全局异常处理器"></a>封装全局异常处理器</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li><p>定义异常类</p><p>​    a.相比于java异常类，支持更多的字段</p><p>​    b.自定义构造函数，更灵活快捷的设置字段</p></li></ol><p>​    2.编写全局异常处理器（利用Spring Aop,在调用方法前后进行额外的处理）</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1.捕获代码中的所有异常，内部消化，让前端得到更详细的业务报错信息</p><p>2.同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</p><p>3.集中处理，比如记录日志</p><h3 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h3><p>参考文章：<a href="https://blog.csdn.net/weixin_41701290/article/details/120173283">多环境设计_程序员鱼皮的博客-CSDN博客</a></p><p>本地开发： localhost（127.0.0.1）</p><p>多环境; 指同一套项目代码在不同的阶段需要根据实际情况来调整配置并且部署到不同的机器上</p><p>为什么需要？</p><p>1.每个环境互不影响</p><p>2.区分不同的阶段</p><p>3.对项目进行优化：</p><p>​       a.本地日志级别</p><p>​       b.精简依赖，节省项目体积</p><p>​       c.项目的环境/参数可以调整，比如JVM参数</p><p>针对不同的环境做不同的事</p><p>多环境的分类：</p><p>1.本地开发环境（自己的电脑）loclhost</p><p>2.开发环境（远程开发）大家连同一机器，为了大家开发方便</p><p>3.测试环境（测试）开发/测试/产品，单元测试/性能测试/功能测试/系统集成测试，独立的数据库，独立的服务器</p><p>4.预发布环境（体验服）：和正式环境一直，正式的数据库。更严谨，查出更多问题</p><p>5.正式环境（线上，公开对外访问的项目）：尽量不改动，保证上线前的代码是完美运行</p><p>6.沙箱环境（实验环境）：为了做实验</p><h3 id="后端多环境实战"><a href="#后端多环境实战" class="headerlink" title="后端多环境实战"></a>后端多环境实战</h3><p>springboot项目中，通过applixation.yml添加不同的后缀来区分配置文件</p><p>可以在启动项目时传入环境变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\user-center-backend-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --spring.profiles.active=</span><br></pre></td></tr></table></figure><p>主要改动是：</p><p>   依赖的环境地址</p><p>​        数据库地址</p><p>​        缓存地址</p><p>​        消息队列地址</p><p>​       项目端口号</p><p>   服务器配置</p><h3 id="解析JSON字符串"><a href="#解析JSON字符串" class="headerlink" title="解析JSON字符串"></a>解析JSON字符串</h3><p>序列化:java对象转成json</p><p>反序列化：把json转为java对象</p><p>java json序列化库有很多：</p><p>​    1.gson（google的，推荐）</p><p>​     2.fastjson alibaba（阿里巴巴，快，但是漏洞太多）</p><p>​    3.jackson</p><p>​    4.kryo（性能极高的序列化库）</p><h3 id="后端整合Swagger-knife4j接口文档"><a href="#后端整合Swagger-knife4j接口文档" class="headerlink" title="后端整合Swagger+knife4j接口文档"></a>后端整合Swagger+knife4j接口文档</h3><h5 id="什么是接口文档？写接口信息的文档"><a href="#什么是接口文档？写接口信息的文档" class="headerlink" title="什么是接口文档？写接口信息的文档"></a>什么是接口文档？写接口信息的文档</h5><p>每个接口的信息包括：</p><p>​       请求参数</p><p>​       响应参数</p><p>​          错误码</p><p>​      接口地址</p><p>​      接口名称</p><p>​      请求类型</p><p>​      请求格式</p><p>​      备注</p><h5 id="谁可以用接口文档？"><a href="#谁可以用接口文档？" class="headerlink" title="谁可以用接口文档？"></a>谁可以用接口文档？</h5><p>答：一般的后端或者负责人来提供，后端前端都要使用。</p><h5 id="为什么需要接口文档？？"><a href="#为什么需要接口文档？？" class="headerlink" title="为什么需要接口文档？？"></a>为什么需要接口文档？？</h5><p>​     书面内容，便于大家参考和查阅，便于沉淀和维护，拒绝口口相传</p><p>​      接口文档便于前端和后端开发对接，前后端联调的介质。后端=》接口文档《=前端</p><p>​      好的接口文档支持在线调试，在线测试，可以作为工具提高我们的开发测试效率</p><h5 id="怎么做接口文档？"><a href="#怎么做接口文档？" class="headerlink" title="怎么做接口文档？"></a>怎么做接口文档？</h5><p>   手写：比如腾讯文档，Markdown笔记</p><p>   自动化接口文档生成完整文档或在线调试的网页</p><p>   swagger，postman（侧重中接口管理）（国外）；apifox，apipost，eolink（国产）</p><h3 id="使用swagger"><a href="#使用swagger" class="headerlink" title="使用swagger"></a>使用swagger</h3><p>1.引入依赖（Swagger或Knife4J）：<a href="https://doc.xiaominfo.com/knife4j/documentation/get_start.html）">https://doc.xiaominfo.com/knife4j/documentation/get_start.html）</a></p><p>2.自定义Swagger配置类Aoli</p><p>3.定义需要生成接口文档的代码位置（Controller）</p><p>4.线上环境不要把接口暴露出去！！可以通过swaggerconfig配置文件开头加上@Profile（{“dev”，“test”}）限定配置仅在部分环境开启</p><p>5.启动即可</p><p>6.可以通过controller方法添加@Api，@AplimplicitParam(name=”name”,value=”姓名”，required=true) @ApiOperation(value=”向客人问好”)等注解来定义生成的接口描述信息</p><p>如果springboot version &gt;=2.6,需要如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">  pathmatch:</span><br><span class="line">​      matching-strategy: ANT_PATH_MATCHER</span><br></pre></td></tr></table></figure><h2 id="Session共享"><a href="#Session共享" class="headerlink" title="Session共享"></a>Session共享</h2><h4 id="cookie范围"><a href="#cookie范围" class="headerlink" title="cookie范围"></a>cookie范围</h4><p>种session的时候注意范围，springboot项目可以通过cookie.domain来配置</p><h4 id="为什么需要共享？"><a href="#为什么需要共享？" class="headerlink" title="为什么需要共享？"></a>为什么需要共享？</h4><p>为什么服务器A登录之后，请求发到服务器B，不认识该用户？</p><p>  原因如下：</p><p>​     1.用户A登录，所以session（用户登录信息）存在了A上</p><p>​     2.结果请求B时，B没有用户信息，所以不认识</p><p>如图：</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230921134818.png" alt=""></p><h5 id="解决方法：共享储存，而不是把数据放到单台服务器的内存中"><a href="#解决方法：共享储存，而不是把数据放到单台服务器的内存中" class="headerlink" title="解决方法：共享储存，而不是把数据放到单台服务器的内存中"></a>解决方法：共享储存，而不是把数据放到单台服务器的内存中</h5><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230921135226.png" alt=""></p><h3 id="如何共享存储？？"><a href="#如何共享存储？？" class="headerlink" title="如何共享存储？？"></a>如何共享存储？？</h3><p>核心思想：把数据放到同一个地方集中管理</p><p>​       1.Redis（基于内存的K/V数据库），这里选择Redis,因为用户读取/是否登录的判断极其频繁，Redis基于内存，读写性能很高。</p><p>​        2.MySQL</p><p>​         3.文件服务器ceph</p><h3 id="Session共享实现"><a href="#Session共享实现" class="headerlink" title="Session共享实现"></a>Session共享实现</h3><p>  1.安装Redis</p><p>   官网：<a href="https://redis.io/">https://redis.io/</a></p><p>Redis管理工具quick redis：<a href="https://quick123.net/">https://quick123.net/</a></p><p>​    2.引入Redis，能够操作Redis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​     3.引入spring-session和Redis的整合，使得自动将session存储到redis中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​      4.修改spring-session存储配置 spring session.store-type</p><p>​          默认为none，表示存储到单台服务器上</p><p>​        store type redis，表示从redis读写session</p><h3 id="其他单点登录方案"><a href="#其他单点登录方案" class="headerlink" title="其他单点登录方案"></a>其他单点登录方案</h3><p>JWT对比Redis session的优缺点：<a href="https://zhuanlan.zhihu.com/p/108999941">https://zhuanlan.zhihu.com/p/108999941</a></p><h3 id="数据查询慢怎么办？"><a href="#数据查询慢怎么办？" class="headerlink" title="数据查询慢怎么办？"></a>数据查询慢怎么办？</h3><p>用缓存：提前你把数据取出来保存好（通常保存到读写更快的介质，比如内存），就不用再查数据库了，可以更快的读写</p><p>用定时任务： 预加载缓存，定时更新缓存</p><h2 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a>缓存分类</h2><p>分布式缓存：</p><p>​      Redis（分布式缓存）</p><p>​       memcached（分布式）</p><p>​       Etcd（云原生架构的一个分布式储存，储存配置，扩容能力）</p><p>单机缓存：</p><p>   ehcache</p><p>   java内存集合，如HashMap</p><p>   Caffeine（java内存缓存性能之王，高性能）</p><p>   Google Guava</p><h3 id="Redis缓存实现"><a href="#Redis缓存实现" class="headerlink" title="Redis缓存实现"></a>Redis缓存实现</h3><p>NoSQL数据库，key-value存储系统（区别于MySQL，他存储的是键值对）</p><h3 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h3><p> 基本：</p><p>​        String字符串类型：name“hauzi”</p><p>​         List列表：name：[“hauzi”,”hahaha”,”lalalalla”]</p><p>​         Set集合：name：<a href="值不能重复">“hauzi”,”hahahha”</a></p><p>​         Hash哈希：nameAge{“huazi”:1,”hahahha”:2}</p><p>​         Zset集合： names：{hauzi -1，hahaha-2}（适合做排行榜）</p><p>  高级：</p><p>​       bloomfilter（布隆过滤器，主要从大量的数据快速过滤值，比如邮件黑名单拦截）</p><p>​       geo（计算地理位置）</p><p>​       hyperloglog（pv/uv）</p><p>​        pub/sub（发布订阅，类似消息队列）</p><p>​        BitMap（1000010101010100000010101）</p><h3 id="自定义序列化（把java对象转换为json格式）"><a href="#自定义序列化（把java对象转换为json格式）" class="headerlink" title="自定义序列化（把java对象转换为json格式）"></a>自定义序列化（把java对象转换为json格式）</h3><p>为了防止写入Redis的数据乱码，浪费空间等，可以自定义序列化器，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.yupao.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfig</span> &#123;</span><br><span class="line">​    <span class="meta">@Bean</span></span><br><span class="line">​    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">​        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">​        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">​        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">​        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java操作Redis"><a href="#java操作Redis" class="headerlink" title="java操作Redis"></a>java操作Redis</h3><p>Spring Data Redis（推荐）</p><p>地址：spring-data-redis</p><p>Spring Data：通用数据访问框架，定义一组增删改查的接口</p><p>还可以操作：MySQL，Redis，jpa</p><p>1.引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置Redis地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="string">\#</span> <span class="string">redis</span> <span class="string">配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line"><span class="string">​</span>    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="string">​</span>    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="string">​</span>    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h5><p>独立于Spring操作的Redis的java客户端</p><p>要配合Jedis Pool使用</p><h5 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h5><p>高阶的操作Redis的java客户端</p><p>一异步，连接池</p><h5 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h5><p>分布式操作Redis的java客户端，让你像在本地一样一样操作Redis（分布式Redis数据网络）</p><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><h5 id="几种库对比"><a href="#几种库对比" class="headerlink" title="几种库对比"></a>几种库对比</h5><p>1.如果你用的是 Spring，并且没有过多的定制化要求，可以用 Spring Data Redis，最方便</p><p>2.如果你用的不是 Spring，并且追求简单，并且没有过高的性能要求，可以用 Jedis + Jedis Pool</p><p>3.如果你的项目不是 Spring，并且追求高性能、高定制化，可以用 Lettuce，支持异步、连接池</p><p>4.如果你的项目是分布式的，需要用到一些分布式的特性（比如分布式锁、分布式集合），推荐用 redisson</p><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><p>问题：即使用了缓存，第一个用户访问还是很慢（加入第一个访问的是老板）</p><p>  缓存预热的优点：</p><p>​          1.解决上面的问题，可以让用户始终访问很快</p><p>​           2.也能在一定程度上保护数据库</p><p>  缺点：</p><p>​    1.增加开发成本（你要额外开发设计）</p><p>​      2.预热的时机和时间如果错了，有可能你缓存的数据不对或者太晚</p><p>​    3.需要占用额外的时间</p><h4 id="怎么缓存热点？"><a href="#怎么缓存热点？" class="headerlink" title="怎么缓存热点？"></a>怎么缓存热点？</h4><p>1.定时任务</p><p>2.手动触发</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>用定时任务，每天刷新所有用户的推荐列表</p><p>注意点：</p><p>​       1.缓存预热的意义（新增多，总用户多）</p><p>​       2.缓存的空间不能太大，要预留给其他缓存空间</p><p>​      3.缓存数据的周期（每天一次）</p><h3 id="定时任务的实现"><a href="#定时任务的实现" class="headerlink" title="定时任务的实现"></a>定时任务的实现</h3><p>1.Spring Scheduler（spring boot默认整合，推荐使用）</p><p>2.Quartz（独立于Spring存在的定时任务框架）</p><p>3.XXL-job之类的分布式任务调度平台（界面+SDK）</p><p>主要使用第一种方式：</p><p>​       1.主类开启@EnableScheduling</p><p>​       2.给要定时的方法添加@Scheduling注解，指定cron表达式或者执行频率</p><p> cron表达式，利用现成工具</p><p><a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p><p><a href="https://www.matools.com/crontab/">https://www.matools.com/crontab/</a></p><h2 id="控制定时任务的执行"><a href="#控制定时任务的执行" class="headerlink" title="控制定时任务的执行"></a>控制定时任务的执行</h2><p>要控制同一时间只有一台服务器能执行</p><p>原因：</p><p>​     1.浪费资源，想象10000台服务器同时启动</p><p>​      2.脏数据，比如重复插入</p><p>如何避免？几种方案</p><p>   1.分离定时任务程序和主程序，只在一个服务器运行定时任务，成本太大</p><p>​    2.写死配置，每个服务器都执行定时任务，但是只有ip符合配置的服务器才真实执行业务逻辑，气态的直接返回。成本最低，但是我们的ip可能是不固定的，把ip写的太死</p><p>​    3.动态配置，配置可以轻松的，很方便的更新的（代码无需重启），但是只有ip符合配置的服务器才真实执行业务逻辑。</p><p>​         数据库</p><p>​         Redis</p><p>​         配置中心（Nacos，APollo，Spring CloudConfig）</p><p>问题：服务器多了，IP不可控还是很麻烦的，还是需要人工修改</p><p>4.分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都可以</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="为啥需要分布式锁？"><a href="#为啥需要分布式锁？" class="headerlink" title="为啥需要分布式锁？"></a>为啥需要分布式锁？</h4><p> 1.有限的资源情况下，控制同一时间只有某些线程（用户/服务器）能访问到资源。</p><p>2.单个锁对单个JVM有效</p><h3 id="分布式锁的关键"><a href="#分布式锁的关键" class="headerlink" title="分布式锁的关键"></a>分布式锁的关键</h3><h5 id="抢锁机制"><a href="#抢锁机制" class="headerlink" title="抢锁机制"></a>抢锁机制</h5><p>怎么保证同一时间只有一台服务器能抢到锁？</p><h5 id="核心思想："><a href="#核心思想：" class="headerlink" title="核心思想："></a>核心思想：</h5><p>  先来的人先把数据改成自己的标识（服务器ip），后来的人发现标识已存在，就抢锁失败，继续等待</p><p>等先来的人执行方法结束，把标识清空，其他的人继续抢锁</p><p>MySQL数据库：select for update 行级锁（最简单），或者乐观锁。</p><p>Redis实现：内存数据库，读写速度快。支持setnx，lua脚本，比较方便我们实现分布式锁</p><p>setnx：set if not exists如果不存在，则设置；只有设置成功才会返回true，否则返回false</p><h5 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h5><p>1.用完锁一定要释放</p><p>2.锁一定要加过期时间</p><p>3.如果方法执行时间过长，锁提前过期了？</p><p>   会导致问题：</p><p>​             1.连锁效应，释放别人的锁</p><p>​              2.这样还是会存在多个方法同时执行的情况</p><p>解决方案：续期</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">end</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">​    <span class="keyword">if</span> (!end)&#125;&#123;</span><br><span class="line">​    续期</span><br><span class="line">&#125;)</span><br><span class="line">end = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>4.释放锁的时候，有可能先判断出是自己的锁，但是锁过期了，最后还是释放别人的锁</p><p>解决方案：Redis+lua脚本保证操作原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 原子操作</span></span><br><span class="line"><span class="keyword">if</span>(get lock == A) &#123;</span><br><span class="line">​    <span class="comment">// set lock B</span></span><br><span class="line">​    del lock</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.Rdeis如果是集群（而不是只有一个Redis），如果是分布式锁的数据不同步怎么办？</p><p>解决方案：<a href="https://blog.csdn.net/feiying0canglang/article/details/113258494">https://blog.csdn.net/feiying0canglang/article/details/113258494</a></p><h3 id="Redisson实现分布式锁"><a href="#Redisson实现分布式锁" class="headerlink" title="Redisson实现分布式锁"></a>Redisson实现分布式锁</h3><p>Redisson是一个java操作Redis的客户端，提供了大量分布式数据来简化对Redis的操作和使用，可以让开发者像使用本地集合一样使用Redis，完全感知不到Redis的存在。</p><h5 id="2中引入方式"><a href="#2中引入方式" class="headerlink" title="2中引入方式"></a>2中引入方式</h5><p> 1.spring boot starter 引入（不推荐，版本迭代太快，容易冲突）<a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></p><p>2.直接引入：<a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></p><h5 id="使用Redisson"><a href="#使用Redisson" class="headerlink" title="使用Redisson"></a>使用Redisson</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例代码如下，创建分布式列表：</span><br><span class="line"><span class="comment">// list，数据存在本地 JVM 内存中</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list:&quot;</span> + list.get(<span class="number">0</span>));</span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据存在 redis 的内存中</span></span><br><span class="line">RList&lt;String&gt; rList = redissonClient.getList(<span class="string">&quot;test-list&quot;</span>);</span><br><span class="line">rList.add(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;rlist:&quot;</span> + rList.get(<span class="number">0</span>));</span><br><span class="line">rList.remove(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h5 id="分布式锁保证定时任务不重复执行"><a href="#分布式锁保证定时任务不重复执行" class="headerlink" title="分布式锁保证定时任务不重复执行"></a>分布式锁保证定时任务不重复执行</h5><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testWatchDog</span><span class="params">()</span> &#123;</span><br><span class="line">​    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;yupao:precachejob:docache:lock&quot;</span>);</span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line">​        <span class="comment">// 只有一个线程能获取到锁</span></span><br><span class="line">​        <span class="keyword">if</span> (lock.tryLock(<span class="number">0</span>, -<span class="number">1</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">​            <span class="comment">// todo 实际要执行的方法</span></span><br><span class="line">​            doSomeThings();</span><br><span class="line">​            System.out.println(<span class="string">&quot;getLock: &quot;</span> + Thread.currentThread().getId());</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">​        System.out.println(e.getMessage());</span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">​        <span class="comment">// 只能释放自己的锁</span></span><br><span class="line">​        <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">​            System.out.println(<span class="string">&quot;unLock: &quot;</span> + Thread.currentThread().getId());</span><br><span class="line">​            lock.unlock();</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>​    1.waitTime设置为0，只抢一次，抢不到就放弃</p><p>​      2.注意锁释放要写在finally中</p><h5 id="Redisson看门狗机制"><a href="#Redisson看门狗机制" class="headerlink" title="Redisson看门狗机制"></a>Redisson看门狗机制</h5><p>开启一个监听线程，如果方法还没执行完，就帮重置redis锁的过期时间</p><p>原理：</p><p>​         1.监听当前线程，默认过期时间是30秒，没10秒续期一次（补到30秒）</p><p>​          2.如果线程挂掉（注意debug模式也会被它当成服务器宕机），则不会续期</p><h5 id="两种算法"><a href="#两种算法" class="headerlink" title="两种算法"></a>两种算法</h5><p>编辑距离算法：<a href="https://blog.csdn.net/DBC_121/article/details/104198838">https://blog.csdn.net/DBC_121/article/details/104198838</a></p><p>（其实就是字符串经历多少次转换到达另一个字符串）</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word2.length();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(n * m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> n + m;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        d[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">            d[<span class="number">0</span>][j] = j;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> d[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> d[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left_down</span> <span class="operator">=</span> d[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) != word2.charAt(j - <span class="number">1</span>))</span><br><span class="line">                left_down += <span class="number">1</span>;</span><br><span class="line">            d[i][j] = Math.min(left, Math.min(down, left_down));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>余弦相似度算法：<a href="https://blog.csdn.net/m0_55613022/article/details/125683937（如果需要带权重计算，比如学什么方向最重要，性别相对次要）">https://blog.csdn.net/m0_55613022/article/details/125683937（如果需要带权重计算，比如学什么方向最重要，性别相对次要）</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/07/24/RabbitMq/"/>
      <url>/2023/07/24/RabbitMq/</url>
      
        <content type="html"><![CDATA[<h1 id="MQ-架构设计原理"><a href="#MQ-架构设计原理" class="headerlink" title="MQ 架构设计原理"></a>MQ 架构设计原理</h1><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>存储消息的队列。<br>关键词：存储、队列、队列<br>存储:存储数据<br>消息：某种数据结构，比如字符串、对象、二进制数据、json 等等<br>队列：先进先出的数据结构</p><p>应用场景：在多个不同的系统、应用之间实现消息的传输，不需要考虑传输应用的编程语言、系统、框架等等。</p><p>具体实例：异步发送短信、异步发送优惠卷、处理比较耗时的操作</p><p>可以让 java 开发的应用发消息，让 php 开发的应用收消息，这样就不用把所有的代码写到一个项目中（应用解耦）。</p><h2 id="消息队列的模型"><a href="#消息队列的模型" class="headerlink" title="消息队列的模型"></a>消息队列的模型</h2><p>生产者：Producer，类比为快递员，发送消息的人（客户端）<br>消费者：Consumer，类比为取快递的人，接受读取消息的人（客户端）<br>消息：Message，类比为快递，就是生产者要传输给消费者的数据<br>消息队列：Queue</p><p>为什么不接传输，要用消息队列？生产者不用关心你的消费者要不要消费、什么时候消费，我只需要把东西给消息队列，我的工作就算完成了。<br>生产者和消费者实现了解耦，互不影响。</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/211I61aL8.jpg" alt="测试照片"></p><h2 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h2><ul><li>1）异步处理<br>生产者发送完消息可以去忙别的事情，消费者想什么时候去取都可以，不会阻塞</li><li>2）削峰填谷<br>先把用户请求放到消息队列中，消费者可以按照自己的需求慢慢去取<br>原本：12 点来了十万个请求，原本情况下，十万个请求都在系统内部处理，很快系统压力过大就好宕机<br>现在：把十万个请求放到消息队列中，处理系统可以以自己恒定的速率慢慢执行，保护系统、稳定处理</li><li>3）可持久性、可靠性<br>大多数消息队列系统提供持久化功能，确保即使在系统故障或重启后，消息不会丢失。这可以提高系统的可靠性，并确保消息的可靠传递。</li><li>4）可拓展性、灵活性<br>通过使用消息队列，可以轻松地添加新的组件或服务，而无需更改现有的系统架构。新的组件可以订阅感兴趣的消息，从而扩展系统的功能和业务流程。</li></ul><h2 id="分布式消息队列的优势"><a href="#分布式消息队列的优势" class="headerlink" title="分布式消息队列的优势"></a>分布式消息队列的优势</h2><p>1）数据持久化:可以把消息持久化到硬盘，服务器重启不会丢失数据<br>2）可扩展性：可以根据需求，随时增减节点，继续保持稳定的服务<br>3）应用解耦：可以连接各个不同的语言、框架开发的系统，让这些系统能够灵活传输读取数据</p><p>应用解耦的优点：</p><p>以前，把功能放到一个项目中，调用多个子功能时，要给环节出错，系统就整体出错<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920054171-7eb680e2-25da-4f1a-ac41-e576a332e534.png#averageHue=%23fefdfd&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=270&amp;id=u423efd77&amp;originHeight=338&amp;originWidth=924&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=17788&amp;status=done&amp;style=none&amp;taskId=uc6cc6d6f-10d0-4047-ad7c-48d86de67a7&amp;title=&amp;width=739.2" alt="2~F3M8$}8CT@H7VFWZ85NTU.png"></p><p>使用消息队列进行解耦：</p><ol><li>一个系统挂了，不影响另外的系统</li><li>系统挂了并恢复后，仍然可以取出消息，继续执行业务逻辑</li><li>只要发送消息到消息队列，就可以立即返回，不用同步调用所有的系统。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920168751-0ea0b35d-2dfe-4a33-9aa4-8cfdaa8cb5f0.png#averageHue=%23fdfdfc&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=326&amp;id=u1cbde273&amp;originHeight=407&amp;originWidth=914&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=28414&amp;status=done&amp;style=none&amp;taskId=ue3ab7742-2791-482c-9c93-3d6ee1af88a&amp;title=&amp;width=731.2" alt="CCDJO%40}E7191ZEDV5_3%9.png"><br>4）发布订阅<br>如果一个非常大的系统要给其他子系统发送通知，最简单直接的方式是大系统依次调用小系统<br>问题:</p><ol><li>每次发通知都要调用很多系统、很麻烦、很可能失败</li><li>新出现的项目（或者说大项目感知不到的项目）无法得到通知</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920548775-de4493f7-2ffe-4ee4-a977-a1e96b881002.png#averageHue=%23fefdfd&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=574&amp;id=ua58bdae9&amp;originHeight=717&amp;originWidth=931&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=42693&amp;status=done&amp;style=none&amp;taskId=u1a1a6f91-fb5a-445b-8eb2-ee471e0d3f1&amp;title=&amp;width=744.8" alt="ICBFGE74T~PTR3P]F@}XW5C.png"><br>解决方案：大的核心系统始终往一个地方发送消息，其它系统都去订阅这个消息队列（读取队列中的消息）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920680994-9455d00a-fe1c-4b6c-a41b-7abe3df913ad.png#averageHue=%23fdfdfd&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=518&amp;id=ua45c28c1&amp;originHeight=647&amp;originWidth=815&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=39740&amp;status=done&amp;style=none&amp;taskId=ua11d7701-598c-4023-a44b-b7ea888bfaa&amp;title=&amp;width=652" alt="GM`9OT`H]T{$M%V}87(A(NO.png"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>耗时的场景（异步）</li><li>高并发场景（异步、削峰填谷）</li><li>分布式系统协作（跨团队、跨业务、应用解耦）</li></ol><p>比如 QQ 是一个系统，用 c++写的，微信用** <strong>java 写的</strong> **，qq 的消息可以通过消息队列传送给微信</p><ol><li>强稳定性的场景（金融业务、持久化、可靠性、削峰填谷）</li></ol><p>支付、转账</p><h2 id="消息队列的缺点"><a href="#消息队列的缺点" class="headerlink" title="消息队列的缺点"></a>消息队列的缺点</h2><p>要给系统引入额外的中间件，系统会更复杂、额外维护中间件、额外的费用（部署）成本<br>消息队列：消息丢失、顺序性、重复消费、数据的一致性（分布式系统就要考虑）</p><blockquote><p>也可以叫分布式场景下需要考虑的问题)</p></blockquote><h2 id="传统的-http-请求存在那些缺点"><a href="#传统的-http-请求存在那些缺点" class="headerlink" title="传统的 http 请求存在那些缺点"></a>传统的 http 请求存在那些缺点</h2><p>1.Http 请求基于请求与响应的模型，在高并发的情况下，客户端发送大量的请求达到<br>服务器端有可能会导致我们服务器端处理请求堆积。<br>2.Tomcat 服务器处理每个请求都有自己独立的线程，如果超过最大线程数会将该请求缓存到队列中，如果请求堆积过多的情况下，有可能会导致 tomcat 服务器崩溃的问题。<br>所以一般都会在 nginx 入口实现限流，整合服务保护框架。</p><ol><li>http请求处理业务逻辑如果比较耗时的情况下，容易造成客户端一直等待，阻塞等待<br>过程中会导致客户端超时发生重试策略，有可能会引发幂等性问题。</li></ol><p>注意事项：接口是为 http 协议的情况下，最好不要处理比较耗时的业务逻辑，耗时的业务逻辑应该单独交给多线程或者是 mq 处理。</p><h3 id="同步发送-http-请求"><a href="#同步发送-http-请求" class="headerlink" title="同步发送 http 请求"></a>同步发送 http 请求</h3><p>客户端发送请求到达服务器端，服务器端实现会员注册业务逻辑，<br>1.insertMember() —插入会员数据 1s<br>2.sendSms()——发送登陆短信提醒 3s<br>3.sendCoupons()——发送新人优惠券 3s<br>总共响应需要 6s 时间，可能会导致客户端阻塞 6s 时间，对用户体验<br>不是很好。</p><p>多线程与 MQ 方式实现异步？</p><p>互联网项目:<br>客户端安卓/IOS</p><p>服务器端：php/java<br>最好使用 mq 实现异步</p><h3 id="多线程处理业务逻辑"><a href="#多线程处理业务逻辑" class="headerlink" title="多线程处理业务逻辑"></a>多线程处理业务逻辑</h3><p>用户向数据库中插入一条数据之后，在单独开启一个线程异步发送短信和优惠操作。<br>客户端只需要等待 1s 时间<br>优点：适合于小项目实现异步<br>缺点：有可能会消耗服务器 cpu 资源资源</p><h3 id="Mq-处理业务逻辑"><a href="#Mq-处理业务逻辑" class="headerlink" title="Mq 处理业务逻辑"></a>Mq 处理业务逻辑</h3><p>先向数据库中插入一条会员数据，让后再向 MQ 中投递一个消息，MQ 服务器端在将消息推送给消费者异步解耦处理发送短信和优惠券。</p><h2 id="Mq-与多线程之间区别"><a href="#Mq-与多线程之间区别" class="headerlink" title="Mq 与多线程之间区别"></a>Mq 与多线程之间区别</h2><p>多线程也可以实现异步，但是消耗到 cpu 资源，没有实现解耦。<br>多线程异步去实现发送短信以及领取优惠卷会导致过度消耗 cpu 资源，cpu 上下文竞争关系，可能导致会员服务以及其他服务降低，因此多线程适合于小项目；而 MQ 可以实现异步/解耦/流量削峰问题，因此适合于大型项目。</p><h2 id="Mq-消息中间件名词"><a href="#Mq-消息中间件名词" class="headerlink" title="Mq 消息中间件名词"></a>Mq 消息中间件名词</h2><p>Producer 生产者：投递消息到 MQ 服务器端；<br>Consumer 消费者：从 MQ 服务器端获取消息处理业务逻辑；<br>Broker MQ 服务器端<br>Topic 主题：分类业务逻辑发送短信主题、发送优惠券主题<br>Queue 存放消息模型队列先进先出后进后出原则数组/链表<br>Message 生产者投递消息报文：json</p><h2 id="主流-mq-区别对比"><a href="#主流-mq-区别对比" class="headerlink" title="主流 mq 区别对比"></a>主流 mq 区别对比</h2><p><strong>技术对比</strong><br>技术选型指标：<br>● 吞吐量：IO、并发<br>● 时效性：类似延迟，消息的发送、到达时间<br>● 可用性：系统可用的比率（比如 1 年 365 天宕机 1s，可用率大概 X 个 9）<br>● 可靠性：消息不丢失（比如不丢失订单）、功能正常完成</p><div class="table-container"><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10 万级</td><td>10 万级</td></tr><tr><td>时效性</td><td>ms 级</td><td>us 级</td><td>ms 级</td><td>ms 级以内</td></tr><tr><td>可用性</td><td>高（主从架构）</td><td>高（主从架构）</td><td>非常高（分布式架构）</td><td>非常高（分布式架构）</td></tr><tr><td>功能特性</td><td>成熟的产品，在很多公司得到应用；有较多的文档；各种协议支持较好</td><td>基于 erlang 开发，所以并发能力很强，性能极其好，延时很低管理界面较丰富</td><td>MQ 功能比较完备，扩展性佳</td><td>只支持主要的 MQ 功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广。</td></tr><tr><td>应用场景</td><td>中小型企业、项目</td><td>适合绝大多数分布式的应用，这也是先学他的原因</td><td>适用于 <strong>大规模</strong>处理数据的场景，比如构建日志收集系统、实时数据流传输、事件流收集传输</td><td>适用于 <strong>金融 </strong>、电商等对可靠性要求较高的场景，适合 <strong>大规模 </strong>的消息处理。</td></tr></tbody></table></div><h2 id="RabbitMQ-入门实战"><a href="#RabbitMQ-入门实战" class="headerlink" title="RabbitMQ 入门实战"></a>RabbitMQ 入门实战</h2><p>特点：生态好，好学习、易于理解，时效性强，支持很多不同语言的客户端，扩展性、可用性都很不错。<br>学习性价比非常高的消息队列，适用于绝大多数中小规模分布式系统。</p><p>官方网站：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>AMQP 协议：<a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html">https://www.rabbitmq.com/tutorials/amqp-concepts.html</a><br>AMQP 是一种消息传递协议，让符合要求的客户端应用程序能够与符合要求的消息中间件进行通信<br>高级消息队列协议（Advanced Message Queue Protocol）</p><p>生产者：发消息到某个交换机<br>消费者：从某个队列中取消息<br>交换机（Exchange）：负责把消息 转发 到对应的队列<br>队列（Queue）：存储消息的<br>路由（Routes）：转发，就是怎么把消息从一个地方转到另一个地方（比如从生产者转发到某个队列）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686835103366-bdb220cd-b177-4f41-982d-8451e5f6ebfe.png?x-oss-process=image%2Fresize%2Cw_700%2Climit_0#averageHue=%23f9f2ee&amp;from=url&amp;id=Evvsx&amp;originHeight=328&amp;originWidth=700&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>访问：<a href="http://localhost:15672/#/">http://localhost:15672</a>，用户名密码都是 guest：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836097799-5f76d0cf-466c-41f7-9400-c7b31513ce48.png#averageHue=%23f9f9f8&amp;from=url&amp;id=QDJgA&amp;originHeight=1105&amp;originWidth=1848&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>如果想要在远程服务器安装访问 rabbitmq 管理面板，你要自己创建一个管理员账号，不能用默认的 guest，否则会被拦截（官方出于安全考虑）。</p><p>如果被拦截，可以自己创建管理员用户：<br>参考文档的 Adding a User：<a href="https://www.rabbitmq.com/access-control.html">https://www.rabbitmq.com/access-control.html</a></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836238966-daf0d8b4-ae0f-4451-bbb5-89693eb064b8.png?x-oss-process=image%2Fresize%2Cw_831%2Climit_0#averageHue=%23767574&amp;from=url&amp;id=WIQkF&amp;originHeight=493&amp;originWidth=831&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>rabbitmq 端口占用：<br>5672：程序连接的端口<br>15672：webUI</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836349584-8ec4cef9-d45a-4d02-8417-6739b7624a8e.png?x-oss-process=image%2Fresize%2Cw_825%2Climit_0#averageHue=%23f3f1ef&amp;from=url&amp;id=C7jLp&amp;originHeight=534&amp;originWidth=825&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2><p>快速入门</p><p>MQ 官方教程：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p>单向发送<br>Hello World<br>文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html">https://www.rabbitmq.com/tutorials/tutorial-one-java.html</a></p><p>一个生产者给一个队列发消息，一个消费者从这个队列取消息。1 对 1。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836521822-053f7420-498d-4539-9721-ae0bc6e5b012.png#averageHue=%23f4dbd6&amp;from=url&amp;id=IdUgY&amp;originHeight=244&amp;originWidth=1027&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>引入消息队列 java 客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        创建工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="comment">//        创建连接</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"><span class="comment">//             创建Channel 频道（可以理解为客户端）</span></span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line"><span class="comment">//            创建队列</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="comment">//            发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687944063317-2996bc0e-6d7b-4a2c-9206-0412a962d979.png#averageHue=%23ebeae9&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=110&amp;id=u022db1f9&amp;originHeight=110&amp;originWidth=1060&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=11950&amp;status=done&amp;style=none&amp;taskId=u00abceb2-39c1-4871-b373-bfcef629f89&amp;title=&amp;width=1060" alt="1687944045356.png"></p><p>消费者代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recv</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        创建工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"><span class="comment">//        创建Channel 频道（可以理解为客户端）</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"><span class="comment">//      注意这里的配置要和创建的配置一样</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"><span class="comment">//        定义如何处理消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//        消费消息，会持续阻塞</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Channel 频道：理解为操作消息队列的 client（比如 jdbcClient、redisClient），提供了和消息队列 server 建立通信的传输方法（为了复用连接，提高传输效率）。程序通过 channel 操作 rabbitmq（收发消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Queue.DeclareOk <span class="title function_">queueDeclare</span><span class="params">(String queue, <span class="type">boolean</span> durable, <span class="type">boolean</span> exclusive,</span></span><br><span class="line"><span class="params">                                    <span class="type">boolean</span> autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br></pre></td></tr></table></figure><p>创建消息队列：<br>参数：<br>queue：消息队列名称（注意，同名称的消息队列，只能用同样的参数创建一次）<br>durable：消息队列重启后，消息是否丢失<br>exclusive：是否只允许当前这个创建消息队列的连接操作消息队列<br>autoDelete：没有人 用队列后，是否要删除队列</p><p>消费示例：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687944852554-33ad90fd-9830-4f78-ae56-cf709a0b3666.png#averageHue=%23f0efef&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=368&amp;id=u3ec41d11&amp;originHeight=368&amp;originWidth=1231&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=23173&amp;status=done&amp;style=none&amp;taskId=u72ecb416-9b43-4f58-930d-62be4f5106b&amp;title=&amp;width=1231" alt="1687944821005.png"></p><p><strong>多消费者</strong><br>官方教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-two-java.html">https://www.rabbitmq.com/tutorials/tutorial-two-java.html</a><br>场景：多个机器同时去接受并处理任务（尤其是每个机器的处理能力有限）<br>一个生产者给一个队列发消息，<strong>多个消费者 </strong>从这个队列取消息。1 对多。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686837446793-34600b8b-907d-4c0a-8200-f077b3175c32.png#averageHue=%23f7e5e1&amp;from=url&amp;id=xMCTx&amp;originHeight=294&amp;originWidth=870&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>1）队列持久化<br>durable 参数设置为 true，服务器重启后队列不丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>2）消息持久化<br>指定 MessageProperties.PERSISTENT_TEXT_PLAIN 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">        MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">        message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p>生产者代码：<br>使用 Scanner 接受用户输入，便于发送多条消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">                    MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">                    message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制单个消费者的处理任务积压数：<br>每个消费者最多同时处理 1 个任务</p><p>消息确认机制：<br>为了保证消息成功被消费（快递成功被取走），rabbitmq 提供了消息确认机制，当消费者接收到消息后，比如要给一个反馈：<br>●ack：消费成功<br>●nack：消费失败<br>●reject：拒绝<br>如果告诉 rabbitmq 服务器消费成功，服务器才会放心地移除消息。<br>支持配置 autoack，会自动执行 ack 命令，接收到消息立刻就成功了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p><strong>autoack 为 true 表示自动确认，建议 autoack 改为 false，根据实际情况，去手动确认。</strong><br>指定确认某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>默认情况第二个参数为 false，表示只确认当前消息，改为 true 则自动确认在此之前所有未确认的消息<br>指定拒绝某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第三个参数 false 是指 requeue 参数，用于指定当消息被拒绝（nack）后是否重新将消息放回队列。在该代码中，设置为 false 表示不将消息重新放回队列，即消息被拒绝后将被丢弃。</p><p>消费者代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"><span class="comment">//        for循环模拟创建两个消费者</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"><span class="comment">//          指定每个消费者最多同时消费的消息数</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 定义了如何处理消息</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理工作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + <span class="string">&quot;编号:&quot;</span> + finalI + <span class="string">&quot;:&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="comment">// 消费消息后手动确认消息</span></span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 停 20 秒，模拟机器处理能力有限</span></span><br><span class="line">                    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//消费异常，</span></span><br><span class="line">                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 开启消费监听</span></span><br><span class="line">            channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 个小技巧： 1. 使用 Scanner 接受用户输入，便于快速发送多条消息 2. 使用 for 循环创建多个消费者，便于快速验证队列模型工作机制</p><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p>一个生产者给 多个 队列发消息，1 个生产者对多个队列。<br>交换机的作用：提供消息转发功能，类似于网络路由器<br>要解决的问题：怎么把消息转发到不同的队列上，好让消费者从不同的队列消费。</p><p>绑定：交换机和队列关联起来，也可以叫路由，算是一个算法或转发策略<br>绑定代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;绑定规则&quot;</span>);</span><br></pre></td></tr></table></figure><p>教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html">https://www.rabbitmq.com/tutorials/tutorial-three-java.html</a></p><p>交换机有多种类别：fanout、direct, topic, headers</p><h4 id="Fanout-交换机"><a href="#Fanout-交换机" class="headerlink" title="Fanout 交换机"></a>Fanout 交换机</h4><p>扇出、广播<br>特点：消息会被转发到所有绑定到该交换机的队列<br>场景：很适用于发布订阅的场景。比如写日志，可以多个系统间共享</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686839285368-841c3ded-965b-4ed7-8214-091ac7f2c922.png#averageHue=%23ecb9af&amp;from=url&amp;id=FQ8wi&amp;originHeight=247&amp;originWidth=745&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>示例场景：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687948681364-80cd61ee-59a9-439e-a383-1508632217a8.png#averageHue=%23fefefd&amp;clientId=u1d2592de-0cbf-4&amp;from=paste&amp;height=386&amp;id=u93f7459a&amp;originHeight=386&amp;originWidth=785&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22715&amp;status=done&amp;style=none&amp;taskId=uf5a03041-8aa6-4e4b-ba21-448e52f4d75&amp;title=&amp;width=785" alt="7K)]8JE8I`IBQ5$W$IS20R1.png"></p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        <span class="comment">// 创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：<br>注意：<br>1 消费者和生产者要绑定同一个交换机<br>2 要先有队列，才能绑定</p><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//        for循环模拟创建两个消费者</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">            <span class="comment">//          指定每个消费者最多同时消费的消息数</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 定义了如何处理消息</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理工作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + <span class="string">&quot;编号:&quot;</span> + finalI + <span class="string">&quot;:&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="comment">// 消费消息后手动确认消息</span></span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 停 20 秒，模拟机器处理能力有限</span></span><br><span class="line">                    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//消费异常，</span></span><br><span class="line">                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 开启消费监听</span></span><br><span class="line">            channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Direct-交换机"><a href="#Direct-交换机" class="headerlink" title="Direct 交换机"></a>Direct 交换机</h4><p>官方教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html">https://www.rabbitmq.com/tutorials/tutorial-four-java.html</a><br>绑定：可以让交换机和队列进行关联，可以指定让交互机把什么样的消息发送给哪个队列（类似于计算机网络中，两个路由器，或者网络设备相互连接，也可以理解为网线）<br>routingKey：路由键，控制消息要转发给哪个队列的（IP 地址）</p><p>特点：消息会根据路由键转发到指定的队列<br>场景：特定的消息只交给特定的系统（程序）来处理<br>绑定关系：完全匹配字符串</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687007686788-76df21d6-428d-4d2d-abb7-4da819faf775.png?x-oss-process=image%2Fresize%2Cw_408%2Climit_0#averageHue=%23150000&amp;from=url&amp;id=zHKr5&amp;originHeight=171&amp;originWidth=408&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>一个路由键可以给多个队列<br>交换机里存放着所有的路由键<br>比如发日志的场景<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687007976055-a38c33d2-490f-4582-b9ea-36b881c2101e.png?x-oss-process=image%2Fresize%2Cw_423%2Climit_0#averageHue=%23140000&amp;from=url&amp;id=Mjcsv&amp;originHeight=171&amp;originWidth=423&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>示例场景：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687955344132-80370d91-734f-4a15-b26c-fb1db9bf78a4.png#averageHue=%23fefdfd&amp;clientId=ucd6a0eb8-2a30-4&amp;from=paste&amp;height=379&amp;id=uf244fd0e&amp;originHeight=379&amp;originWidth=790&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23995&amp;status=done&amp;style=none&amp;taskId=u01e2c8e7-77d8-4da2-b389-25f312add09&amp;title=&amp;width=790" alt="7V`W[UCM7CDP0@(_G0MY2]B.png"></p><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;xiaoyu_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;xiaoyu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;xiaopi_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;xiaopi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaoyuDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaoyu] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaopiDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaopi] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, xiaoyuDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.basicConsume(queueName2, <span class="literal">true</span>, xiaopiDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing:&quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Topic-交换机"><a href="#Topic-交换机" class="headerlink" title="Topic 交换机"></a>Topic 交换机</h4><p>官方教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html">https://www.rabbitmq.com/tutorials/tutorial-five-java.html</a></p><p>特点：消息会根据模糊的路由键转发给指定的队列<br>场景：特定的一类消息可以交给特定的一类系统来处理<br>绑定关系：可以模糊匹配多个绑定</p><ul><li><ul><li>匹配一个单词，比如*.orange，那么 a.orange、b.orange 都能匹配</li></ul></li><li><h1 id="：匹配-0-个或者多个单词，比如-a-，那么-a-a、a-b、a-a-a-都能匹配"><a href="#：匹配-0-个或者多个单词，比如-a-，那么-a-a、a-b、a-a-a-都能匹配" class="headerlink" title="：匹配 0 个或者多个单词，比如 a.#，那么 a.a、a.b、a.a.a 都能匹配"></a>：匹配 0 个或者多个单词，比如 a.#，那么 a.a、a.b、a.a.a 都能匹配</h1></li></ul><p>注意：这里的匹配和 mysql 的 like 的%不一样，只能按照单词来匹配，每个‘.’分隔单词，如果是’#.’，其实可以忽略，匹配 0 个也 ok<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687009111794-08bd54bb-234d-4280-a604-852e2b01840c.png#averageHue=%23f8ecea&amp;from=url&amp;id=XUeMy&amp;originHeight=622&amp;originWidth=1479&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>应用场景：<br>老板要下发一个任务，让多个组来处理<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687955866934-02d32e8e-3ff3-41b9-811d-eb0d2ea4d925.png#averageHue=%23fefdfd&amp;clientId=ucd6a0eb8-2a30-4&amp;from=paste&amp;height=622&amp;id=u16876434&amp;originHeight=622&amp;originWidth=760&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36630&amp;status=done&amp;style=none&amp;taskId=uc426ae3a-ba42-45aa-a211-c9b9675ca44&amp;title=&amp;width=760" alt="M01_LSD@J@6GLGNYQ1@C_1W.png"></p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing:&quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;frontend_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;#.前端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;backend_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;#.后端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName3</span> <span class="operator">=</span> <span class="string">&quot;product_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName3, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName3, EXCHANGE_NAME, <span class="string">&quot;#.产品.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">xiaoaDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [xiaoa] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">xiaobDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [xiaob] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">xiaocDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [xiaoc] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      channel.basicConsume(queueName, <span class="literal">true</span>, xiaoaDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">      channel.basicConsume(queueName2, <span class="literal">true</span>, xiaobDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">      channel.basicConsume(queueName3, <span class="literal">true</span>, xiaocDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Headers-交换机"><a href="#Headers-交换机" class="headerlink" title="Headers 交换机"></a>Headers 交换机</h4><p>类似主题和直接交换机，可以根据 headers 中的内容来指定发送到哪个队列<br>由于性能差、比较复杂，一般不推荐使用。</p><blockquote><p>AI 学习连环问：是什么？有什么用？什么场景下会用？有什么优缺点？有没有示例代码？</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687011466810-28a7cdc5-e42c-45f5-aa8c-2635c41e0a89.png?x-oss-process=image%2Fresize%2Cw_400%2Climit_0#averageHue=%23ccdbf3&amp;from=url&amp;id=Og523&amp;originHeight=1235&amp;originWidth=400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>支持用消息队列来模拟 RPC 的调用，但是一般没必要，直接用 Dubbo、GRPC 等 RPC 框架就好了。</p><h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><h4 id="消息过期机制"><a href="#消息过期机制" class="headerlink" title="消息过期机制"></a>消息过期机制</h4><p>官方文档：<a href="https://www.rabbitmq.com/ttl.html">https://www.rabbitmq.com/ttl.html</a></p><p>可以给每个消息指定一个有效期，一段时间内未处理，就过期<br>示例场景：消费者（库存系统）挂了，一个订单 15 分钟还没有被库存清理，这个订单其实已经失效了，哪怕库存系统恢复，也不扣库存<br>试用场景：<br>订单系统中顾客下单、模拟延迟队列的实现（区分 vip 和普通用户）、专门让某个程序处理过期的请求<br>1）给队列中的所有消息指定过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列，指定消息过期参数</span></span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="comment">// args 指定参数</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687012172430-53fff46b-6383-40c9-99ae-bc96667f71d4.png#averageHue=%23ebe6e5&amp;from=url&amp;id=mBQr0&amp;originHeight=468&amp;originWidth=1010&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>如果在过期时间内，还没有消费者取消息，消息才会过期。<br>注意，如果消息已经收到，但是没有确认，是不会过期的</p><blockquote><p>如果消息处于代消费状态并且过期时间到达后，消息将被标记为过期。但是，如果消息已经处于正在处理的过程，即将过期，消息仍然会被正常处理，不会过期</p></blockquote><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，指定消息过期参数</span></span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// args 指定参数</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义了如何处理消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费消息，会持续阻塞</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="comment">//        factory.setUsername();</span></span><br><span class="line"><span class="comment">//        factory.setPassword();</span></span><br><span class="line"><span class="comment">//        factory.setPort();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立连接、创建频道</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2)给某条消息指定过期时间<br>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给消息指定过期时间</span></span><br><span class="line">AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">        .expiration(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">channel.basicPublish(<span class="string">&quot;my-exchange&quot;</span>, <span class="string">&quot;routing-key&quot;</span>, properties, message.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="comment">//        factory.setUsername();</span></span><br><span class="line"><span class="comment">//        factory.setPassword();</span></span><br><span class="line"><span class="comment">//        factory.setPort();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立连接、创建频道</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给消息指定过期时间</span></span><br><span class="line">            AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">                    .expiration(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;my-exchange&quot;</span>, <span class="string">&quot;routing-key&quot;</span>, properties, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h4><p>官方文档：<a href="https://www.rabbitmq.com/confirms.html">https://www.rabbitmq.com/confirms.html</a><br>为了保证消息被正常消费（快递员取走），rabbitMQ 提供了消息确认机制，当消费者收到消息后，要给一个反馈。</p><ul><li>ack 消费成功</li><li>nack 消费失败</li><li>reject 拒绝</li></ul><p>如果告诉 rabbitMQ 服务器消费成功，服务器才会放心移除消息。<br>支持配置 autoack，会自动执行 ack 命令，接到消息立刻就成功了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><p>一般情况，建议 autoack 改为 false，根据实际情况，去手动确认。</p><p>指定确认某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), );</span><br></pre></td></tr></table></figure><p>第二个参数 multiple 批量确认；是指是否要一次性确认所有的历史消息直到当前这一条</p><p>拒绝某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第二个 参数指示是否拒绝多条消息，如果为 true，则拒绝所有比给定 deliveryTag 小或等于它的未确认消息；如果为 false，则只拒绝指定 deliveryTag 的消息。<br>第三个参数表示是否重新入队，用于重试</p><p>与之相反，<strong>basicReject</strong> 方法是另一种拒绝消息的方式，它只能拒绝单个消息，并且只能将消息重新放回队列。如果您需要拒绝多条消息或选择性地将消息重新放回队列或直接丢弃，那么您应该使用 basicNack 方法。</p><h4 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h4><p>官方文档：<a href="https://www.rabbitmq.com/dlx.html">https://www.rabbitmq.com/dlx.html</a></p><p>为了保证消息的可靠性，比如每条消息都成功消费，需要提供一个容错机制，即：失败的消息怎么处理？<br>死信：过期的消息、拒收的消息、消息队列满了、处理失败的消息的统称<br>死信队列：专门处理死信的队列（注意，它就是一个普通队列，只不过是专门用来处理死信的，你甚至可以理解这个队列的名称叫 “死信队列”）</p><p>死信交换机：专门给死信队列转发消息的交换机（注意，它就是一个普通交换机，只不过是专门给死信队列发消息而已，理解为这个交换机的名称就叫 “死信交换机”）。也存在路由绑定<br>死信可以通过死信交换机绑定到死信队列。</p><p>示例场景：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687964741456-462605ae-f905-4fbd-ae73-327dbf685706.png#averageHue=%23fdfdfd&amp;clientId=ucd6a0eb8-2a30-4&amp;from=paste&amp;height=597&amp;id=ud8150982&amp;originHeight=597&amp;originWidth=748&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27670&amp;status=done&amp;style=none&amp;taskId=uc97c0fe9-d41a-4306-af3f-9c3cb997c43&amp;title=&amp;width=748" alt="1687964679285.png"></p><p>实现：<br>1）创建死信交换机和死信队列，并且绑定关系<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687013888188-1bde4fc6-73c1-48e4-b9c8-7d231a4e5a72.png#averageHue=%23fcfcfc&amp;from=url&amp;id=ZZ33J&amp;originHeight=418&amp;originWidth=772&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>2）给失败之后需要容错处理的队列绑定死信交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定死信队列参数</span></span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 要绑定到哪个交换机</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line"><span class="comment">// 指定死信要转发到哪个死信队列</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;xiaodog_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;xiaodog&quot;</span>);</span><br></pre></td></tr></table></figure><p>3）可以给要容错的队列指定死信之后的转发规则，死信应该再转发到哪个死信队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定死信要转发到哪个死信队列</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;waibao&quot;</span>);</span><br></pre></td></tr></table></figure><p>4）可以通过程序来读取死信队列中的消息，从而进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;laoban_dlx_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">channel.queueBind(queueName, DEAD_EXCHANGE_NAME, <span class="string">&quot;laoban&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;waibao_dlx_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">channel.queueBind(queueName2, DEAD_EXCHANGE_NAME, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">laobanDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 拒绝消息</span></span><br><span class="line">    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [laoban] Received &#x27;&quot;</span> +</span><br><span class="line">            delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">waibaoDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 拒绝消息</span></span><br><span class="line">    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [waibao] Received &#x27;&quot;</span> +</span><br><span class="line">            delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">channel.basicConsume(queueName, <span class="literal">false</span>, laobanDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line">channel.basicConsume(queueName2, <span class="literal">false</span>, waibaoDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx-direct-exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct2-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">// 声明死信交换机</span></span><br><span class="line">            channel.exchangeDeclare(DEAD_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;laoban_dlx_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName, DEAD_EXCHANGE_NAME, <span class="string">&quot;laoban&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;waibao_dlx_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName2, DEAD_EXCHANGE_NAME, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">laobanDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot; [laoban] Received &#x27;&quot;</span> +</span><br><span class="line">                        delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">waibaoDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot; [waibao] Received &#x27;&quot;</span> +</span><br><span class="line">                        delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(queueName, <span class="literal">false</span>, laobanDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            channel.basicConsume(queueName2, <span class="literal">false</span>, waibaoDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                channel.basicPublish(WORK_EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing:&quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx-direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct2-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(WORK_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定死信队列参数</span></span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 要绑定到哪个交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">        <span class="comment">// 指定死信要转发到哪个死信队列</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;xiaodog_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">        channel.queueBind(queueName, WORK_EXCHANGE_NAME, <span class="string">&quot;xiaodog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; args2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        args2.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">        args2.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;laoban&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;xiaocat_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args2);</span><br><span class="line">        channel.queueBind(queueName2, WORK_EXCHANGE_NAME, <span class="string">&quot;xiaocat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaoyuDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 拒绝消息</span></span><br><span class="line">            channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaodog] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaopiDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 拒绝消息</span></span><br><span class="line">            channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaocat] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">false</span>, xiaoyuDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.basicConsume(queueName2, <span class="literal">false</span>, xiaopiDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-重要知识"><a href="#RabbitMQ-重要知识" class="headerlink" title="RabbitMQ 重要知识"></a>RabbitMQ 重要知识</h3><blockquote><p>也是面试考点</p></blockquote><ol><li>消息队列的概念、模型、应用场景</li></ol><p>概念:<br>消息队列就是存储消息的队列。<br>模型：<br>生产者：Producer，类比为快递员，发送消息的人（客户端）<br>消费者：Consumer，类比为取快递的人，接受读取消息的人（客户端）<br>消息：Message，类比为快递，就是生产者要传输给消费者的数据<br>消息队列：Queue 为什么不接传输，要用消息队列？生产者不用关心你的消费者要不要消费、什么时候消费，我只需要把东西给消息队列，我的工作就算完成了。 生产者和消费者实现了解耦，互不影响。<br>应用场景: 1.耗时的场景（异步） 2.高并发场景（异步、削峰填谷） 3.分布式系统协作（跨团队、跨业务、应用解耦）<br>比如 QQ 是一个系统，用 c++写的，微信用 java 写的，qq 的消息可以通过消息队列传送给微信 4.强稳定性的场景（金融业务、持久化、可靠性、削峰填谷）<br>支付、转账</p><ol><li>交换机的类别、路由绑定的关系<ol><li>Fanout</li><li>Direct</li><li>Topic</li><li>Headers</li><li>RPC</li></ol></li></ol><p>扇形交换机（Fanout Exchange）：在扇形交换机中，绑定不需要指定路由键。交换机会将消息广播到所有与之绑定的队列，忽略消息的路由键。<br>直连交换机（Direct Exchange）：在直连交换机中，绑定需要指定一个特定的路由键。当消息的路由键与绑定的路由键完全匹配时，消息将被路由到与之绑定的队列。<br>主题交换机（Topic Exchange）：在主题交换机中，绑定使用模式匹配的路由键。路由键可以包含通配符 <em> 和 #。</em> 匹配一个单词，# 匹配零个或多个单词。交换机将消息根据路由键与绑定的模式进行匹配，然后路由到相应的队列。<br>标头交换机（Headers Exchange）：在标头交换机中，绑定使用消息的标头信息进行匹配。绑定时可以指定一组键值对，当消息的标头信息与绑定的键值对匹配时，消息将被路由到相应的队列。</p><ol><li>消息可靠性<br>a 消息确认机制（ack、nack、reject）<br>b 消息持久化（durable）<br>首先，您需要确保队列本身是持久化的，以防止在 RabbitMQ 服务器重启或崩溃时丢失队列的定义和消息。其次，您需要确保消息本身是持久化的，以便在服务器重启或崩溃后仍然保留消息。在发布消息时，可以通过设置 deliveryMode 参数为 2 来使消息持久化。</li></ol><p>c 消息过期机制<br>d 死信队列<br>消费过程中可能存在消息消费失败、消息过期、消息达到最大重试次数、消息被拒绝等情况，死信队列为消息处理提供了一种容错机制，确保系统能够对异常情况进行适当的处理，并提高消息系统的可靠性和稳定性</p><ol><li>延迟队列（类似死信队列）</li><li>顺序消费、消费幂等性（本次不讲）</li><li>可扩展性（仅作了解）<br>a 集群<br>b 故障的恢复机制<br>c 镜像</li><li>运维监控告警（仅作了解）</li></ol><h2 id="Mq-设计基础知识"><a href="#Mq-设计基础知识" class="headerlink" title="Mq 设计基础知识"></a>Mq 设计基础知识</h2><p><strong>多线程版本 mq；</strong><br><strong>基于网络通讯版本 mq netty 实现</strong></p><h3 id="基于多线程队列简单实现-mq"><a href="#基于多线程队列简单实现-mq" class="headerlink" title="基于多线程队列简单实现 mq"></a>基于多线程队列简单实现 mq</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>:22603</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span>:2023/3/3 15:23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMQ</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedBlockingDeque&lt;JSONObject&gt;linkedBlockingDeque=<span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                        jsonObject.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;18790034997&quot;</span>);</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,获取到数据:&quot;</span> + jsonObject.toJSONString());</span><br><span class="line">                        linkedBlockingDeque.offer(jsonObject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;生产额&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="type">JSONObject</span> <span class="variable">poll</span> <span class="operator">=</span> linkedBlockingDeque.poll();</span><br><span class="line">                    <span class="keyword">while</span> (poll != <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,获取到数据:&quot;</span> + poll.toJSONString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line">        customer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于-netty-实现-mq"><a href="#基于-netty-实现-mq" class="headerlink" title="基于 netty 实现 mq"></a>基于 netty 实现 mq</h3><p>消费者 netty 客户端与 nettyServer 端 MQ 服务器端保持长连接，MQ 服务器端保存<br>消费者连接。<br>生产者 netty 客户端发送请求给 nettyServer 端 MQ 服务器端，MQ 服务器端在将该<br>消息内容发送给消费者。</p><p>body:{“msg”:{“userId”:”123456”,”age”:”23”},”type”:”producer”，”topic”:””}<br><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1677922569697-19813871-c904-431a-bbf5-ce353198fc3e.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1677922569697-19813871-c904-431a-bbf5-ce353198fc3e.java%22%2C%22name%22%3A%22NettyMQServer.java%22%2C%22size%22%3A7210%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u0ca88953-3f38-4e45-984b-3635444ee04%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22uc92a400b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">NettyMQServer.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1677922569698-50ef2ac6-6029-45a6-affa-91b513fd2597.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1677922569698-50ef2ac6-6029-45a6-affa-91b513fd2597.java%22%2C%22name%22%3A%22NettyMQConsumer.java%22%2C%22size%22%3A4182%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u495980a7-67b8-4244-93e9-43d7a4a2073%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u57358565%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">NettyMQConsumer.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1677922569722-760c8e69-dd07-46c2-a6d3-e1cdb34fb5be.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1677922569722-760c8e69-dd07-46c2-a6d3-e1cdb34fb5be.java%22%2C%22name%22%3A%22NettyMQProduce.java%22%2C%22size%22%3A4579%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u9a7a267a-f4c8-4d80-a791-f4129711153%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ud6e420a2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">NettyMQProduce.java</a></p><h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><p>生产者投递消息给 MQ 服务器端，MQ 服务器端需要缓存该消息<br>如果 mq 服务器端宕机之后，消息如何保证不丢失</p><ol><li>持久化机制<br>① 生产者投递消息给消费者，消息不只是放在内存里，他也会持久化到我们的硬盘中<br>② 消息支持持久化到 Commitlog 里面，即使宕机后重启，未消费的消息也是可以加载出来的</li></ol><p>2、如果 mq 接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？<br>不会丢失，消息确认机制必须要消费者消费该消息成功之后，在通知给 mq 服务器端<br>删除该消息。</p><p>3、冗余部署：采用冗余部署的架构，使用多个 MQ 服务器组成集群或者使用主从复制机制。当主服务器宕机时，备份服务器可以接管服务，并保证消息的持久化和可靠传递。</p><p>4、数据备份与恢复：定期备份 MQ 服务器上的消息数据，并确保备份数据的完整性和可靠性。在服务器宕机后，可以通过恢复备份数据来恢复消息队列的状态。</p><p>5、监控与报警：建立监控系统，实时监测 MQ 服务器的状态。一旦服务器发生故障或宕机，及时触发报警机制，以便管理员能够尽快采取措施来保护消息不丢失。</p><p><strong>Mq 服务器端将该消息推送消费者和费者主动拉取消息的区别？</strong></p><p><strong>Mq 服务器端将该消息推送消费者：</strong><br>消费者已经和 mq 服务器保持长连接。</p><p><strong>消费者主动拉取消息：</strong><br>消费者第一次刚启动的时候</p><p><strong>两者区别：生产者将消息推送给 mq 服务器端，mq 服务器端发现消费者不在的情况下，就会将消息缓存起来，随后消费者上线与 mq 服务器建立连接，拉取消息的过程属于消费者主动拉取消息，消费者消费消息后，会通知 mq 服务器端删除该消息，随后生产者将消息推送给 mq 服务器端，mq 服务器在已经与消费者建立连接的情况下，主动将消息推送给消费者。</strong></p><p><strong>Mq 如何实现抗高并发思想？</strong></p><ol><li>异步处理：将业务逻辑解耦并异步化，通过将请求转化为消息并发送到消息队列中，而不是直接同步处理请求。这样可以将高并发的请求转化为消息并发放到消息队列中，让消费者以适合的速率进行处理，从而实现系统的高并发能力。</li><li>消息并发消费：通过增加消费者的数量，实现消息的并发消费能力。通过水平扩展消费者，可以增加系统的处理能力和并发处理的吞吐量。</li><li>消费者负载均衡：在有多个消费者的情况下，可以使用负载均衡策略来平均分配消息的处理负载。常见的负载均衡策略包括轮询、随机、最少连接等，确保消息能够平均地分发给多个消费者进行处理。</li><li>消息预取（Prefetch）：消息队列通常支持设置消费者的预取数量，即一次从队列中预取的消息数量。通过适当调整预取数量，可以提高消费者的处理效率和系统的吞吐量。</li><li>限流和流量控制：通过设置适当的限流策略和流量控制机制，控制消息的发送速率和消费速率。这可以避免系统被过多的请求压垮，保持系统的稳定性和可靠性。</li><li>消息批量处理：对于大量的小消息，可以进行批量处理，将多个消息打包成一个批次进行处理，减少系统的开销和通信成本。</li><li>消息重试和幂等性：在高并发场景下，可能会出现消息处理失败的情况。通过实现消息的重试机制和保证消息处理的幂等性，可以避免因为重复消息或消息处理失败而引发的问题。</li><li>高可用和故障恢复：通过使用多个消息队列节点和复制机制，实现高可用性和故障恢复能力。当某个节点发生故障时，其他节点可以接替其工作，确保系统的稳定性和可用性。</li></ol><p>缺点：存在延迟的问题</p><p><strong>如何避免 mq 消息堆积问题？</strong></p><p>需要考虑 mq 消费者提高速率的问题：<br>如何消费者提高速率：<strong>消费者实现集群、消费者批量获取消息即可。</strong><br>提供多个消费者，每个消费者每次取一百或者十条，从而提高效率</p><h4 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><p>| ```</p><dependencies><pre><code> &lt;dependency&gt;     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;     &lt;version&gt;1.2.62&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;io.netty&lt;/groupId&gt;     &lt;artifactId&gt;netty-all&lt;/artifactId&gt;     &lt;version&gt;4.0.23.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;     &lt;version&gt;1.2.62&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;     &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;     &lt;version&gt;3.11&lt;/version&gt; &lt;/dependency&gt;</code></pre><p>   &lt;/dependencies&gt;<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line"># RabbitMQ</span><br><span class="line"></span><br><span class="line">## RabbitMQ 基本介绍</span><br><span class="line"></span><br><span class="line">RabbitMQ 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件），RabbitMQ 服务器是用 Erlang 语言编写的。</span><br><span class="line">RabitMQ 官方网站:</span><br><span class="line">[https://www.rabbitmq.com/](https://www.rabbitmq.com/) 1.点对点(简单)的队列 2.工作(公平性)队列模式 3.发布订阅模式 4.路由模式 Routing 5.通配符模式 Topics</span><br><span class="line">6.RPC</span><br><span class="line">https://www.rabbitmq.com/getstarted.html</span><br><span class="line"></span><br><span class="line">## RabbitMQ 环境的基本安装</span><br><span class="line"></span><br><span class="line">1.下载并安装 erlang,下载地址：http://www.erlang.org/download 2.配置 erlang 环境变量信息</span><br><span class="line">新增环境变量 ERLANG_HOME=erlang 的安装地址</span><br><span class="line">将%ERLANG_HOME%\bin 加入到 path 中 3.下载并安装 RabbitMQ，下载地址：http://www.rabbitmq.com/download.html</span><br><span class="line">注意: RabbitMQ 它依赖于 Erlang,需要先安装 Erlang。</span><br><span class="line">[https://www.rabbitmq.com/install-windows.html](https://www.rabbitmq.com/install-windows.html)</span><br><span class="line"></span><br><span class="line">安装教程：[https://blog.csdn.net/tirster/article/details/121938987](https://blog.csdn.net/tirster/article/details/121938987)</span><br><span class="line"></span><br><span class="line">### 安装 RabbitMQ 环境步骤</span><br><span class="line"></span><br><span class="line">配置 Erlang 环境变量：</span><br><span class="line"></span><br><span class="line">### 如何启动 Rabbitmq</span><br><span class="line"></span><br><span class="line">net start RabbitMQ</span><br><span class="line"></span><br><span class="line">### 启动 Rabbitmq 常见问题</span><br><span class="line"></span><br><span class="line">如果 rabbitmq 启动成功无法访问管理平台页面</span><br><span class="line"></span><br><span class="line">进入到 F:\path\rabbitmq\rabbitmq\rabbitmq_server-3.6.9\sbin&gt;</span><br><span class="line">执行</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line">### Rabbitmq 管理平台中心</span><br><span class="line"></span><br><span class="line">RabbitMQ 管理平台地址 http://127.0.0.1:15672</span><br><span class="line">默认账号:guest/guest 用户可以自己创建新的账号</span><br><span class="line"></span><br><span class="line">Virtual Hosts:</span><br><span class="line">像 mysql 有数据库的概念并且可以指定用户对库和表等操作的权限。那 RabbitMQ 呢？</span><br><span class="line">RabbitMQ 也有类似的权限管理。在 RabbitMQ 中可以虚拟消息服务器 VirtualHost，每</span><br><span class="line">个 VirtualHost 相当月一个相对独立的 RabbitMQ 服务器，每个 VirtualHost 之间是相互</span><br><span class="line">隔离的。exchange、queue、message 不能互通。</span><br><span class="line"></span><br><span class="line">默认的端口 15672：rabbitmq 管理平台端口号</span><br><span class="line">默认的端口 5672： rabbitmq 消息中间内部通讯的端口</span><br><span class="line">默认的端口号 25672 rabbitmq 集群的端口号</span><br><span class="line"></span><br><span class="line">### RabbitMQ 常见名词</span><br><span class="line"></span><br><span class="line">/Virtual Hosts---分类</span><br><span class="line">/队列存放我们消息</span><br><span class="line">Exchange 分派我们消息在那个队列存放起来类似于 nginx</span><br><span class="line"></span><br><span class="line">15672---rabbitmq 控制台管理平台 http 协议</span><br><span class="line">25672rabbitmq 集群通信端口号</span><br><span class="line">Amqp 5672 rabbitmq 内部通信的一个端口号</span><br><span class="line"></span><br><span class="line">### RabbitMQ 创建账户</span><br><span class="line"></span><br><span class="line">### RabbitMQ 平台创建 Virtual Hosts</span><br><span class="line"></span><br><span class="line">### RabbitMQ 平台创建消息队列</span><br><span class="line"></span><br><span class="line">## 快速入门 RabbitMQ 简单队列</span><br><span class="line"></span><br><span class="line">首先需要再 RabbitMQ 平台创建 Virtual Hosts 和队列。</span><br><span class="line">/meiteVirtualHosts</span><br><span class="line">----订单队列</span><br><span class="line">----支付队列</span><br><span class="line"></span><br><span class="line">1.        在RabbitMQ平台创建一个队列；</span><br><span class="line">2.        在编写生产者代码</span><br><span class="line">3.        在编写消费者代码</span><br><span class="line"></span><br><span class="line">### RabbitMQ 如何保证消息不丢失</span><br><span class="line"></span><br><span class="line">先来看看消息都有可能再哪些环节丢失</span><br><span class="line">![JZ9O8F]IZ$ND00NCWW[R2(D.png](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678063490365-7adcdad9-0f2b-4208-9a45-51079bbc7de8.png#averageHue=%23f8f8f8&amp;clientId=ub4a67b8a-2261-4&amp;from=paste&amp;height=200&amp;id=u467660a7&amp;originHeight=200&amp;originWidth=677&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11164&amp;status=done&amp;style=none&amp;taskId=u30c0e8f7-b810-48b6-b612-f69425b7ca3&amp;title=&amp;width=677)</span><br><span class="line">Mq 如何保证消息不丢失：</span><br><span class="line"></span><br><span class="line">1.        生产者角色</span><br><span class="line"></span><br><span class="line">    由于网络波动导致消息发送失败</span><br><span class="line">    确保生产者投递消息到 MQ 服务器端成功。</span><br><span class="line">    解决:Ack 消息确认机制</span><br><span class="line">    存在同步或者异步的形式，同步会存在生产者将消息发送给 MQ 服务器端，MQ 服务器端未能及时响应给生产者，就会导致生产者服务延迟阻塞，响应给客户端。异步是在生产者和 MQ 服务第端之间会有一个观察者进行事件监听，只要 MQ 服务器端将消息持久化到硬盘，MQ 服务器端再给监听方法发通知，说明消息发送成功了。如果消息多久时间内一直未给响应结果的情况下，我们可以人为进行重试。</span><br><span class="line">    方式 1：Confirms 方式 2：事务消息</span><br><span class="line"></span><br><span class="line">2.        消费者角色</span><br><span class="line">    消费者在消费完消息之前宕机，MQ 服务器端认为认为消息消费成功，并把存储在内存中的消息删除，导致消息丢失</span><br><span class="line">    解决:</span><br><span class="line">    在 rabbitmq 情况下引入了消息应答机制：</span><br><span class="line">    必须要将消息消费成功之后，才会将该消息从 mq 服务器端中移除。</span><br><span class="line">    在 kafka 中的情况下：</span><br><span class="line">    不管是消费成功还是消费失败，该消息都不会立即从 mq 服务器端移除。</span><br><span class="line">    在 kafka 中，消费者宕机，MQ 服务器端如何判断这个消息消费了多少呢，kafka 中引入了分区 off、set，他会记录消费者消费了这个消息的哪个偏移量，消费者知道该从哪开始消费，消息清理，一般会有定时器在几天后定时把消费成功的消息进行清理</span><br><span class="line">3.        MQ服务器端把消息发送给消费者前宕机</span><br><span class="line"></span><br><span class="line">    Mq 服务器端在默认的情况下都会对队列中的消息实现持久化</span><br><span class="line">    持久化硬盘。</span><br><span class="line"></span><br><span class="line">4.  使用消息确认机制+持久技术</span><br><span class="line">    A.消费者确认收到消息机制</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, false, defaultConsumer);</span><br><span class="line">    注：第二个参数值为 false 代表关闭 RabbitMQ 的自动应答机制，改为手动应答。</span><br><span class="line">    在处理完消息时，返回应答状态，true 表示为自动应答模式。</span><br><span class="line">    channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">    B.生产者确认投递消息成功 使用 Confirm 机制 或者事务消息</span><br><span class="line"></span><br><span class="line">Confirm 机制：</span><br><span class="line">生产者将 Channel 设置成 confirm 模式，一旦 Channel 进入 confirm 模式，所有在该 Channel 上面发布的消息都将会被指派一个唯一的 ID(从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker 就会发送一个确认给生产者(包含消息的唯一 ID)，这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置 basic.ack 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理；</span><br><span class="line">confirm 模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等 Channel 返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果 RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消息，生产者应用程序同样可以在回调方法中处理该 nack 消息；</span><br><span class="line">事务模式： channel.txSelect(); _//开启事务_</span><br><span class="line">channel.txCommit(); _//提交事务_</span><br><span class="line">channel.txRollback(); _//回滚_</span><br><span class="line">在通过 txSelect 开启事务之后，我们便可以发布消息给 broker 服务器了，如果 txCommit 提交成功了，则消息一定到达了 broker 了，如果在 txCommit 执行之前 broker 异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过 txRollback 回滚事务了。</span><br><span class="line"></span><br><span class="line">这里注意一下：txSelect 与 Confirm 模式不能共存。</span><br><span class="line">Confirm 模式的三种编程方式：</span><br><span class="line"></span><br><span class="line">1. 串行 confirm 模式：peoducer 每发送一条消息后，调用 waitForConfirms()方法，等待 broker 端 confirm。</span><br><span class="line">2. 批量 confirm 模式：producer 每发送一批消息后，调用 waitForConfirms()方法，等待 broker 端 confirm。</span><br><span class="line">3. 异步 confirm 模式：提供一个回调方法，broker confirm 了一条或者多条消息后 producer 端会回调这个方法。</span><br><span class="line"></span><br><span class="line">2.RabbitMQ 默认创建是持久化的</span><br><span class="line"></span><br><span class="line">代码中设置 durable 为 true</span><br><span class="line"></span><br><span class="line">参数名称详解：</span><br><span class="line">durable 是否持久化 durable 为持久化、 Transient 不持久化</span><br><span class="line">autoDelete 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过 RabbitMQ Management，查看某个队列的消费者数量，当 consumers = 0 时队列就会自动删除 2. 使用 rabbitmq 事务消息；</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">channel.txSelect();</span><br><span class="line"></span><br><span class="line">channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, msg.getBytes());</span><br><span class="line"></span><br><span class="line">// int i = 1 / 0;</span><br><span class="line"></span><br><span class="line">channel.txCommit();</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 相关核心代码</span><br><span class="line">##### 生产者</span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.RabbitMQ;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author:22603</span><br><span class="line">* @Date:2023/3/6 0:39</span><br><span class="line">*/</span><br><span class="line">public class ProduceMQ &#123;</span><br><span class="line"></span><br><span class="line">    public static final String QUEUE_NAME=&quot;StudyingQueues&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        Connection connection=ConnectionMQ.getConnect();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        String msg=&quot;MQ你好呀啊222&quot;;</span><br><span class="line">        channel.basicPublish(&quot;&quot;,QUEUE_NAME,null,msg.getBytes());</span><br><span class="line">        //       关闭通道和连接</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">channel.confirmSelect();```java</span><br><span class="line">package com.example.demo1.RabbitMQ;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/6 0:29</span><br><span class="line">  \*/</span><br><span class="line">  public class ConnectionMQ &#123;</span><br><span class="line"></span><br><span class="line">      public static Connection getConnect() throws IOException, TimeoutException &#123;</span><br><span class="line">          ConnectionFactory connectionFactory=new ConnectionFactory();</span><br><span class="line">          //        设置连接的virtualhost</span><br><span class="line">          connectionFactory.setVirtualHost(&quot;/Study&quot;);</span><br><span class="line">          //        设置用户名密码</span><br><span class="line">          connectionFactory.setUsername(&quot;guest&quot;);</span><br><span class="line">          connectionFactory.setPassword(&quot;guest&quot;);</span><br><span class="line">          //        设置端口号和地址</span><br><span class="line">          connectionFactory.setPort(5672);</span><br><span class="line">          connectionFactory.setHost(&quot;127.0.0.1&quot;);</span><br><span class="line">          return connectionFactory.newConnection();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 消费者</span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.RabbitMQ;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author:22603</span><br><span class="line">* @Date:2023/3/6 0:39</span><br><span class="line">*/</span><br><span class="line">public class CustomMQ &#123;</span><br><span class="line"></span><br><span class="line">    public static final String QUEUE_NAME=&quot;StudyingQueues&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        Connection connection=ConnectionMQ.getConnect();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        DefaultConsumer consumer=new DefaultConsumer(channel)&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String msg=new String(body,&quot;utf-8&quot;);</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //        监听队列</span><br><span class="line">        //        autoAck true 自动签收 false 手动签收</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,true,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">## RabbitMQ 五种消息模式</span><br><span class="line"></span><br><span class="line">### RabitMQ 工作队列</span><br><span class="line"></span><br><span class="line">默认的传统队列是为均摊消费，存在不公平性；如果每个消费者速度不一样的情况下，均摊消费是不公平的，应该是能者多劳。</span><br><span class="line">采用工作队列</span><br><span class="line">在通道中只需要设置 basicQos 为 1 即可，表示 MQ 服务器每次只会给消费者推送 1 条消息必须手动 ack 确认之后才会继续发送。</span><br><span class="line">channel.basicQos(1);</span><br><span class="line"></span><br><span class="line">### RabbitMQ 交换机类型</span><br><span class="line"></span><br><span class="line">Direct exchange（直连交换机）</span><br><span class="line">Fanout exchange（扇型交换机）</span><br><span class="line">Topic exchange（主题交换机）</span><br><span class="line">Headers exchange（头交换机）</span><br><span class="line">/Virtual Hosts---区分不同的团队</span><br><span class="line">----队列存放消息</span><br><span class="line">----交换机路由消息存放在那个队列中类似于 nginx</span><br><span class="line">---路由 key 分发规则</span><br><span class="line"></span><br><span class="line">## Direct Exchange</span><br><span class="line"></span><br><span class="line">直连交换机，根据 Routing Key(路由键)进行投递到不同队列。</span><br><span class="line">单个绑定，一个路由键对应一个队列。如下所示：</span><br><span class="line"></span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420140-54852ce3-04e7-40d7-a60b-7340d21e1fb0.png#averageHue=%23150000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u8ea614a2&amp;originHeight=171&amp;originWidth=408&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ucefd7391-ea58-4e8e-898d-9d475721ba1&amp;title=)</span><br><span class="line">多个绑定，一个路由键对应多个队列，则消息会分别投递到两个队列中，如下所示：</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420167-b0448137-666c-453a-9c1b-4275e5cbcfe5.png#averageHue=%23160000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u1783ecdb&amp;originHeight=171&amp;originWidth=398&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u90472250-3f5e-48e2-971f-27fe37d1d41&amp;title=)</span><br><span class="line"></span><br><span class="line">## Fanout Exchange</span><br><span class="line"></span><br><span class="line">扇形交换机，采用广播模式，根据绑定的交换机，路由到与之对应的所有队列。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout 交换机转发消息是最快的。</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420143-c9df29e5-deac-494d-bdce-35b50551b85c.png#averageHue=%231b0000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u12903de6&amp;originHeight=160&amp;originWidth=329&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uec131518-b681-4fb7-b89a-759e4c379e8&amp;title=)</span><br><span class="line"></span><br><span class="line">## Topic Exchange</span><br><span class="line"></span><br><span class="line">主题交换机，对路由键进行模式匹配后进行投递，符号#表示一个或多个词，_表示一个词。因此“abc.#”能够匹配到“abc.def.ghi”，但是“abc._” 只会匹配到“abc.def”。如下所示：</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420143-c434869a-5462-4175-a76e-bb0b78b216f0.png#averageHue=%23140000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u41779bab&amp;originHeight=171&amp;originWidth=424&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uecf232e1-a9fb-4854-956c-62a3dca002e&amp;title=)</span><br><span class="line"></span><br><span class="line">## Header Exchange</span><br><span class="line"></span><br><span class="line">头交换机，不处理路由键。而是根据发送的消息内容中的 headers 属性进行匹配。在绑定 Queue 与 Exchange 时指定一组键值对；当消息发送到 RabbitMQ 时会取到该消息的 headers 与 Exchange 绑定时指定的键值对进行匹配；如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers 属性是一个键值对，可以是 Hashtable，键值对的值可以是任何类型。而 fanout，direct，topic 的路由键都需要要字符串形式的。</span><br><span class="line">匹配规则 x-match 有下列两种类型：</span><br><span class="line">x-match = all ：表示所有的键值对都匹配才能接受到消息</span><br><span class="line">x-match = any ：表示只要有键值对匹配就能接受到消息</span><br><span class="line">消息头交换机，如下图所示：</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420156-98a6b621-2b38-4b60-a6bf-91a5de07480e.png#averageHue=%23fdf3f2&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u17ba6b1d&amp;originHeight=225&amp;originWidth=587&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u2c67e31b-0cec-47bb-86d8-01d37832700&amp;title=)</span><br><span class="line">以上就是 RabbitMQ 常见的四种交换机模式。</span><br><span class="line"></span><br><span class="line">#### RabbitMQ Fanout 发布订阅</span><br><span class="line"></span><br><span class="line">生产者发送一条消息，经过交换机转发到多个不同的队列，多个不同的队列就多个不同的消费者。</span><br><span class="line"></span><br><span class="line">原理：</span><br><span class="line"></span><br><span class="line">1.        需要创建两个队列，每个队列对应一个消费者；</span><br><span class="line">2.        队列需要绑定我们交换机</span><br><span class="line">3.        生产者投递消息到交换机中，交换机在将消息分配给两个队列中都存放起来；</span><br><span class="line">4.        消费者从队列中获取这个消息。</span><br><span class="line"></span><br><span class="line">##### 生产者代码</span><br><span class="line"></span><br><span class="line">| ```</span><br><span class="line">import com.mayikt.rabbitmq.RabbitMQConnection;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">public class ProducerFanout &#123;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义交换机的名称</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">         //  创建Connection</span><br><span class="line"></span><br><span class="line">         Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line"></span><br><span class="line">         // 创建Channel</span><br><span class="line"></span><br><span class="line">         Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">         // 通道关联交换机</span><br><span class="line"></span><br><span class="line">         channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;, true);</span><br><span class="line"></span><br><span class="line">         String msg = &quot;每特教育6666&quot;;</span><br><span class="line"></span><br><span class="line">         channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, msg.getBytes());</span><br><span class="line"></span><br><span class="line">         channel.close();</span><br><span class="line"></span><br><span class="line">         connection.close();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 消费者代码</span><br><span class="line">###### 邮件消费者</span><br><span class="line">| ```</span><br><span class="line">import com.mayikt.rabbitmq.RabbitMQConnection;</span><br><span class="line"></span><br><span class="line">   import com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   import java.io.IOException;</span><br><span class="line"></span><br><span class="line">   import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public class MailConsumer &#123;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义邮件队列</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String QUEUE_NAME = &quot;fanout_email_queue&quot;;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义交换机的名称</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">         System.out.println(&quot;邮件消费者...&quot;);</span><br><span class="line"></span><br><span class="line">         // 创建我们的连接</span><br><span class="line"></span><br><span class="line">         Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line"></span><br><span class="line">         // 创建我们通道</span><br><span class="line"></span><br><span class="line">         final Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">         // 关联队列消费者关联队列</span><br><span class="line"></span><br><span class="line">         channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">         DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line">             @Override</span><br><span class="line"></span><br><span class="line">             public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">                 String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">                 System.out.println(&quot;邮件消费者获取消息:&quot; + msg);</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         // 开始监听消息 自动签收</span><br><span class="line"></span><br><span class="line">         channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">###### 短信消费者</span><br><span class="line"></span><br><span class="line">| ```</span><br><span class="line">public class SmsConsumer &#123;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义短信队列</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String QUEUE_NAME = &quot;fanout_email_sms&quot;;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义交换机的名称</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">         System.out.println(&quot;短信消费者...&quot;);</span><br><span class="line"></span><br><span class="line">         // 创建我们的连接</span><br><span class="line"></span><br><span class="line">         Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line"></span><br><span class="line">         // 创建我们通道</span><br><span class="line"></span><br><span class="line">         final Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">         // 关联队列消费者关联队列</span><br><span class="line"></span><br><span class="line">         channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">         DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line">             @Override</span><br><span class="line"></span><br><span class="line">             public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">                 String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">                 System.out.println(&quot;短信消费者获取消息:&quot; + msg);</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         // 开始监听消息 自动签收</span><br><span class="line"></span><br><span class="line">         channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Direct路由模式</span><br><span class="line">当交换机类型为direct类型时，根据队列绑定的路由建转发到具体的队列中存放消息</span><br><span class="line"></span><br><span class="line">##### 生产者</span><br><span class="line">##### 消费者</span><br><span class="line"></span><br><span class="line">#### Topic主题模式</span><br><span class="line">当交换机类型为topic类型时，根据队列绑定的路由建模糊转发到具体的队列中存放。</span><br><span class="line">#号表示支持匹配多个词；</span><br><span class="line">*号表示只能匹配一个词</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## SpringBoot整合RabbitMQ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Maven依赖</span><br><span class="line">| ```java</span><br><span class="line">&lt;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- springboot-web组件 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 添加springboot对amqp的支持 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--fastjson --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.2.49&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">### 配置类</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.FanoutExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/7 15:59</span><br><span class="line">  \*/</span><br><span class="line">  @Component</span><br><span class="line">  public class RabbitMQConfig &#123;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 定义交换机</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          private String EXCHANGE_SPRINGBOOT_NAME = &quot;/SpringBoot&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 短信队列</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          private String FANOUT_SMS_QUEUE = &quot;fanout_sms_queue&quot;;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 邮件队列</span><br><span class="line">  \*/</span><br><span class="line">  private String FANOUT_EMAIL_QUEUE = &quot;fanout_email_queue&quot;;</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public Queue sms() &#123;</span><br><span class="line">              return new Queue(FANOUT_SMS_QUEUE);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 配置 emailQueue</span><br><span class="line">-</span><br><span class="line">- @return</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line"></span><br><span class="line">          public Queue emailQueue() &#123;</span><br><span class="line"></span><br><span class="line">              return new Queue(FANOUT_EMAIL_QUEUE);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 配置 fanoutExchange</span><br><span class="line">-</span><br><span class="line">- @return</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public FanoutExchange fanoutExchange() &#123;</span><br><span class="line">              return new FanoutExchange(EXCHANGE_SPRINGBOOT_NAME);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public Binding bindingSmsFanoutExchange(Queue sms,FanoutExchange fanoutExchange)&#123;</span><br><span class="line">              return BindingBuilder.bind(sms).to(fanoutExchange);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public Binding bindingEmailFanoutExchange(Queue emailQueue,FanoutExchange fanoutExchange)&#123;</span><br><span class="line">              return BindingBuilder.bind(emailQueue).to(fanoutExchange);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"> </span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 配置文件</span><br><span class="line">application.yml</span><br><span class="line"></span><br><span class="line">| ```yaml</span><br><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    ####连接地址</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line"></span><br><span class="line">    ####端口号</span><br><span class="line"></span><br><span class="line">    port: 5672</span><br><span class="line"></span><br><span class="line">    ####账号</span><br><span class="line"></span><br><span class="line">    username: guest</span><br><span class="line"></span><br><span class="line">    ####密码</span><br><span class="line"></span><br><span class="line">    password: guest</span><br><span class="line"></span><br><span class="line">    ### 地址</span><br><span class="line"></span><br><span class="line">    virtual-host: /Study</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual # 手动应答</span><br><span class="line">        prefetch: 1 #每次从队列中取一个,轮询分发，默认是公平分发</span><br><span class="line">        retry:</span><br><span class="line">          max-attempts: 5 # 重试次数</span><br><span class="line">          enabled: true # 开启重试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">### 生产者</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.controller;</span><br><span class="line"></span><br><span class="line">import com.example.demo1.eneity.MsgEneity;</span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/7 17:07</span><br><span class="line">  \*/</span><br><span class="line">  @RestController</span><br><span class="line">  public class fanoutController &#123;</span><br><span class="line"></span><br><span class="line">          @Resource</span><br><span class="line">          private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">          @RequestMapping(&quot;/sendMsg&quot;)</span><br><span class="line">          public String sendMsg()&#123;</span><br><span class="line">              MsgEneity msgEneity=new MsgEneity(UUID.randomUUID().toString(),&quot;1&quot;,</span><br><span class="line">                                                &quot;18790034997&quot;,&quot;1330105337@qq.com&quot;);</span><br><span class="line">              amqpTemplate.convertAndSend(&quot;/SpringBoot&quot;,&quot;&quot;,msgEneity);</span><br><span class="line">              return &quot;消息投递成功:&quot;+msgEneity;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 消费者</span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.Customer;</span><br><span class="line"></span><br><span class="line">import com.example.demo1.eneity.MsgEneity;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author:22603</span><br><span class="line">* @Date:2023/3/7 17:29</span><br><span class="line">*/</span><br><span class="line">@Slf4j</span><br><span class="line">    @Component</span><br><span class="line">    @RabbitListener(queues = &quot;fanout_email_queue&quot;)</span><br><span class="line">    public class EmailMsg &#123;</span><br><span class="line"></span><br><span class="line">        @RabbitHandler</span><br><span class="line">        public void process(MsgEneity msgEneity)&#123;</span><br><span class="line">            log.info(&quot;EmailMsg:&quot;+msgEneity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.Customer;</span><br><span class="line"></span><br><span class="line">import com.example.demo1.eneity.MsgEneity;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/7 17:29</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;fanout_sms_queue&quot;)</span><br><span class="line">public class MsgCustom &#123;</span><br><span class="line"></span><br><span class="line">        @RabbitHandler</span><br><span class="line">        public void process(MsgEneity msgEneity)&#123;</span><br><span class="line">            log.info(&quot;MsgCustom:&quot;+msgEneity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p> |<br>| —- |</p><h2 id="MQ异步发送短信发邮件"><a href="#MQ异步发送短信发邮件" class="headerlink" title="MQ异步发送短信发邮件"></a>MQ异步发送短信发邮件</h2><p>生产者：<br><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204154156-3fb8e446-6388-4ea7-86ca-f376ba44d973.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204154156-3fb8e446-6388-4ea7-86ca-f376ba44d973.java%22%2C%22name%22%3A%22RabbitMQConfig.java%22%2C%22size%22%3A1595%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u2a0fd865-e26e-486a-b61d-7a11a67e31f%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ucf5824fa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">RabbitMQConfig.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204154169-a08ad0ad-575b-444a-a583-71c42fb06aee.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204154169-a08ad0ad-575b-444a-a583-71c42fb06aee.java%22%2C%22name%22%3A%22UserController.java%22%2C%22size%22%3A935%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ue9765300-6f17-4cb5-b6c6-240b5644961%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u91e9ed2a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">UserController.java</a><br>消费者：<br><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204178501-023b7911-3796-4e3b-924c-4d42e44c5051.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204178501-023b7911-3796-4e3b-924c-4d42e44c5051.java%22%2C%22name%22%3A%22MsgCustom.java%22%2C%22size%22%3A584%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u8a49c97b-53f2-479f-9f89-32e02d987ce%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u98be3257%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">MsgCustom.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204178518-0b08e124-b312-47e6-a91b-87ed415a11b2.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204178518-0b08e124-b312-47e6-a91b-87ed415a11b2.java%22%2C%22name%22%3A%22EmailMsg.java%22%2C%22size%22%3A571%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u77599c3e-f1e0-4025-8f3a-3f4d1269c7b%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u36bcfe16%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">EmailMsg.java</a></p><h2 id="生产者如何获取消费结果"><a href="#生产者如何获取消费结果" class="headerlink" title="生产者如何获取消费结果"></a>生产者如何获取消费结果</h2><p><strong>1.     根据业务来定</strong><br><strong>消费者消费成功结果：</strong><br><strong>1.能够在数据库中插入一条数据</strong></p><p><strong>2.     Rocketmq 自带全局消息id，能够根据该全局消息获取消费结果</strong><br><strong>原理：生产者投递消息到mq服务器，mq服务器端在这时候返回一个全局的消息id，</strong><br><strong>当我们消费者消费该消息成功之后，消费者会给我们mq服务器端发送通知标记该消息</strong><br><strong>消费成功。</strong><br><strong>生产者获取到该消息全局id，每隔2s时间调用mq服务器端接口查询该消息是否</strong><br><strong>有被消费成功。</strong></p><ol><li>异步返回一个全局id，前端使用ajax定时主动查询；</li><li>在rocketmq中，自带根据消息id查询是否消费成功</li></ol><h2 id="RabbitMQ实战解决方案"><a href="#RabbitMQ实战解决方案" class="headerlink" title="RabbitMQ实战解决方案"></a>RabbitMQ实战解决方案</h2><h4 id="RabbitMQ死信队列"><a href="#RabbitMQ死信队列" class="headerlink" title="RabbitMQ死信队列"></a>RabbitMQ死信队列</h4><h4 id="死信队列产生的背景"><a href="#死信队列产生的背景" class="headerlink" title="死信队列产生的背景"></a>死信队列产生的背景</h4><p>RabbitMQ死信队列俗称，备胎队列；消息中间件因为某种原因拒收该消息后，可以转移到死信队列中存放，死信队列也可以有交换机和路由key等。</p><h4 id="产生死信队列的原因"><a href="#产生死信队列的原因" class="headerlink" title="产生死信队列的原因"></a>产生死信队列的原因</h4><ol><li>消息投递到MQ中存放 消息已经过期  消费者没有及时的获取到我们消息，消息如果存放到mq服务器中过期之后，会转移到备胎死信队列存放。</li><li>队列达到最大的长度 （队列容器已经满了）<br><strong>3.       </strong>消费者消费多次消息失败，就会转移存放到死信队列中<br>代码整合参考 mayikt-springboot-rabbitmq|#中order-dead-letter-queue项目</li></ol><h4 id="死信队列的架构原理"><a href="#死信队列的架构原理" class="headerlink" title="死信队列的架构原理"></a>死信队列的架构原理</h4><p>死信队列和普通队列区别不是很大<br>普通与死信队列都有自己独立的交换机和路由key、队列和消费者。<br>区别：<br>1.生产者投递消息先投递到我们普通交换机中，普通交换机在将该消息投到<br>普通队列中缓存起来，普通队列对应有自己独立普通消费者。<br>2.如果生产者投递消息到普通队列中，普通队列发现该消息一直没有被消费者消费<br>的情况下，在这时候会将该消息转移到死信（备胎）交换机中，死信（备胎）交换机<br>对应有自己独立的死信（备胎）队列对应独立死信（备胎）消费者。</p><h4 id="死信队列应用场景"><a href="#死信队列应用场景" class="headerlink" title="死信队列应用场景"></a>死信队列应用场景</h4><p>1.30分钟订单超时设计<br>A.    Redis过期key ：<br>B.    死信延迟队列实现：<br>采用死信队列，创建一个普通队列没有对应的消费者消费消息，在30分钟过后<br>就会将该消息转移到死信备胎消费者实现消费。<br>备胎死信消费者会根据该订单号码查询是否已经支付过，如果没有支付的情况下<br>则会开始回滚库存操作。</p><h3 id="RabbitMQ消息幂等问题"><a href="#RabbitMQ消息幂等问题" class="headerlink" title="RabbitMQ消息幂等问题"></a>RabbitMQ消息幂等问题</h3><h4 id="RabbitMQ消息自动重试机制"><a href="#RabbitMQ消息自动重试机制" class="headerlink" title="RabbitMQ消息自动重试机制"></a>RabbitMQ消息自动重试机制</h4><ol><li>当我们消费者处理执行我们业务代码的时候，如果抛出异常的情况下<br>在这时候mq会自动触发重试机制，默认的情况下rabbitmq是无限次数的重试。<br>需要人为指定重试次数限制问题</li><li>在什么情况下消费者需要实现重试策略？</li></ol><p>A.消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试？<br>该情况下需要实现重试策略，网络延迟只是暂时调用不通，重试多次有可能会调用通。<br>还有数据库连接超时，也可以进行重试，重试多次有可能会调用通。<br>B.<br>消费者获取消息后，因为代码问题抛出数据异常，是否需要重试？<br>该情况下是不需要实现重试策略，就算重试多次，最终还是失败的。<br>可以将日志存放起来，后期通过定时任务或者人工补偿形式。<br>如果是重试多次还是失败消息，需要重新发布消费者版本实现消费<br>可以使用死信队列</p><p>Mq在重试的过程中，有可能会引发消费者重复消费的问题。<br>Mq消费者需要解决幂等性问题<br>幂等性保证数据唯一</p><p>方式1：<br>生产者在投递消息的时候，生成一个全局唯一id，放在我们消息中。<br>Msg id=123456</p><p>Msg id=123456<br>Msg id=123456</p><p>消费者获取到我们该消息，可以根据该全局唯一id实现去重复。<br>全局唯一id 根据业务来定的  订单号码作为全局的id<br>实际上还是需要再db层面解决数据防重复。<br>业务逻辑是在做insert操作使用唯一主键约束<br>业务逻辑是在做update操作使用乐观锁</p><ol><li>当消费者业务逻辑代码中，抛出异常自动实现重试 （默认是无数次重试）</li><li>应该对RabbitMQ重试次数实现限制，比如最多重试5次，每次间隔3s；重试多次还是失败的情况下，存放到死信队列或者存放到数据库表中记录后期人工补偿<h4 id="如何合理选择消息重试"><a href="#如何合理选择消息重试" class="headerlink" title="如何合理选择消息重试"></a>如何合理选择消息重试</h4></li><li>消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试 ？</li><li>消费者获取消息后，应该代码问题抛出数据异常，是否需要重试？</li></ol><p>总结：如果消费者处理消息时，因为代码原因抛出异常是需要从新发布版本才能解决的，那么就不需要重试，重试也解决不了该问题的。存放到死信队列或者是数据库表记录、后期人工实现补偿。</p><h4 id="Rabbitmq如何开启重试策略"><a href="#Rabbitmq如何开启重试策略" class="headerlink" title="Rabbitmq如何开启重试策略"></a>Rabbitmq如何开启重试策略</h4><p>| <strong>spring</strong>:<br>  <strong>rabbitmq</strong>:<br>    <em>####连接地址</em>    <em><strong>host</strong>: 127.0.0.1    </em>####端口号<em>    </em><strong>port</strong>: 5672<br>    <em>####账号</em>    <em><strong>username</strong>: guest    </em>####密码<em>    </em><strong>password</strong>: guest<br>    <em>### 地址</em>    <em><strong>virtual-host</strong>: /meite_rabbitmq<br>    <strong>listener</strong>:<br>      <strong>simple</strong>:<br>        <strong>retry</strong>:          </em>####开启消费者（程序出现异常的情况下会）进行重试<em>          </em><strong>enabled</strong>: <strong>true          </strong><em>####最大重试次数</em>          <em><strong>max-attempts</strong>: 5          </em>####重试间隔次数<em>          </em><strong>initial-interval</strong>: 3000<br> |<br>| —- |</p><h4 id="消费者重试过程中，如何避免幂等性问题"><a href="#消费者重试过程中，如何避免幂等性问题" class="headerlink" title="消费者重试过程中，如何避免幂等性问题"></a>消费者重试过程中，如何避免幂等性问题</h4><p><strong>重试的过程中，为了避免业务逻辑重复执行，建议提前全局id提前查询，如果存在</strong><br><strong>的情况下，就无需再继续做该流程。</strong><br><strong>重试的次数最好有一定间隔次数，在数据库底层层面保证数据唯一性，比如加上唯一id。</strong></p><h4 id="SpringBoot开启消MQ架构设计原理"><a href="#SpringBoot开启消MQ架构设计原理" class="headerlink" title="SpringBoot开启消MQ架构设计原理"></a>SpringBoot开启消MQ架构设计原理</h4><p>什么是消息中间件<br>消息中间件基于队列模型实现异步/同步传输数据<br>作用：可以实现支撑高并发、异步解耦、流量削峰、降低耦合度。<br>传统的http请求存在那些缺点</p><p>1.Http请求基于请求与响应的模型，在高并发的情况下，客户端发送大量的请求达到<br>服务器端有可能会导致我们服务器端处理请求堆积。<br>2.Tomcat服务器处理每个请求都有自己独立的线程，如果超过最大线程数会将该请求缓存到队列中，如果请求堆积过多的情况下，有可能会导致tomcat服务器崩溃的问题。<br>所以一般都会在nginx入口实现限流，整合服务保护框架。</p><ol><li>http请求处理业务逻辑如果比较耗时的情况下，容易造成客户端一直等待，阻塞等待<br>过程中会导致客户端超时发生重试策略，有可能会引发幂等性问题。</li></ol><p>注意事项：接口是为http协议的情况下，最好不要处理比较耗时的业务逻辑，耗时的业务逻辑应该单独交给多线程或者是mq处理。</p><p>Mq应用场景有那些</p><ol><li>异步发送短信</li><li>异步发送新人优惠券</li><li>处理一些比较耗时的操作</li><li>异步发送短信</li><li>异步发送优惠券</li><li>比较耗时操作</li></ol><p>为什么需要使用mq<br>可以实现支撑高并发、异步解耦、流量削峰、降低耦合度。</p><p>同步发送http请求</p><p>客户端发送请求到达服务器端，服务器端实现会员注册业务逻辑，<br>1.insertMember() —插入会员数据  1s<br>2.sendSms()——发送登陆短信提醒 3s<br>3.sendCoupons()——发送新人优惠券  3s<br>总共响应需要6s时间，可能会导致客户端阻塞6s时间，对用户体验<br>不是很好。</p><p>多线程与MQ方式实现异步？</p><p>互联网项目:<br>客户端 安卓/IOS</p><p>服务器端：php/java<br>最好使用mq实现异步</p><p>多线程处理业务逻辑</p><p>用户向数据库中插入一条数据之后，在单独开启一个线程异步发送短信和优惠操作。<br>客户端只需要等待1s时间<br>优点：适合于小项目 实现异步<br>缺点：有可能会消耗服务器cpu资源资源<br>Mq处理业务逻辑</p><p>先向数据库中插入一条会员数据，让后再向MQ中投递一个消息，MQ服务器端在将消息推送给消费者异步解耦处理发送短信和优惠券。<br>Mq与多线程之间区别</p><p>MQ可以实现异步/解耦/流量削峰问题；<br>多线程也可以实现异步，但是消耗到cpu资源，没有实现解耦。</p><p>Mq消息中间件名词</p><p>Producer 生产者：投递消息到MQ服务器端；<br>Consumer  消费者：从MQ服务器端获取消息处理业务逻辑；<br>Broker   MQ服务器端<br>Topic 主题：分类业务逻辑发送短信主题、发送优惠券主题<br>Queue 存放消息模型 队列 先进先出 后进后出原则 数组/链表<br>Message 生产者投递消息报文：json</p><p>主流mq区别对比比</p><p>特性    ActiveMQ    RabbitMQ    RocketMQ    kafka<br>开发语言    java    erlang    java    scala<br>单机吞吐量    万级    万级    10万级    10万级<br>时效性    ms级    us级    ms级    ms级以内<br>可用性    高（主从架构）    高（主从架构）    非常高（分布式架构）    非常高（分布式架构）<br>功能特性    成熟的产品，在很多公司得到应用；有较多的文档；各种协议支持较好    基于erlang开发，所以并发能力很强，性能极其好，延时很低管理界面较丰富    MQ功能比较完备，扩展性佳    只支持主要的MQ功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广。</p><p>Mq设计基础知识</p><p>多线程版本mq；<br>基于网络通讯版本mq netty实现</p><p>基于多线程队列简单实现mq<br>public class MayiktThreadMQ {<br>/**</p><ul><li>Broker<br>*/<br>private static LinkedBlockingDeque broker = new LinkedBlockingDeque();</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建生产者线程</span><br><span class="line">Thread producer = new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">while (true) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(1000);</span><br><span class="line">JSONObject data = new JSONObject();</span><br><span class="line">data.put(&quot;phone&quot;, &quot;18611111111&quot;);</span><br><span class="line">broker.offer(data);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &quot;生产者&quot;);</span><br><span class="line">    producer.start();</span><br><span class="line">    Thread consumer = new Thread(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    JSONObject data = broker.poll();</span><br><span class="line">                    if (data != null) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + &quot;,获取到数据:&quot; + data.toJSONString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &quot;消费者&quot;);</span><br><span class="line">    consumer.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>}</p><p>基于netty实现mq<br>消费者netty客户端与nettyServer端MQ服务器端保持长连接，MQ服务器端保存<br>消费者连接。<br>生产者netty客户端发送请求给nettyServer端MQ服务器端，MQ服务器端在将该<br>消息内容发送给消费者。</p><p>body:{“msg”:{“userId”:”123456”,”age”:”23”},”type”:”producer”，”topic”:””}</p><p>生产者投递消息给MQ服务器端，MQ服务器端需要缓存该消息<br>如果mq服务器端宕机之后，消息如何保证不丢失</p><ol><li>持久化机制<br>如果mq接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？<br>不会丢失，消息确认机制 必须要消费者消费该消息成功之后，在通知给mq服务器端<br>删除该消息。<br>Mq服务器端将该消息推送消费者：<br>消费者已经和mq服务器保持长连接。<br>消费者主动拉取消息：<br>消费者第一次刚启动的时候</li></ol><p>Mq如何实现抗高并发思想</p><p>Mq消费者根据自身能力情况 ，拉取mq服务器端消息消费。<br>默认的情况下是取出一条消息。</p><p>缺点：存在延迟的问题</p><p>需要考虑mq消费者提高速率的问题：</p><p>如何消费者提高速率：消费者实现集群、消费者批量获取消息即可。</p><p>Maven依赖</p><p>com.alibaba<br>fastjson<br>1.2.62</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.23.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.62&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.11&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>RabbitMQ<br>RabbitMQ基本介绍<br>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件），RabbitMQ服务器是用Erlang语言编写的。<br>RabitMQ官方网站:<br><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p>1.点对点(简单)的队列 2.工作(公平性)队列模式 3.发布订阅模式 4.路由模式 Routing 5.通配符模式 Topics<br>6.RPC<br><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a><br>RabbitMQ 环境的基本安装</p><p>1.下载并安装 erlang,下载地址：<a href="http://www.erlang.org/download">http://www.erlang.org/download</a> 2.配置 erlang 环境变量信息<br>新增环境变量 ERLANG_HOME=erlang 的安装地址<br>将%ERLANG_HOME%\bin 加入到 path 中 3.下载并安装 RabbitMQ，下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a><br>注意: RabbitMQ 它依赖于 Erlang,需要先安装 Erlang。<br><a href="https://www.rabbitmq.com/install-windows.html">https://www.rabbitmq.com/install-windows.html</a></p><p>Java<br>安装 RabbitMQ 环境步骤</p><p>配置 Erlang 环境变量：</p><p>如何启动 Rabbitmq</p><p>net start RabbitMQ</p><p>启动 Rabbitmq 常见问题<br>如果 rabbitmq 启动成功无法访问 管理平台页面</p><p>进入到 F:\path\rabbitmq\rabbitmq\rabbitmq_server-3.6.9\sbin&gt;<br>执行<br>rabbitmq-plugins enable rabbitmq_management<br>rabbitmqctl start_app</p><p>Rabbitmq 管理平台中心</p><p>RabbitMQ 管理平台地址 <a href="http://127.0.0.1:15672">http://127.0.0.1:15672</a><br>默认账号:guest/guest   用户可以自己创建新的账号</p><p>Virtual Hosts:<br>像 mysql 有数据库的概念并且可以指定用户对库和表等操作的权限。那 RabbitMQ 呢？<br>RabbitMQ 也有类似的权限管理。在 RabbitMQ 中可以虚拟消息服务器 VirtualHost，每<br>个 VirtualHost 相当月一个相对独立的 RabbitMQ 服务器，每个 VirtualHost 之间是相互<br>隔离的。exchange、queue、message 不能互通。</p><p>默认的端口 15672：rabbitmq 管理平台端口号<br>默认的端口 5672： rabbitmq 消息中间内部通讯的端口<br>默认的端口号 25672  rabbitmq 集群的端口号</p><p>RabbitMQ 常见名词<br>/Virtual Hosts—-分类<br>/队列 存放我们消息<br>Exchange 分派我们消息在那个队列存放起来 类似于 nginx</p><p>15672—-rabbitmq 控制台管理平台 http 协议<br>25672rabbitmq 集群通信端口号<br>Amqp 5672 rabbitmq 内部通信的一个端口号</p><p>RabbitMQ 创建账户<br>RabbitMQ 平台创建 Virtual Hosts<br>RabbitMQ 平台创建消息队列</p><p>快速入门 RabbitMQ 简单队列</p><p>首先需要再 RabbitMQ 平台创建 Virtual Hosts 和队列。<br>/meiteVirtualHosts<br>——订单队列<br>——支付队列</p><ol><li>在 RabbitMQ 平台创建一个队列；</li><li>在编写生产者代码</li><li>在编写消费者代码</li></ol><p>生产者<br>public class RabbitMQConnection {</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取连接</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static Connection getConnection() throws IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">    // 2.设置连接地址</span><br><span class="line">    connectionFactory.setHost(&quot;127.0.0.1&quot;);</span><br><span class="line">    // 3.设置端口号:</span><br><span class="line">    connectionFactory.setPort(5672);</span><br><span class="line">    // 4.设置账号和密码</span><br><span class="line">    connectionFactory.setUsername(&quot;yushengjun&quot;);</span><br><span class="line">    connectionFactory.setPassword(&quot;123456&quot;);</span><br><span class="line">    // 5.设置VirtualHost</span><br><span class="line">    connectionFactory.setVirtualHost(&quot;/mayikt&quot;);</span><br><span class="line">    return connectionFactory.newConnection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>public class Producer {<br>private static final String QUEUE_NAME = “mayikt”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    Connection connection = RabitMQConnection.getConnection();</span><br><span class="line">    // 2.设置通道</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    // 3.设置消息</span><br><span class="line">    String msg = &quot;每特教育第六期平均就业薪资破3万&quot;;</span><br><span class="line">    System.out.println(&quot;msg:&quot; + msg);</span><br><span class="line">    channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, msg.getBytes());</span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>Maven 依赖</p><p>com.rabbitmq<br>amqp-client<br>3.6.5</p><p>消费者</p><p>public class Consumer {<br>private static final String QUEUE_NAME = “mayikt”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    Connection connection = RabitMQConnection.getConnection();</span><br><span class="line">    // 2.设置通道</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;消费者获取消息:&quot; + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 3.监听队列</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>RabbitMQ 如何保证消息不丢失</p><p>Mq 如何保证消息不丢失：</p><ol><li>生产者角色<br>确保生产者投递消息到 MQ 服务器端成功。<br>Ack 消息确认机制<br>同步或者异步的形式<br>方式 1：Confirms<br>方式 2：事务消息</li><li>消费者角色<br>在 rabbitmq 情况下：<br>必须要将消息消费成功之后，才会将该消息从 mq 服务器端中移除。<br>在 kafka 中的情况下：<br>不管是消费成功还是消费失败，该消息都不会立即从 mq 服务器端移除。</li><li>Mq 服务器端 在默认的情况下 都会对队列中的消息实现持久化<br>持久化硬盘。</li><li>使用消息确认机制+持久技术<br>A.消费者确认收到消息机制<br>channel.basicConsume(QUEUE_NAME, false, defaultConsumer);<br>注：第二个参数值为 false 代表关闭 RabbitMQ 的自动应答机制，改为手动应答。<br>在处理完消息时，返回应答状态，true 表示为自动应答模式。<br>channel.basicAck(envelope.getDeliveryTag(), false);<br>B.生产者确认投递消息成功 使用 Confirm 机制 或者事务消息</li></ol><p>Confirm 机制 同步或者是异步的形式</p><p>2.RabbitMQ 默认创建是持久化的</p><p>代码中设置 durable 为 true</p><p>参数名称详解：<br>durable 是否持久化 durable 为持久化、 Transient 不持久化<br>autoDelete 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过 RabbitMQ Management，查看某个队列的消费者数量，当 consumers = 0 时队列就会自动删除 2. 使用 rabbitmq 事务消息；<br>channel.txSelect();<br>channel.basicPublish(“”, QUEUE_NAME, null, msg.getBytes());<br>//            int i = 1 / 0;<br>channel.txCommit();</p><p>相关核心代码<br>生产者<br>public class Producer {<br>private static final String QUEUE_NAME = “mayikt-queue”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">    //1.创建一个新连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    //2.设置channel</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    //3.发送消息</span><br><span class="line">    String msg = &quot;每特教育6666&quot;;</span><br></pre></td></tr></table></figure><p>channel.confirmSelect();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, msg.getBytes());</span><br><span class="line">    boolean result = channel.waitForConfirms();</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        System.out.println(&quot;消息投递成功&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        System.out.println(&quot;消息投递失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>消费者<br>public class Consumer {<br>private static final String QUEUE_NAME = “mayikt-queue”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException, IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 2.设置通道</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;消费者获取消息:&quot; + msg);</span><br><span class="line">            // 消费者完成 消费该消息</span><br><span class="line">            channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 3.监听队列</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, false, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>RabbitMQ 五种消息模式</p><p>RabitMQ 工作队列<br>默认的传统队列是为均摊消费，存在不公平性；如果每个消费者速度不一样的情况下，均摊消费是不公平的，应该是能者多劳。</p><p>采用工作队列<br>在通道中只需要设置 basicQos 为 1 即可，表示 MQ 服务器每次只会给消费者推送 1 条消息必须手动 ack 确认之后才会继续发送。<br>channel.basicQos(1);<br>RabbitMQ 交换机类型</p><p>Direct exchange（直连交换机）<br>Fanout exchange（扇型交换机）<br>Topic exchange（主题交换机）<br>Headers exchange（头交换机）<br>/Virtual Hosts—-区分不同的团队<br>——队列 存放消息<br>——交换机 路由消息存放在那个队列中 类似于 nginx<br>—-路由 key 分发规则</p><p>RabbitMQ Fanout 发布订阅<br>生产者发送一条消息，经过交换机转发到多个不同的队列，多个不同的队列就多个不同的消费者。</p><p>原理：</p><ol><li>需要创建两个队列 ，每个队列对应一个消费者；</li><li>队列需要绑定我们交换机</li><li>生产者投递消息到交换机中，交换机在将消息分配给两个队列中都存放起来；</li><li>消费者从队列中获取这个消息。</li></ol><p>生产者代码<br>import com.mayikt.rabbitmq.RabbitMQConnection;<br>import com.rabbitmq.client.Channel;<br>import com.rabbitmq.client.Connection;</p><p>import java.io.IOException;<br>import java.util.concurrent.TimeoutException;</p><p>public class ProducerFanout {</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 定义交换机的名称</span><br><span class="line"> */</span><br><span class="line">private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    //  创建Connection</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 创建Channel</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    // 通道关联交换机</span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;, true);</span><br><span class="line">    String msg = &quot;每特教育6666&quot;;</span><br><span class="line">    channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, msg.getBytes());</span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>消费者代码<br>邮件消费者<br>import com.mayikt.rabbitmq.RabbitMQConnection;<br>import com.rabbitmq.client.*;</p><p>import java.io.IOException;<br>import java.util.concurrent.TimeoutException;</p><p>public class MailConsumer {<br>/**</p><ul><li>定义邮件队列<br>*/<br>private static final String QUEUE_NAME = “fanout_email_queue”;<br>/**</li><li>定义交换机的名称<br>*/<br>private static final String EXCHANGE_NAME = “fanout_exchange”;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    System.out.println(&quot;邮件消费者...&quot;);</span><br><span class="line">    // 创建我们的连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 创建我们通道</span><br><span class="line">    final Channel channel = connection.createChannel();</span><br><span class="line">    // 关联队列消费者关联队列</span><br><span class="line">    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;邮件消费者获取消息:&quot; + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 开始监听消息 自动签收</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>短信消费者</p><p>public class SmsConsumer {<br>/**</p><ul><li>定义短信队列<br>*/<br>private static final String QUEUE_NAME = “fanout_email_sms”;<br>/**</li><li>定义交换机的名称<br>*/<br>private static final String EXCHANGE_NAME = “fanout_exchange”;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    System.out.println(&quot;短信消费者...&quot;);</span><br><span class="line">    // 创建我们的连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 创建我们通道</span><br><span class="line">    final Channel channel = connection.createChannel();</span><br><span class="line">    // 关联队列消费者关联队列</span><br><span class="line">    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;短信消费者获取消息:&quot; + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 开始监听消息 自动签收</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>Direct 路由模式<br>当交换机类型为 direct 类型时，根据队列绑定的路由建转发到具体的队列中存放消息</p><p>生产者<br>消费者</p><p>Topic 主题模式<br>当交换机类型为 topic 类型时，根据队列绑定的路由建模糊转发到具体的队列中存放。 #号表示支持匹配多个词； *号表示只能匹配一个词</p><p>SpringBoot 整合 RabbitMQ</p><p>Maven 依赖</p><p>org.springframework.boot<br>spring-boot-starter-parent<br>2.0.0.RELEASE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- springboot-web组件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 添加springboot对amqp的支持 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--fastjson --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.49&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置类</p><p>import org.springframework.amqp.core.Binding;<br>import org.springframework.amqp.core.BindingBuilder;<br>import org.springframework.amqp.core.FanoutExchange;<br>import org.springframework.amqp.core.Queue;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.stereotype.Component;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> RabbitMQConfig</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><a href="/Version">@Version </a> V1.0<br><strong>/<br><a href="/Component">@Component </a><br>public class RabbitMQConfig {<br>/</strong><ul><li>定义交换机<br>*/<br>private String EXCHANGE_SPRINGBOOT_NAME = “/mayikt_ex”;</li></ul></li></ul><p>/**</p><ul><li>短信队列<br>*/<br>private String FANOUT_SMS_QUEUE = “fanout_sms_queue”;<br>/**</li><li>邮件队列<br>*/<br>private String FANOUT_EMAIL_QUEUE = “fanout_email_queue”;</li></ul><p>/**</p><ul><li><p>配置 smsQueue<br>-</p></li><li><p><a href="/return">@return </a><br>*/<br><a href="/Bean">@Bean </a><br>public Queue smsQueue() {<br>return new Queue(FANOUT_SMS_QUEUE);<br>}</p></li></ul><p>/**</p><ul><li><p>配置 emailQueue<br>-</p></li><li><p><a href="/return">@return </a><br>*/<br><a href="/Bean">@Bean </a><br>public Queue emailQueue() {<br>return new Queue(FANOUT_EMAIL_QUEUE);<br>}</p></li></ul><p>/**</p><ul><li><p>配置 fanoutExchange<br>-</p></li><li><p><a href="/return">@return </a><br>*/<br><a href="/Bean">@Bean </a><br>public FanoutExchange fanoutExchange() {<br>return new FanoutExchange(EXCHANGE_SPRINGBOOT_NAME);<br>}</p></li></ul><p>// 绑定交换机 sms<br><a href="/Bean">@Bean </a>public Binding bindingSmsFanoutExchange(Queue smsQueue, FanoutExchange fanoutExchange) {<br>return BindingBuilder.bind(smsQueue).to(fanoutExchange);<br>}<br>// 绑定交换机 email<br><a href="/Bean">@Bean </a>public Binding bindingEmailFanoutExchange(Queue emailQueue, FanoutExchange fanoutExchange) {<br>return BindingBuilder.bind(emailQueue).to(fanoutExchange);<br>}<br>}</p><p>配置文件<br>application.yml<br>spring:<br>rabbitmq: ####连接地址<br>host: 127.0.0.1 ####端口号<br>port: 5672 ####账号<br>username: guest ####密码<br>password: guest</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>virtual-host: /meiteVirtualHosts</p><p>生产者<br>import org.springframework.amqp.core.AmqpTemplate;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> FanoutProducer</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><p><a href="/Version">@Version </a> V1.0<br><strong>/<br><a href="/RestController">@RestController </a><br>public class FanoutProducer {<br><a href="/Autowired">@Autowired </a><br>private AmqpTemplate amqpTemplate;<br>/</strong></p><ul><li><p>发送消息<br>-</p></li><li><p><a href="/return">@return </a><br><em>/<br>@RequestMapping(“/sendMsg”)<br>public String sendMsg(String msg) {<br>/** - 1.交换机名称 - 2.路由 key 名称 - 3.发送内容</em>/<br>amqpTemplate.convertAndSend(“/mayikt_ex”, “”, msg);<br>return “success”;<br>}<br>}</p></li></ul></li></ul><p>消费者</p><p>import lombok.extern.slf4j.Slf4j;<br>import org.springframework.amqp.rabbit.annotation.RabbitHandler;<br>import org.springframework.amqp.rabbit.annotation.RabbitListener;<br>import org.springframework.stereotype.Component;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> FanoutEmailConsumer</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><a href="/Version">@Version </a> V1.0<br>**/<br><a href="/Slf4j">@Slf4j </a><br><a href="/Component">@Component </a><br><a href="/RabbitListener(queues">@RabbitListener(queues </a> = “fanout_email_queue”)<br>public class FanoutEmailConsumer {<br><a href="/RabbitHandler">@RabbitHandler </a><br>public void process(String msg) {<br>log.info(“&gt;&gt;邮件消费者消息 msg:{}&lt;&lt;”, msg);<br>}<br>}</li></ul><p>import lombok.extern.slf4j.Slf4j;<br>import org.springframework.amqp.rabbit.annotation.RabbitHandler;<br>import org.springframework.amqp.rabbit.annotation.RabbitListener;<br>import org.springframework.stereotype.Component;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> fanout_sms_queue</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><a href="/Version">@Version </a> V1.0<br>**/<br><a href="/Slf4j">@Slf4j </a><br><a href="/Component">@Component </a><br><a href="/RabbitListener(queues">@RabbitListener(queues </a> = “fanout_sms_queue”)<br>public class FanoutSmsConsumer {<br><a href="/RabbitHandler">@RabbitHandler </a><br>public void process(String msg) {<br>log.info(“&gt;&gt;短信消费者消息 msg:{}&lt;&lt;”, msg);<br>}<br>}</li></ul><p>生产者如何获取消费结果</p><ol><li>根据业务来定<br>消费者消费成功结果： 1.能够在数据库中插入一条数据</li><li>Rocketmq 自带全局消息 id，能够根据该全局消息获取消费结果<br>原理： 生产者投递消息到 mq 服务器，mq 服务器端在这时候返回一个全局的消息 id，<br>当我们消费者消费该消息成功之后，消费者会给我们 mq 服务器端发送通知标记该消息<br>消费成功。<br>生产者获取到该消息全局 id，每隔 2s 时间调用 mq 服务器端接口查询该消息是否<br>有被消费成功。</li><li>异步返回一个全局 id，前端使用 ajax 定时主动查询；</li><li>在 rocketmq 中，自带根据消息 id 查询是否消费成功</li></ol><p>RabbitMQ 实战解决方案</p><p>RabbitMQ 死信队列<br>死信队列产生的背景<br>RabbitMQ 死信队列俗称，备胎队列；消息中间件因为某种原因拒收该消息后，可以转移到死信队列中存放，死信队列也可以有交换机和路由 key 等。<br>产生死信队列的原因</p><ol><li>消息投递到 MQ 中存放 消息已经过期   消费者没有及时的获取到我们消息，消息如果存放到 mq 服务器中过期之后，会转移到备胎死信队列存放。</li><li>队列达到最大的长度 （队列容器已经满了）</li><li>消费者消费多次消息失败，就会转移存放到死信队列中</li></ol><p>代码整合 参考 mayikt-springboot-rabbitmq|#中 order-dead-letter-queue 项目</p><p>死信队列的架构原理<br>死信队列和普通队列区别不是很大<br>普通与死信队列都有自己独立的交换机和路由 key、队列和消费者。<br>区别： 1.生产者投递消息先投递到我们普通交换机中，普通交换机在将该消息投到<br>普通队列中缓存起来，普通队列对应有自己独立普通消费者。 2.如果生产者投递消息到普通队列中，普通队列发现该消息一直没有被消费者消费<br>的情况下，在这时候会将该消息转移到死信（备胎）交换机中，死信（备胎）交换机<br>对应有自己独立的 死信（备胎）队列 对应独立死信（备胎）消费者。</p><p>死信队列应用场景<br>1.30 分钟订单超时设计<br>A. Redis 过期 key ：<br>B. 死信延迟队列实现：<br>采用死信队列，创建一个普通队列没有对应的消费者消费消息，在 30 分钟过后<br>就会将该消息转移到死信备胎消费者实现消费。<br>备胎死信消费者会根据该订单号码查询是否已经支付过，如果没有支付的情况下<br>则会开始回滚库存操作。</p><p>RabbitMQ 消息幂等问题<br>RabbitMQ 消息自动重试机制</p><ol><li>当我们消费者处理执行我们业务代码的时候，如果抛出异常的情况下<br>在这时候 mq 会自动触发重试机制，默认的情况下 rabbitmq 是无限次数的重试。<br>需要人为指定重试次数限制问题</li><li>在什么情况下消费者需要实现重试策略？</li></ol><p>A.消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试？<br>该情况下需要实现重试策略，网络延迟只是暂时调用不通，重试多次有可能会调用通。<br>数据库连接超时，可以进行重试，重试多次有可能会调用通。<br>B.<br>消费者获取消息后，因为代码问题抛出数据异常，是否需要重试？<br>该情况下是不需要实现重试策略，就算重试多次，最终还是失败的。<br>可以将日志存放起来，后期通过定时任务或者人工补偿形式。<br>如果是重试多次还是失败消息，需要重新发布消费者版本实现消费<br>可以使用死信队列</p><p>Mq 在重试的过程中，有可能会引发消费者重复消费的问题。<br>Mq 消费者需要解决 幂等性问题<br>幂等性 保证数据唯一</p><p>方式 1：<br>生产者在投递消息的时候，生成一个全局唯一 id，放在我们消息中。<br>Msg id=123456</p><p>Msg id=123456<br>Msg id=123456</p><p>消费者获取到我们该消息，可以根据该全局唯一 id 实现去重复。<br>全局唯一 id 根据业务来定的   订单号码作为全局的 id<br>实际上还是需要再 db 层面解决数据防重复。<br>业务逻辑是在做 insert 操作 使用唯一主键约束<br>业务逻辑是在做 update 操作 使用乐观锁</p><ol><li>当消费者业务逻辑代码中，抛出异常自动实现重试 （默认是无数次重试）</li><li>应该对 RabbitMQ 重试次数实现限制，比如最多重试 5 次，每次间隔 3s；重试多次还是失败的情况下，存放到死信队列或者存放到数据库表中记录后期人工补偿<br>如何合理选择消息重试</li><li>消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试 ？</li><li>消费者获取消息后，应该代码问题抛出数据异常，是否需要重试？</li></ol><p>总结：如果消费者处理消息时，因为代码原因抛出异常是需要从新发布版本才能解决的，那么就不需要重试，重试也解决不了该问题的。存放到死信队列或者是数据库表记录、后期人工实现补偿。</p><p>Rabbitmq 如何开启重试策略</p><p>spring:<br>rabbitmq: ####连接地址<br>host: 127.0.0.1 ####端口号<br>port: 5672 ####账号<br>username: guest ####密码<br>password: guest</p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p>virtual-host: /meite_rabbitmq<br>listener:<br>simple:<br>retry: ####开启消费者（程序出现异常的情况下会）进行重试<br>enabled: true ####最大重试次数<br>max-attempts: 5 ####重试间隔次数<br>initial-interval: 3000</p><p>消费者重试过程中，如何避免幂等性问题</p><p>重试的过程中，为了避免业务逻辑重复执行，建议提前全局 id 提前查询，如果存在<br>的情况下，就无需再继续做该流程。<br>重试的次数最好有一定间隔次数，在数据库底层层面保证数据唯一性，比如加上唯一 id。</p><p>SpringBoot 开启消息确认机制</p><p>配置文件新增<br>spring:<br>rabbitmq: ####连接地址<br>host: 127.0.0.1 ####端口号<br>port: 5672 ####账号<br>username: guest ####密码<br>password: guest</p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p>virtual-host: /meiteVirtualHosts<br>listener:<br>simple:<br>retry: ####开启消费者（程序出现异常的情况下会）进行重试<br>enabled: true ####最大重试次数<br>max-attempts: 5 ####重试间隔次数<br>initial-interval: 3000<br>acknowledge-mode: manual<br>datasource:<br>url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8<br>username: root<br>password: root<br>driver-class-name: com.mysql.jdbc.Driver</p><p>消费者 ack 代码</p><p><a href="/Slf4j">@Slf4j </a><br><a href="/Component">@Component </a><br><a href="/RabbitListener(queues">@RabbitListener(queues </a> = “fanout_order_queue”)<br>public class FanoutOrderConsumer {</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private OrderManager orderManager;</span><br><span class="line">@Autowired</span><br><span class="line">private OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">@RabbitHandler</span><br><span class="line">public void process(OrderEntity orderEntity, Message message, Channel channel) throws IOException &#123;</span><br></pre></td></tr></table></figure><p>//        try {<br>log.info(“&gt;&gt;orderEntity:{}&lt;&lt;”, orderEntity.toString());<br>String orderId = orderEntity.getOrderId();<br>if (StringUtils.isEmpty(orderId)) {<br>log.error(“&gt;&gt;orderId is null&lt;&lt;”);<br>return;<br>}<br>OrderEntity dbOrderEntity = orderMapper.getOrder(orderId);<br>if (dbOrderEntity != null) {<br>log.info(“&gt;&gt;该订单已经被消费过，无需重复消费!&lt;&lt;”);<br>// 无需继续重试<br>channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);<br>return;<br>}<br>int result = orderManager.addOrder(orderEntity);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log.info(&quot;&gt;&gt;插入数据库中数据成功&lt;&lt;&quot;);</span><br><span class="line">if (result &gt;= 0) &#123;</span><br><span class="line">    // 开启消息确认机制</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//        int i = 1 / 0;<br>//        } catch (Exception e) {<br>//            // 将失败的消息记录下来，后期采用人工补偿的形式<br>//        }<br>}<br>}</p><h4 id="息确认机制"><a href="#息确认机制" class="headerlink" title="息确认机制"></a>息确认机制</h4><h5 id="配置文件新增"><a href="#配置文件新增" class="headerlink" title="配置文件新增"></a>配置文件新增</h5><p>| ```xml<br>spring:</p><p>rabbitmq:</p><h4 id="连接地址"><a href="#连接地址" class="headerlink" title="连接地址"></a>连接地址</h4><p>host: 127.0.0.1</p><pre><code>####端口号port: 5672####账号username: guest####密码password: guest### 地址virtual-host: /meiteVirtualHostslistener:</code></pre><p>simple:</p><p>retry:</p><h4 id="开启消费者（程序出现异常的情况下会）进行重试"><a href="#开启消费者（程序出现异常的情况下会）进行重试" class="headerlink" title="开启消费者（程序出现异常的情况下会）进行重试"></a>开启消费者（程序出现异常的情况下会）进行重试</h4><p>enabled: true</p><pre><code>####最大重试次数max-attempts: 5####重试间隔次数initial-interval: 3000acknowledge-mode: manualdatasource:url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</code></pre><p>username: root</p><pre><code>password: rootdriver-class-name: com.mysql.jdbc.Driver</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line">##### 消费者ack代码</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">@Slf4j</span><br><span class="line"></span><br><span class="line">    @Component</span><br><span class="line"></span><br><span class="line">    @RabbitListener(queues = &quot;fanout_order_queue&quot;)</span><br><span class="line"></span><br><span class="line">    public class FanoutOrderConsumer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line"></span><br><span class="line">        private OrderManager orderManager;</span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line"></span><br><span class="line">        private OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @RabbitHandler</span><br><span class="line"></span><br><span class="line">        public void process(OrderEntity orderEntity, Message message, Channel channel) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">            //        try &#123;</span><br><span class="line"></span><br><span class="line">            log.info(&quot;&gt;&gt;orderEntity:&#123;&#125;&lt;&lt;&quot;, orderEntity.toString());</span><br><span class="line"></span><br><span class="line">            String orderId = orderEntity.getOrderId();</span><br><span class="line"></span><br><span class="line">            if (StringUtils.isEmpty(orderId)) &#123;</span><br><span class="line"></span><br><span class="line">                log.error(&quot;&gt;&gt;orderId is null&lt;&lt;&quot;);</span><br><span class="line"></span><br><span class="line">                return;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            OrderEntity dbOrderEntity = orderMapper.getOrder(orderId);</span><br><span class="line"></span><br><span class="line">            if (dbOrderEntity != null) &#123;</span><br><span class="line"></span><br><span class="line">                log.info(&quot;&gt;&gt;该订单已经被消费过，无需重复消费!&lt;&lt;&quot;);</span><br><span class="line"></span><br><span class="line">                // 无需继续重试</span><br><span class="line"></span><br><span class="line">                channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span><br><span class="line"></span><br><span class="line">                return;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int result = orderManager.addOrder(orderEntity);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            log.info(&quot;&gt;&gt;插入数据库中数据成功&lt;&lt;&quot;);</span><br><span class="line"></span><br><span class="line">            if (result &gt;= 0) &#123;</span><br><span class="line"></span><br><span class="line">                // 开启消息确认机制</span><br><span class="line"></span><br><span class="line">                channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //        int i = 1 / 0;</span><br><span class="line"></span><br><span class="line">            //        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            //            // 将失败的消息记录下来，后期采用人工补偿的形式</span><br><span class="line"></span><br><span class="line">            //        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>| |<br>| |</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目部署方法</title>
      <link href="/2023/07/24/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2023/07/24/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="项目部署方法"><a href="#项目部署方法" class="headerlink" title="项目部署方法"></a>项目部署方法</h1><p>参考文章：<a href="https://www.bilibili.com/read/cv16179200/">如何部署网站？来比比谁的方法多 - 哔哩哔哩 (bilibili.com)</a></p><h3 id="1-原始部署"><a href="#1-原始部署" class="headerlink" title="1.原始部署"></a>1.原始部署</h3><p>什么都自己装</p><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>需要web服务器：nginx，apche，tomcat</p><p>安装nginx服务器：</p><p>1.用系统自带的软件包管理器快速安装，比如centos的yum</p><p>2.自己到官网安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -o nginx-1.21.6.tar.gz http://nginx.org/download/nginx-1.21.6.tar.gz</span><br><span class="line">tar -zxvf nginx-1.21.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.21.6</span><br><span class="line">   37  2022-04-17 23:30:09 yum install pcre pcre-devel -y</span><br><span class="line">   39  2022-04-17 23:30:59 yum install openssl openssl-devel -y</span><br><span class="line">   41  2022-04-17 23:31:57 ./configure --with-http_ssl_module --with-http_v2_module --with-stream</span><br><span class="line">   42  2022-04-17 23:32:13 make</span><br><span class="line">   43  2022-04-17 23:32:54 make install</span><br><span class="line">   48  2022-04-17 23:33:40 <span class="built_in">ls</span> /usr/local/nginx/sbin/nginx</span><br><span class="line">   vim /etc/profile</span><br><span class="line">  在最后一行添加：<span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/nginx/sbin</span><br><span class="line">  nginx</span><br><span class="line">  netstat -ntlp 查看启动情况</span><br></pre></td></tr></table></figure><p>注意nginx权限</p><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p> java，maven</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk*</span><br><span class="line">curl -o apache-maven-3.8.5-bin.tar.gz https://dlcdn.apache.org/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz</span><br><span class="line">git <span class="built_in">clone</span> xxx 下载代码</span><br><span class="line">打包构建，跳过测试</span><br><span class="line">mvn package -DskipTests</span><br><span class="line">java -jar ./user-center-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><h3 id="2-宝塔LInux部署"><a href="#2-宝塔LInux部署" class="headerlink" title="2.宝塔LInux部署"></a>2.宝塔LInux部署</h3><p>Linux运维面板</p><p>官方教程: <a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p><p>方便管理服务器，方便安装软件</p><h3 id="前端托管"><a href="#前端托管" class="headerlink" title="前端托管"></a>前端托管</h3><p>前端腾讯云web应用托管（比容器化更傻瓜式，不需要自己构建应用的命令没就能启动前端项目）</p><p>腾讯云:<a href="https://console.cloud.tencent.com/webify/new">https://console.cloud.tencent.com/webify/new</a></p><p>​     缺点：需要将代码放到代码托管平台上</p><p>​     优势：不用写命令，代码更新时自动构建</p><h3 id="3-Docker部署"><a href="#3-Docker部署" class="headerlink" title="3.Docker部署"></a>3.Docker部署</h3><p>  docker是容器，可以将项目的环境（比如java，nginx）和项目代码一起打包成镜像，所有同学都能下载镜像，更容易分发和移植。</p><p>   再启动项目时，不需要敲一大堆命令，而是直接下载镜像，启动镜像就可以了。</p><p>docker可以理解为软件安装包</p><p>Docker安装：<a href="https://www.docker.com/get-started/或者宝塔安装">https://www.docker.com/get-started/或者宝塔安装</a></p><p>Dockerfile用于构建Docker镜像的方法</p><p>Dockerfile一般情况下不需要自己从零自己写，建议去github，gitee等代码托管平台参考同类项目（比如springboot）</p><p>Dockerfile编写;</p><p>​    ●FROM 依赖的基础镜像<br>   ●WORKDIR 工作目录<br>   ●COPY 从本机复制文件<br>   ●RUN 执行命令<br>  ●CMD / ENTRYPOINT（附加额外参数）指定运行容器时默认执行的命令</p><p>根据Dockerfile构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment"># 后端</span></span><br><span class="line">docker build -t user-center-backend:v0.0.1 .</span><br><span class="line">\<span class="comment"># 前端</span></span><br><span class="line">docker build -t user-center-front:v0.0.1 .</span><br></pre></td></tr></table></figure><p>虚拟化</p><p>1.端口映射：把本机资源（实际访问地址）和容器内部的资源（应用启动端口）进行关联</p><p>2.目录映射：把本机的端口和容器应用的端口进行关联</p><p>进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i -t  fee2bbb7c9ee /bin/bash</span><br></pre></td></tr></table></figure><p>查看进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f [container-id]</span><br></pre></td></tr></table></figure><p>杀死容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><p>强制删除镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f</span><br></pre></td></tr></table></figure><h3 id="Docker平台部署"><a href="#Docker平台部署" class="headerlink" title="Docker平台部署"></a>Docker平台部署</h3><p>1.云服务商的容器平台（腾讯云、阿里云）<br>2面向某个领域的容器平台（前端 / 后端微信云托管）要花钱！</p><p>容器平台的好处：</p><p>  1.不用输命令来操作，更方便省事<br>  2.不用在控制台操作，更傻瓜式、更简单<br>  3.大厂运维，比自己运维更省心<br>  4.额外的能力，比如监控、告警、其他（存储、负载均衡、自动扩缩容、流水线）</p><p>​    爽就完事了！！！</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>前端项目访问流程：用户输入网址 =&gt; 域名解析服务器（把网址解析为 ip 地址 / 交给其他的域名解析服务） =&gt; 服务器 =&gt;（防火墙）=&gt; nginx 接收请求，找到对应的文件，返回文件给前端 =&gt; 前端加载文件到浏览器中（js、css） =&gt; 渲染页面</p><p>后端项目访问流程：用户输入网址 =&gt; 域名解析服务器 =&gt; 服务器 =&gt; nginx 接收请求 =&gt; 后端项目（比如 8080端口）</p><p>nginx 反向代理的作用：替服务器接收请求，转发请求</p><h3 id="跨域解决问题"><a href="#跨域解决问题" class="headerlink" title="跨域解决问题"></a>跨域解决问题</h3><p>浏览器为了用户的安全，仅允许向 同域名、同端口 的服务器发送请求。</p><p>如何解决跨域？</p><p>最直接的方式：把域名、端口改成相同的</p><h3 id="添加跨域头"><a href="#添加跨域头" class="headerlink" title="添加跨域头"></a>添加跨域头</h3><p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p><h5 id="1-网关支持（Nginx）"><a href="#1-网关支持（Nginx）" class="headerlink" title="1.网关支持（Nginx）"></a>1.网关支持（Nginx）</h5><p># 跨域配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /api/ &#123;</span><br><span class="line">​    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/api/;</span><br><span class="line">​    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">​    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">​    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">​    <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">​    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">​        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">​        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">​        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">​        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;</span>;</span><br><span class="line">​        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line">​        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">​        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">​        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-修改后端服务"><a href="#2-修改后端服务" class="headerlink" title="2.修改后端服务"></a>2.修改后端服务</h5><p>1.配置@CrossOrigin注解</p><p>2.添加web全局请求拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfg</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">​    <span class="meta">@Override</span></span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">​        <span class="comment">//设置允许跨域的路径</span></span><br><span class="line">​        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">​                <span class="comment">//设置允许跨域请求的域名</span></span><br><span class="line">​                <span class="comment">//当**Credentials为true时，**Origin不能为星号，需为具体的ip地址【如果接口不带cookie,ip无需设成具体ip】</span></span><br><span class="line">​                .allowedOrigins(<span class="string">&quot;http://localhost:9527&quot;</span>, <span class="string">&quot;http://127.0.0.1:9527&quot;</span>, <span class="string">&quot;http://127.0.0.1:8082&quot;</span>, <span class="string">&quot;http://127.0.0.1:8083&quot;</span>)</span><br><span class="line">​                <span class="comment">//是否允许证书 不再默认开启</span></span><br><span class="line">​                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">​                <span class="comment">//设置允许的方法</span></span><br><span class="line">​                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">​                <span class="comment">//跨域允许时间</span></span><br><span class="line">​                .maxAge(<span class="number">3600</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.定义新的corsFilter Bean，参考：：<a href="https://www.jianshu.com/p/b02099a435bd">https://www.jianshu.com/p/b02099a435bd</a> </p>]]></content>
      
      
      <categories>
          
          <category> 项目部署方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块演示</title>
      <link href="/2023/07/24/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/redis/"/>
      <url>/2023/07/24/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/redis/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
