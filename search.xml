<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/09/18/java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%86%E5%A4%87/"/>
      <url>/2023/09/18/java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql优化"><a href="#Mysql优化" class="headerlink" title="Mysql优化"></a>Mysql优化</h1><p>1.索引</p><p><img src="https://huazi-1315721953.cos.ap-nanjing.myqcloud.com/blog-img/20230918170422.png" alt="">)</p><h1 id="Mysql事务的特性（ACID）"><a href="#Mysql事务的特性（ACID）" class="headerlink" title="Mysql事务的特性（ACID）"></a>Mysql事务的特性（ACID）</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915081839212.png" alt="image-20230915081839212"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915082236560.png" alt="image-20230915082236560"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915082259956.png" alt="image-20230915082259956"></p><h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915083713810.png" alt="image-20230915083713810"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915084238737.png" alt="image-20230915084238737"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915090940376.png" alt="image-20230915090940376"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915091924825.png" alt="image-20230915091924825"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915092045530.png" alt="image-20230915092045530"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915092523721.png" alt="image-20230915092523721"> </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915093019576.png" alt="image-20230915093019576"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915093118251.png" alt="image-20230915093118251"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915093227730.png" alt="image-20230915093227730"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915100632149.png" alt="image-20230915100632149"></p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915102053226.png" alt="image-20230915102053226"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915111627113.png" alt="image-20230915111627113"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915142031058.png" alt="image-20230915142031058"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915142048490.png" alt="image-20230915142048490"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230915150648925.png" alt="image-20230915150648925"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917134117531.png" alt="image-20230917134117531"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917134357054.png" alt="image-20230917134357054"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917134640087.png" alt="image-20230917134640087"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917134657214.png" alt="image-20230917134657214"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917134900588.png" alt="image-20230917134900588"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917135359329.png" alt="image-20230917135359329"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917135701749.png" alt="image-20230917135701749"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917135825890.png" alt="image-20230917135825890"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917142802206.png" alt="image-20230917142802206"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917143335713.png" alt="image-20230917143335713"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917144520416.png" alt="image-20230917144520416"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917145126953.png" alt="image-20230917145126953"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917145802456.png" alt="image-20230917145802456"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/18/hello-world/"/>
      <url>/2023/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试</title>
      <link href="/2023/07/24/%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%86%E5%A4%87/"/>
      <url>/2023/07/24/%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="项目面试题准备"><a href="#项目面试题准备" class="headerlink" title="项目面试题准备"></a>项目面试题准备</h1><h3 id="1-智能BI平台"><a href="#1-智能BI平台" class="headerlink" title="1.智能BI平台"></a>1.智能BI平台</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230917162755728.png" alt="image-20230917162755728"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块演示</title>
      <link href="/2023/07/24/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/redis/"/>
      <url>/2023/07/24/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/redis/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/07/24/RabbitMq/"/>
      <url>/2023/07/24/RabbitMq/</url>
      
        <content type="html"><![CDATA[<h1 id="MQ-架构设计原理"><a href="#MQ-架构设计原理" class="headerlink" title="MQ 架构设计原理"></a>MQ 架构设计原理</h1><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>存储消息的队列。<br>关键词：存储、队列、队列<br>存储:存储数据<br>消息：某种数据结构，比如字符串、对象、二进制数据、json 等等<br>队列：先进先出的数据结构</p><p>应用场景：在多个不同的系统、应用之间实现消息的传输，不需要考虑传输应用的编程语言、系统、框架等等。</p><p>具体实例：异步发送短信、异步发送优惠卷、处理比较耗时的操作</p><p>可以让 java 开发的应用发消息，让 php 开发的应用收消息，这样就不用把所有的代码写到一个项目中（应用解耦）。</p><h2 id="消息队列的模型"><a href="#消息队列的模型" class="headerlink" title="消息队列的模型"></a>消息队列的模型</h2><p>生产者：Producer，类比为快递员，发送消息的人（客户端）<br>消费者：Consumer，类比为取快递的人，接受读取消息的人（客户端）<br>消息：Message，类比为快递，就是生产者要传输给消费者的数据<br>消息队列：Queue</p><p>为什么不接传输，要用消息队列？生产者不用关心你的消费者要不要消费、什么时候消费，我只需要把东西给消息队列，我的工作就算完成了。<br>生产者和消费者实现了解耦，互不影响。</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/211I61aL8.jpg" alt="测试照片"></p><h2 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h2><ul><li>1）异步处理<br>生产者发送完消息可以去忙别的事情，消费者想什么时候去取都可以，不会阻塞</li><li>2）削峰填谷<br>先把用户请求放到消息队列中，消费者可以按照自己的需求慢慢去取<br>原本：12 点来了十万个请求，原本情况下，十万个请求都在系统内部处理，很快系统压力过大就好宕机<br>现在：把十万个请求放到消息队列中，处理系统可以以自己恒定的速率慢慢执行，保护系统、稳定处理</li><li>3）可持久性、可靠性<br>大多数消息队列系统提供持久化功能，确保即使在系统故障或重启后，消息不会丢失。这可以提高系统的可靠性，并确保消息的可靠传递。</li><li>4）可拓展性、灵活性<br>通过使用消息队列，可以轻松地添加新的组件或服务，而无需更改现有的系统架构。新的组件可以订阅感兴趣的消息，从而扩展系统的功能和业务流程。</li></ul><h2 id="分布式消息队列的优势"><a href="#分布式消息队列的优势" class="headerlink" title="分布式消息队列的优势"></a>分布式消息队列的优势</h2><p>1）数据持久化:可以把消息持久化到硬盘，服务器重启不会丢失数据<br>2）可扩展性：可以根据需求，随时增减节点，继续保持稳定的服务<br>3）应用解耦：可以连接各个不同的语言、框架开发的系统，让这些系统能够灵活传输读取数据</p><p>应用解耦的优点：</p><p>以前，把功能放到一个项目中，调用多个子功能时，要给环节出错，系统就整体出错<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920054171-7eb680e2-25da-4f1a-ac41-e576a332e534.png#averageHue=%23fefdfd&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=270&amp;id=u423efd77&amp;originHeight=338&amp;originWidth=924&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=17788&amp;status=done&amp;style=none&amp;taskId=uc6cc6d6f-10d0-4047-ad7c-48d86de67a7&amp;title=&amp;width=739.2" alt="2~F3M8$}8CT@H7VFWZ85NTU.png"></p><p>使用消息队列进行解耦：</p><ol><li>一个系统挂了，不影响另外的系统</li><li>系统挂了并恢复后，仍然可以取出消息，继续执行业务逻辑</li><li>只要发送消息到消息队列，就可以立即返回，不用同步调用所有的系统。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920168751-0ea0b35d-2dfe-4a33-9aa4-8cfdaa8cb5f0.png#averageHue=%23fdfdfc&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=326&amp;id=u1cbde273&amp;originHeight=407&amp;originWidth=914&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=28414&amp;status=done&amp;style=none&amp;taskId=ue3ab7742-2791-482c-9c93-3d6ee1af88a&amp;title=&amp;width=731.2" alt="CCDJO%40}E7191ZEDV5_3%9.png"><br>4）发布订阅<br>如果一个非常大的系统要给其他子系统发送通知，最简单直接的方式是大系统依次调用小系统<br>问题:</p><ol><li>每次发通知都要调用很多系统、很麻烦、很可能失败</li><li>新出现的项目（或者说大项目感知不到的项目）无法得到通知</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920548775-de4493f7-2ffe-4ee4-a977-a1e96b881002.png#averageHue=%23fefdfd&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=574&amp;id=ua58bdae9&amp;originHeight=717&amp;originWidth=931&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=42693&amp;status=done&amp;style=none&amp;taskId=u1a1a6f91-fb5a-445b-8eb2-ee471e0d3f1&amp;title=&amp;width=744.8" alt="ICBFGE74T~PTR3P]F@}XW5C.png"><br>解决方案：大的核心系统始终往一个地方发送消息，其它系统都去订阅这个消息队列（读取队列中的消息）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687920680994-9455d00a-fe1c-4b6c-a41b-7abe3df913ad.png#averageHue=%23fdfdfd&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=518&amp;id=ua45c28c1&amp;originHeight=647&amp;originWidth=815&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=39740&amp;status=done&amp;style=none&amp;taskId=ua11d7701-598c-4023-a44b-b7ea888bfaa&amp;title=&amp;width=652" alt="GM`9OT`H]T{$M%V}87(A(NO.png"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>耗时的场景（异步）</li><li>高并发场景（异步、削峰填谷）</li><li>分布式系统协作（跨团队、跨业务、应用解耦）</li></ol><p>比如 QQ 是一个系统，用 c++写的，微信用** <strong>java 写的</strong> **，qq 的消息可以通过消息队列传送给微信</p><ol><li>强稳定性的场景（金融业务、持久化、可靠性、削峰填谷）</li></ol><p>支付、转账</p><h2 id="消息队列的缺点"><a href="#消息队列的缺点" class="headerlink" title="消息队列的缺点"></a>消息队列的缺点</h2><p>要给系统引入额外的中间件，系统会更复杂、额外维护中间件、额外的费用（部署）成本<br>消息队列：消息丢失、顺序性、重复消费、数据的一致性（分布式系统就要考虑）</p><blockquote><p>也可以叫分布式场景下需要考虑的问题)</p></blockquote><h2 id="传统的-http-请求存在那些缺点"><a href="#传统的-http-请求存在那些缺点" class="headerlink" title="传统的 http 请求存在那些缺点"></a>传统的 http 请求存在那些缺点</h2><p>1.Http 请求基于请求与响应的模型，在高并发的情况下，客户端发送大量的请求达到<br>服务器端有可能会导致我们服务器端处理请求堆积。<br>2.Tomcat 服务器处理每个请求都有自己独立的线程，如果超过最大线程数会将该请求缓存到队列中，如果请求堆积过多的情况下，有可能会导致 tomcat 服务器崩溃的问题。<br>所以一般都会在 nginx 入口实现限流，整合服务保护框架。</p><ol><li>http请求处理业务逻辑如果比较耗时的情况下，容易造成客户端一直等待，阻塞等待<br>过程中会导致客户端超时发生重试策略，有可能会引发幂等性问题。</li></ol><p>注意事项：接口是为 http 协议的情况下，最好不要处理比较耗时的业务逻辑，耗时的业务逻辑应该单独交给多线程或者是 mq 处理。</p><h3 id="同步发送-http-请求"><a href="#同步发送-http-请求" class="headerlink" title="同步发送 http 请求"></a>同步发送 http 请求</h3><p>客户端发送请求到达服务器端，服务器端实现会员注册业务逻辑，<br>1.insertMember() —插入会员数据 1s<br>2.sendSms()——发送登陆短信提醒 3s<br>3.sendCoupons()——发送新人优惠券 3s<br>总共响应需要 6s 时间，可能会导致客户端阻塞 6s 时间，对用户体验<br>不是很好。</p><p>多线程与 MQ 方式实现异步？</p><p>互联网项目:<br>客户端安卓/IOS</p><p>服务器端：php/java<br>最好使用 mq 实现异步</p><h3 id="多线程处理业务逻辑"><a href="#多线程处理业务逻辑" class="headerlink" title="多线程处理业务逻辑"></a>多线程处理业务逻辑</h3><p>用户向数据库中插入一条数据之后，在单独开启一个线程异步发送短信和优惠操作。<br>客户端只需要等待 1s 时间<br>优点：适合于小项目实现异步<br>缺点：有可能会消耗服务器 cpu 资源资源</p><h3 id="Mq-处理业务逻辑"><a href="#Mq-处理业务逻辑" class="headerlink" title="Mq 处理业务逻辑"></a>Mq 处理业务逻辑</h3><p>先向数据库中插入一条会员数据，让后再向 MQ 中投递一个消息，MQ 服务器端在将消息推送给消费者异步解耦处理发送短信和优惠券。</p><h2 id="Mq-与多线程之间区别"><a href="#Mq-与多线程之间区别" class="headerlink" title="Mq 与多线程之间区别"></a>Mq 与多线程之间区别</h2><p>多线程也可以实现异步，但是消耗到 cpu 资源，没有实现解耦。<br>多线程异步去实现发送短信以及领取优惠卷会导致过度消耗 cpu 资源，cpu 上下文竞争关系，可能导致会员服务以及其他服务降低，因此多线程适合于小项目；而 MQ 可以实现异步/解耦/流量削峰问题，因此适合于大型项目。</p><h2 id="Mq-消息中间件名词"><a href="#Mq-消息中间件名词" class="headerlink" title="Mq 消息中间件名词"></a>Mq 消息中间件名词</h2><p>Producer 生产者：投递消息到 MQ 服务器端；<br>Consumer 消费者：从 MQ 服务器端获取消息处理业务逻辑；<br>Broker MQ 服务器端<br>Topic 主题：分类业务逻辑发送短信主题、发送优惠券主题<br>Queue 存放消息模型队列先进先出后进后出原则数组/链表<br>Message 生产者投递消息报文：json</p><h2 id="主流-mq-区别对比"><a href="#主流-mq-区别对比" class="headerlink" title="主流 mq 区别对比"></a>主流 mq 区别对比</h2><p><strong>技术对比</strong><br>技术选型指标：<br>● 吞吐量：IO、并发<br>● 时效性：类似延迟，消息的发送、到达时间<br>● 可用性：系统可用的比率（比如 1 年 365 天宕机 1s，可用率大概 X 个 9）<br>● 可靠性：消息不丢失（比如不丢失订单）、功能正常完成</p><div class="table-container"><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10 万级</td><td>10 万级</td></tr><tr><td>时效性</td><td>ms 级</td><td>us 级</td><td>ms 级</td><td>ms 级以内</td></tr><tr><td>可用性</td><td>高（主从架构）</td><td>高（主从架构）</td><td>非常高（分布式架构）</td><td>非常高（分布式架构）</td></tr><tr><td>功能特性</td><td>成熟的产品，在很多公司得到应用；有较多的文档；各种协议支持较好</td><td>基于 erlang 开发，所以并发能力很强，性能极其好，延时很低管理界面较丰富</td><td>MQ 功能比较完备，扩展性佳</td><td>只支持主要的 MQ 功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广。</td></tr><tr><td>应用场景</td><td>中小型企业、项目</td><td>适合绝大多数分布式的应用，这也是先学他的原因</td><td>适用于 <strong>大规模</strong>处理数据的场景，比如构建日志收集系统、实时数据流传输、事件流收集传输</td><td>适用于 <strong>金融 </strong>、电商等对可靠性要求较高的场景，适合 <strong>大规模 </strong>的消息处理。</td></tr></tbody></table></div><h2 id="RabbitMQ-入门实战"><a href="#RabbitMQ-入门实战" class="headerlink" title="RabbitMQ 入门实战"></a>RabbitMQ 入门实战</h2><p>特点：生态好，好学习、易于理解，时效性强，支持很多不同语言的客户端，扩展性、可用性都很不错。<br>学习性价比非常高的消息队列，适用于绝大多数中小规模分布式系统。</p><p>官方网站：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>AMQP 协议：<a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html">https://www.rabbitmq.com/tutorials/amqp-concepts.html</a><br>AMQP 是一种消息传递协议，让符合要求的客户端应用程序能够与符合要求的消息中间件进行通信<br>高级消息队列协议（Advanced Message Queue Protocol）</p><p>生产者：发消息到某个交换机<br>消费者：从某个队列中取消息<br>交换机（Exchange）：负责把消息 转发 到对应的队列<br>队列（Queue）：存储消息的<br>路由（Routes）：转发，就是怎么把消息从一个地方转到另一个地方（比如从生产者转发到某个队列）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686835103366-bdb220cd-b177-4f41-982d-8451e5f6ebfe.png?x-oss-process=image%2Fresize%2Cw_700%2Climit_0#averageHue=%23f9f2ee&amp;from=url&amp;id=Evvsx&amp;originHeight=328&amp;originWidth=700&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>访问：<a href="http://localhost:15672/#/">http://localhost:15672</a>，用户名密码都是 guest：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836097799-5f76d0cf-466c-41f7-9400-c7b31513ce48.png#averageHue=%23f9f9f8&amp;from=url&amp;id=QDJgA&amp;originHeight=1105&amp;originWidth=1848&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>如果想要在远程服务器安装访问 rabbitmq 管理面板，你要自己创建一个管理员账号，不能用默认的 guest，否则会被拦截（官方出于安全考虑）。</p><p>如果被拦截，可以自己创建管理员用户：<br>参考文档的 Adding a User：<a href="https://www.rabbitmq.com/access-control.html">https://www.rabbitmq.com/access-control.html</a></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836238966-daf0d8b4-ae0f-4451-bbb5-89693eb064b8.png?x-oss-process=image%2Fresize%2Cw_831%2Climit_0#averageHue=%23767574&amp;from=url&amp;id=WIQkF&amp;originHeight=493&amp;originWidth=831&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>rabbitmq 端口占用：<br>5672：程序连接的端口<br>15672：webUI</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836349584-8ec4cef9-d45a-4d02-8417-6739b7624a8e.png?x-oss-process=image%2Fresize%2Cw_825%2Climit_0#averageHue=%23f3f1ef&amp;from=url&amp;id=C7jLp&amp;originHeight=534&amp;originWidth=825&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2><p>快速入门</p><p>MQ 官方教程：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p>单向发送<br>Hello World<br>文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html">https://www.rabbitmq.com/tutorials/tutorial-one-java.html</a></p><p>一个生产者给一个队列发消息，一个消费者从这个队列取消息。1 对 1。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686836521822-053f7420-498d-4539-9721-ae0bc6e5b012.png#averageHue=%23f4dbd6&amp;from=url&amp;id=IdUgY&amp;originHeight=244&amp;originWidth=1027&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>引入消息队列 java 客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        创建工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="comment">//        创建连接</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"><span class="comment">//             创建Channel 频道（可以理解为客户端）</span></span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line"><span class="comment">//            创建队列</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="comment">//            发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687944063317-2996bc0e-6d7b-4a2c-9206-0412a962d979.png#averageHue=%23ebeae9&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=110&amp;id=u022db1f9&amp;originHeight=110&amp;originWidth=1060&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=11950&amp;status=done&amp;style=none&amp;taskId=u00abceb2-39c1-4871-b373-bfcef629f89&amp;title=&amp;width=1060" alt="1687944045356.png"></p><p>消费者代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recv</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        创建工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"><span class="comment">//        创建Channel 频道（可以理解为客户端）</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"><span class="comment">//      注意这里的配置要和创建的配置一样</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"><span class="comment">//        定义如何处理消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//        消费消息，会持续阻塞</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Channel 频道：理解为操作消息队列的 client（比如 jdbcClient、redisClient），提供了和消息队列 server 建立通信的传输方法（为了复用连接，提高传输效率）。程序通过 channel 操作 rabbitmq（收发消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Queue.DeclareOk <span class="title function_">queueDeclare</span><span class="params">(String queue, <span class="type">boolean</span> durable, <span class="type">boolean</span> exclusive,</span></span><br><span class="line"><span class="params">                                    <span class="type">boolean</span> autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br></pre></td></tr></table></figure><p>创建消息队列：<br>参数：<br>queue：消息队列名称（注意，同名称的消息队列，只能用同样的参数创建一次）<br>durable：消息队列重启后，消息是否丢失<br>exclusive：是否只允许当前这个创建消息队列的连接操作消息队列<br>autoDelete：没有人 用队列后，是否要删除队列</p><p>消费示例：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687944852554-33ad90fd-9830-4f78-ae56-cf709a0b3666.png#averageHue=%23f0efef&amp;clientId=u8e95eaa8-7658-4&amp;from=paste&amp;height=368&amp;id=u3ec41d11&amp;originHeight=368&amp;originWidth=1231&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=23173&amp;status=done&amp;style=none&amp;taskId=u72ecb416-9b43-4f58-930d-62be4f5106b&amp;title=&amp;width=1231" alt="1687944821005.png"></p><p><strong>多消费者</strong><br>官方教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-two-java.html">https://www.rabbitmq.com/tutorials/tutorial-two-java.html</a><br>场景：多个机器同时去接受并处理任务（尤其是每个机器的处理能力有限）<br>一个生产者给一个队列发消息，<strong>多个消费者 </strong>从这个队列取消息。1 对多。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686837446793-34600b8b-907d-4c0a-8200-f077b3175c32.png#averageHue=%23f7e5e1&amp;from=url&amp;id=xMCTx&amp;originHeight=294&amp;originWidth=870&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>1）队列持久化<br>durable 参数设置为 true，服务器重启后队列不丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>2）消息持久化<br>指定 MessageProperties.PERSISTENT_TEXT_PLAIN 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">        MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">        message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p>生产者代码：<br>使用 Scanner 接受用户输入，便于发送多条消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">                    MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">                    message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制单个消费者的处理任务积压数：<br>每个消费者最多同时处理 1 个任务</p><p>消息确认机制：<br>为了保证消息成功被消费（快递成功被取走），rabbitmq 提供了消息确认机制，当消费者接收到消息后，比如要给一个反馈：<br>●ack：消费成功<br>●nack：消费失败<br>●reject：拒绝<br>如果告诉 rabbitmq 服务器消费成功，服务器才会放心地移除消息。<br>支持配置 autoack，会自动执行 ack 命令，接收到消息立刻就成功了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p><strong>autoack 为 true 表示自动确认，建议 autoack 改为 false，根据实际情况，去手动确认。</strong><br>指定确认某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>默认情况第二个参数为 false，表示只确认当前消息，改为 true 则自动确认在此之前所有未确认的消息<br>指定拒绝某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第三个参数 false 是指 requeue 参数，用于指定当消息被拒绝（nack）后是否重新将消息放回队列。在该代码中，设置为 false 表示不将消息重新放回队列，即消息被拒绝后将被丢弃。</p><p>消费者代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"><span class="comment">//        for循环模拟创建两个消费者</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"><span class="comment">//          指定每个消费者最多同时消费的消息数</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 定义了如何处理消息</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理工作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + <span class="string">&quot;编号:&quot;</span> + finalI + <span class="string">&quot;:&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="comment">// 消费消息后手动确认消息</span></span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 停 20 秒，模拟机器处理能力有限</span></span><br><span class="line">                    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//消费异常，</span></span><br><span class="line">                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 开启消费监听</span></span><br><span class="line">            channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 个小技巧： 1. 使用 Scanner 接受用户输入，便于快速发送多条消息 2. 使用 for 循环创建多个消费者，便于快速验证队列模型工作机制</p><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p>一个生产者给 多个 队列发消息，1 个生产者对多个队列。<br>交换机的作用：提供消息转发功能，类似于网络路由器<br>要解决的问题：怎么把消息转发到不同的队列上，好让消费者从不同的队列消费。</p><p>绑定：交换机和队列关联起来，也可以叫路由，算是一个算法或转发策略<br>绑定代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;绑定规则&quot;</span>);</span><br></pre></td></tr></table></figure><p>教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html">https://www.rabbitmq.com/tutorials/tutorial-three-java.html</a></p><p>交换机有多种类别：fanout、direct, topic, headers</p><h4 id="Fanout-交换机"><a href="#Fanout-交换机" class="headerlink" title="Fanout 交换机"></a>Fanout 交换机</h4><p>扇出、广播<br>特点：消息会被转发到所有绑定到该交换机的队列<br>场景：很适用于发布订阅的场景。比如写日志，可以多个系统间共享</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1686839285368-841c3ded-965b-4ed7-8214-091ac7f2c922.png#averageHue=%23ecb9af&amp;from=url&amp;id=FQ8wi&amp;originHeight=247&amp;originWidth=745&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>示例场景：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687948681364-80cd61ee-59a9-439e-a383-1508632217a8.png#averageHue=%23fefefd&amp;clientId=u1d2592de-0cbf-4&amp;from=paste&amp;height=386&amp;id=u93f7459a&amp;originHeight=386&amp;originWidth=785&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22715&amp;status=done&amp;style=none&amp;taskId=uf5a03041-8aa6-4e4b-ba21-448e52f4d75&amp;title=&amp;width=785" alt="7K)]8JE8I`IBQ5$W$IS20R1.png"></p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        <span class="comment">// 创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：<br>注意：<br>1 消费者和生产者要绑定同一个交换机<br>2 要先有队列，才能绑定</p><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaozhang.QI_BI.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//        for循环模拟创建两个消费者</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">            <span class="comment">//          指定每个消费者最多同时消费的消息数</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 定义了如何处理消息</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理工作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + <span class="string">&quot;编号:&quot;</span> + finalI + <span class="string">&quot;:&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="comment">// 消费消息后手动确认消息</span></span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 停 20 秒，模拟机器处理能力有限</span></span><br><span class="line">                    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//消费异常，</span></span><br><span class="line">                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 开启消费监听</span></span><br><span class="line">            channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Direct-交换机"><a href="#Direct-交换机" class="headerlink" title="Direct 交换机"></a>Direct 交换机</h4><p>官方教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html">https://www.rabbitmq.com/tutorials/tutorial-four-java.html</a><br>绑定：可以让交换机和队列进行关联，可以指定让交互机把什么样的消息发送给哪个队列（类似于计算机网络中，两个路由器，或者网络设备相互连接，也可以理解为网线）<br>routingKey：路由键，控制消息要转发给哪个队列的（IP 地址）</p><p>特点：消息会根据路由键转发到指定的队列<br>场景：特定的消息只交给特定的系统（程序）来处理<br>绑定关系：完全匹配字符串</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687007686788-76df21d6-428d-4d2d-abb7-4da819faf775.png?x-oss-process=image%2Fresize%2Cw_408%2Climit_0#averageHue=%23150000&amp;from=url&amp;id=zHKr5&amp;originHeight=171&amp;originWidth=408&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>一个路由键可以给多个队列<br>交换机里存放着所有的路由键<br>比如发日志的场景<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687007976055-a38c33d2-490f-4582-b9ea-36b881c2101e.png?x-oss-process=image%2Fresize%2Cw_423%2Climit_0#averageHue=%23140000&amp;from=url&amp;id=Mjcsv&amp;originHeight=171&amp;originWidth=423&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>示例场景：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687955344132-80370d91-734f-4a15-b26c-fb1db9bf78a4.png#averageHue=%23fefdfd&amp;clientId=ucd6a0eb8-2a30-4&amp;from=paste&amp;height=379&amp;id=uf244fd0e&amp;originHeight=379&amp;originWidth=790&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23995&amp;status=done&amp;style=none&amp;taskId=u01e2c8e7-77d8-4da2-b389-25f312add09&amp;title=&amp;width=790" alt="7V`W[UCM7CDP0@(_G0MY2]B.png"></p><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;xiaoyu_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;xiaoyu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;xiaopi_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;xiaopi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaoyuDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaoyu] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaopiDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaopi] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, xiaoyuDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.basicConsume(queueName2, <span class="literal">true</span>, xiaopiDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing:&quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Topic-交换机"><a href="#Topic-交换机" class="headerlink" title="Topic 交换机"></a>Topic 交换机</h4><p>官方教程：<a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html">https://www.rabbitmq.com/tutorials/tutorial-five-java.html</a></p><p>特点：消息会根据模糊的路由键转发给指定的队列<br>场景：特定的一类消息可以交给特定的一类系统来处理<br>绑定关系：可以模糊匹配多个绑定</p><ul><li><ul><li>匹配一个单词，比如*.orange，那么 a.orange、b.orange 都能匹配</li></ul></li><li><h1 id="：匹配-0-个或者多个单词，比如-a-，那么-a-a、a-b、a-a-a-都能匹配"><a href="#：匹配-0-个或者多个单词，比如-a-，那么-a-a、a-b、a-a-a-都能匹配" class="headerlink" title="：匹配 0 个或者多个单词，比如 a.#，那么 a.a、a.b、a.a.a 都能匹配"></a>：匹配 0 个或者多个单词，比如 a.#，那么 a.a、a.b、a.a.a 都能匹配</h1></li></ul><p>注意：这里的匹配和 mysql 的 like 的%不一样，只能按照单词来匹配，每个‘.’分隔单词，如果是’#.’，其实可以忽略，匹配 0 个也 ok<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687009111794-08bd54bb-234d-4280-a604-852e2b01840c.png#averageHue=%23f8ecea&amp;from=url&amp;id=XUeMy&amp;originHeight=622&amp;originWidth=1479&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>应用场景：<br>老板要下发一个任务，让多个组来处理<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687955866934-02d32e8e-3ff3-41b9-811d-eb0d2ea4d925.png#averageHue=%23fefdfd&amp;clientId=ucd6a0eb8-2a30-4&amp;from=paste&amp;height=622&amp;id=u16876434&amp;originHeight=622&amp;originWidth=760&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36630&amp;status=done&amp;style=none&amp;taskId=uc426ae3a-ba42-45aa-a211-c9b9675ca44&amp;title=&amp;width=760" alt="M01_LSD@J@6GLGNYQ1@C_1W.png"></p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing:&quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;frontend_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;#.前端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;backend_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;#.后端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName3</span> <span class="operator">=</span> <span class="string">&quot;product_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName3, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName3, EXCHANGE_NAME, <span class="string">&quot;#.产品.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">xiaoaDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [xiaoa] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">xiaobDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [xiaob] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">xiaocDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [xiaoc] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      channel.basicConsume(queueName, <span class="literal">true</span>, xiaoaDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">      channel.basicConsume(queueName2, <span class="literal">true</span>, xiaobDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">      channel.basicConsume(queueName3, <span class="literal">true</span>, xiaocDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Headers-交换机"><a href="#Headers-交换机" class="headerlink" title="Headers 交换机"></a>Headers 交换机</h4><p>类似主题和直接交换机，可以根据 headers 中的内容来指定发送到哪个队列<br>由于性能差、比较复杂，一般不推荐使用。</p><blockquote><p>AI 学习连环问：是什么？有什么用？什么场景下会用？有什么优缺点？有没有示例代码？</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687011466810-28a7cdc5-e42c-45f5-aa8c-2635c41e0a89.png?x-oss-process=image%2Fresize%2Cw_400%2Climit_0#averageHue=%23ccdbf3&amp;from=url&amp;id=Og523&amp;originHeight=1235&amp;originWidth=400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>支持用消息队列来模拟 RPC 的调用，但是一般没必要，直接用 Dubbo、GRPC 等 RPC 框架就好了。</p><h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><h4 id="消息过期机制"><a href="#消息过期机制" class="headerlink" title="消息过期机制"></a>消息过期机制</h4><p>官方文档：<a href="https://www.rabbitmq.com/ttl.html">https://www.rabbitmq.com/ttl.html</a></p><p>可以给每个消息指定一个有效期，一段时间内未处理，就过期<br>示例场景：消费者（库存系统）挂了，一个订单 15 分钟还没有被库存清理，这个订单其实已经失效了，哪怕库存系统恢复，也不扣库存<br>试用场景：<br>订单系统中顾客下单、模拟延迟队列的实现（区分 vip 和普通用户）、专门让某个程序处理过期的请求<br>1）给队列中的所有消息指定过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列，指定消息过期参数</span></span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="comment">// args 指定参数</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687012172430-53fff46b-6383-40c9-99ae-bc96667f71d4.png#averageHue=%23ebe6e5&amp;from=url&amp;id=mBQr0&amp;originHeight=468&amp;originWidth=1010&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>如果在过期时间内，还没有消费者取消息，消息才会过期。<br>注意，如果消息已经收到，但是没有确认，是不会过期的</p><blockquote><p>如果消息处于代消费状态并且过期时间到达后，消息将被标记为过期。但是，如果消息已经处于正在处理的过程，即将过期，消息仍然会被正常处理，不会过期</p></blockquote><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，指定消息过期参数</span></span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// args 指定参数</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义了如何处理消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费消息，会持续阻塞</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="comment">//        factory.setUsername();</span></span><br><span class="line"><span class="comment">//        factory.setPassword();</span></span><br><span class="line"><span class="comment">//        factory.setPort();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立连接、创建频道</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2)给某条消息指定过期时间<br>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给消息指定过期时间</span></span><br><span class="line">AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">        .expiration(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">channel.basicPublish(<span class="string">&quot;my-exchange&quot;</span>, <span class="string">&quot;routing-key&quot;</span>, properties, message.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="comment">//        factory.setUsername();</span></span><br><span class="line"><span class="comment">//        factory.setPassword();</span></span><br><span class="line"><span class="comment">//        factory.setPort();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立连接、创建频道</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给消息指定过期时间</span></span><br><span class="line">            AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">                    .expiration(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;my-exchange&quot;</span>, <span class="string">&quot;routing-key&quot;</span>, properties, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h4><p>官方文档：<a href="https://www.rabbitmq.com/confirms.html">https://www.rabbitmq.com/confirms.html</a><br>为了保证消息被正常消费（快递员取走），rabbitMQ 提供了消息确认机制，当消费者收到消息后，要给一个反馈。</p><ul><li>ack 消费成功</li><li>nack 消费失败</li><li>reject 拒绝</li></ul><p>如果告诉 rabbitMQ 服务器消费成功，服务器才会放心移除消息。<br>支持配置 autoack，会自动执行 ack 命令，接到消息立刻就成功了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><p>一般情况，建议 autoack 改为 false，根据实际情况，去手动确认。</p><p>指定确认某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), );</span><br></pre></td></tr></table></figure><p>第二个参数 multiple 批量确认；是指是否要一次性确认所有的历史消息直到当前这一条</p><p>拒绝某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第二个 参数指示是否拒绝多条消息，如果为 true，则拒绝所有比给定 deliveryTag 小或等于它的未确认消息；如果为 false，则只拒绝指定 deliveryTag 的消息。<br>第三个参数表示是否重新入队，用于重试</p><p>与之相反，<strong>basicReject</strong> 方法是另一种拒绝消息的方式，它只能拒绝单个消息，并且只能将消息重新放回队列。如果您需要拒绝多条消息或选择性地将消息重新放回队列或直接丢弃，那么您应该使用 basicNack 方法。</p><h4 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h4><p>官方文档：<a href="https://www.rabbitmq.com/dlx.html">https://www.rabbitmq.com/dlx.html</a></p><p>为了保证消息的可靠性，比如每条消息都成功消费，需要提供一个容错机制，即：失败的消息怎么处理？<br>死信：过期的消息、拒收的消息、消息队列满了、处理失败的消息的统称<br>死信队列：专门处理死信的队列（注意，它就是一个普通队列，只不过是专门用来处理死信的，你甚至可以理解这个队列的名称叫 “死信队列”）</p><p>死信交换机：专门给死信队列转发消息的交换机（注意，它就是一个普通交换机，只不过是专门给死信队列发消息而已，理解为这个交换机的名称就叫 “死信交换机”）。也存在路由绑定<br>死信可以通过死信交换机绑定到死信队列。</p><p>示例场景：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/33551426/1687964741456-462605ae-f905-4fbd-ae73-327dbf685706.png#averageHue=%23fdfdfd&amp;clientId=ucd6a0eb8-2a30-4&amp;from=paste&amp;height=597&amp;id=ud8150982&amp;originHeight=597&amp;originWidth=748&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27670&amp;status=done&amp;style=none&amp;taskId=uc97c0fe9-d41a-4306-af3f-9c3cb997c43&amp;title=&amp;width=748" alt="1687964679285.png"></p><p>实现：<br>1）创建死信交换机和死信队列，并且绑定关系<br><img src="https://cdn.nlark.com/yuque/0/2023/png/398476/1687013888188-1bde4fc6-73c1-48e4-b9c8-7d231a4e5a72.png#averageHue=%23fcfcfc&amp;from=url&amp;id=ZZ33J&amp;originHeight=418&amp;originWidth=772&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>2）给失败之后需要容错处理的队列绑定死信交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定死信队列参数</span></span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 要绑定到哪个交换机</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line"><span class="comment">// 指定死信要转发到哪个死信队列</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;xiaodog_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;xiaodog&quot;</span>);</span><br></pre></td></tr></table></figure><p>3）可以给要容错的队列指定死信之后的转发规则，死信应该再转发到哪个死信队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定死信要转发到哪个死信队列</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;waibao&quot;</span>);</span><br></pre></td></tr></table></figure><p>4）可以通过程序来读取死信队列中的消息，从而进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;laoban_dlx_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">channel.queueBind(queueName, DEAD_EXCHANGE_NAME, <span class="string">&quot;laoban&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;waibao_dlx_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">channel.queueBind(queueName2, DEAD_EXCHANGE_NAME, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">laobanDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 拒绝消息</span></span><br><span class="line">    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [laoban] Received &#x27;&quot;</span> +</span><br><span class="line">            delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">waibaoDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 拒绝消息</span></span><br><span class="line">    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [waibao] Received &#x27;&quot;</span> +</span><br><span class="line">            delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">channel.basicConsume(queueName, <span class="literal">false</span>, laobanDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line">channel.basicConsume(queueName2, <span class="literal">false</span>, waibaoDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx-direct-exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct2-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">// 声明死信交换机</span></span><br><span class="line">            channel.exchangeDeclare(DEAD_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;laoban_dlx_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName, DEAD_EXCHANGE_NAME, <span class="string">&quot;laoban&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;waibao_dlx_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName2, DEAD_EXCHANGE_NAME, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">laobanDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot; [laoban] Received &#x27;&quot;</span> +</span><br><span class="line">                        delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">waibaoDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot; [waibao] Received &#x27;&quot;</span> +</span><br><span class="line">                        delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(queueName, <span class="literal">false</span>, laobanDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            channel.basicConsume(queueName2, <span class="literal">false</span>, waibaoDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                channel.basicPublish(WORK_EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing:&quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx-direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct2-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(WORK_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定死信队列参数</span></span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 要绑定到哪个交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">        <span class="comment">// 指定死信要转发到哪个死信队列</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;waibao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;xiaodog_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">        channel.queueBind(queueName, WORK_EXCHANGE_NAME, <span class="string">&quot;xiaodog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; args2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        args2.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">        args2.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;laoban&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;xiaocat_queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args2);</span><br><span class="line">        channel.queueBind(queueName2, WORK_EXCHANGE_NAME, <span class="string">&quot;xiaocat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaoyuDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 拒绝消息</span></span><br><span class="line">            channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaodog] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">xiaopiDeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 拒绝消息</span></span><br><span class="line">            channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [xiaocat] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">false</span>, xiaoyuDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.basicConsume(queueName2, <span class="literal">false</span>, xiaopiDeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-重要知识"><a href="#RabbitMQ-重要知识" class="headerlink" title="RabbitMQ 重要知识"></a>RabbitMQ 重要知识</h3><blockquote><p>也是面试考点</p></blockquote><ol><li>消息队列的概念、模型、应用场景</li></ol><p>概念:<br>消息队列就是存储消息的队列。<br>模型：<br>生产者：Producer，类比为快递员，发送消息的人（客户端）<br>消费者：Consumer，类比为取快递的人，接受读取消息的人（客户端）<br>消息：Message，类比为快递，就是生产者要传输给消费者的数据<br>消息队列：Queue 为什么不接传输，要用消息队列？生产者不用关心你的消费者要不要消费、什么时候消费，我只需要把东西给消息队列，我的工作就算完成了。 生产者和消费者实现了解耦，互不影响。<br>应用场景: 1.耗时的场景（异步） 2.高并发场景（异步、削峰填谷） 3.分布式系统协作（跨团队、跨业务、应用解耦）<br>比如 QQ 是一个系统，用 c++写的，微信用 java 写的，qq 的消息可以通过消息队列传送给微信 4.强稳定性的场景（金融业务、持久化、可靠性、削峰填谷）<br>支付、转账</p><ol><li>交换机的类别、路由绑定的关系<ol><li>Fanout</li><li>Direct</li><li>Topic</li><li>Headers</li><li>RPC</li></ol></li></ol><p>扇形交换机（Fanout Exchange）：在扇形交换机中，绑定不需要指定路由键。交换机会将消息广播到所有与之绑定的队列，忽略消息的路由键。<br>直连交换机（Direct Exchange）：在直连交换机中，绑定需要指定一个特定的路由键。当消息的路由键与绑定的路由键完全匹配时，消息将被路由到与之绑定的队列。<br>主题交换机（Topic Exchange）：在主题交换机中，绑定使用模式匹配的路由键。路由键可以包含通配符 <em> 和 #。</em> 匹配一个单词，# 匹配零个或多个单词。交换机将消息根据路由键与绑定的模式进行匹配，然后路由到相应的队列。<br>标头交换机（Headers Exchange）：在标头交换机中，绑定使用消息的标头信息进行匹配。绑定时可以指定一组键值对，当消息的标头信息与绑定的键值对匹配时，消息将被路由到相应的队列。</p><ol><li>消息可靠性<br>a 消息确认机制（ack、nack、reject）<br>b 消息持久化（durable）<br>首先，您需要确保队列本身是持久化的，以防止在 RabbitMQ 服务器重启或崩溃时丢失队列的定义和消息。其次，您需要确保消息本身是持久化的，以便在服务器重启或崩溃后仍然保留消息。在发布消息时，可以通过设置 deliveryMode 参数为 2 来使消息持久化。</li></ol><p>c 消息过期机制<br>d 死信队列<br>消费过程中可能存在消息消费失败、消息过期、消息达到最大重试次数、消息被拒绝等情况，死信队列为消息处理提供了一种容错机制，确保系统能够对异常情况进行适当的处理，并提高消息系统的可靠性和稳定性</p><ol><li>延迟队列（类似死信队列）</li><li>顺序消费、消费幂等性（本次不讲）</li><li>可扩展性（仅作了解）<br>a 集群<br>b 故障的恢复机制<br>c 镜像</li><li>运维监控告警（仅作了解）</li></ol><h2 id="Mq-设计基础知识"><a href="#Mq-设计基础知识" class="headerlink" title="Mq 设计基础知识"></a>Mq 设计基础知识</h2><p><strong>多线程版本 mq；</strong><br><strong>基于网络通讯版本 mq netty 实现</strong></p><h3 id="基于多线程队列简单实现-mq"><a href="#基于多线程队列简单实现-mq" class="headerlink" title="基于多线程队列简单实现 mq"></a>基于多线程队列简单实现 mq</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>:22603</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span>:2023/3/3 15:23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMQ</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedBlockingDeque&lt;JSONObject&gt;linkedBlockingDeque=<span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                        jsonObject.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;18790034997&quot;</span>);</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,获取到数据:&quot;</span> + jsonObject.toJSONString());</span><br><span class="line">                        linkedBlockingDeque.offer(jsonObject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;生产额&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="type">JSONObject</span> <span class="variable">poll</span> <span class="operator">=</span> linkedBlockingDeque.poll();</span><br><span class="line">                    <span class="keyword">while</span> (poll != <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,获取到数据:&quot;</span> + poll.toJSONString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line">        customer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于-netty-实现-mq"><a href="#基于-netty-实现-mq" class="headerlink" title="基于 netty 实现 mq"></a>基于 netty 实现 mq</h3><p>消费者 netty 客户端与 nettyServer 端 MQ 服务器端保持长连接，MQ 服务器端保存<br>消费者连接。<br>生产者 netty 客户端发送请求给 nettyServer 端 MQ 服务器端，MQ 服务器端在将该<br>消息内容发送给消费者。</p><p>body:{“msg”:{“userId”:”123456”,”age”:”23”},”type”:”producer”，”topic”:””}<br><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1677922569697-19813871-c904-431a-bbf5-ce353198fc3e.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1677922569697-19813871-c904-431a-bbf5-ce353198fc3e.java%22%2C%22name%22%3A%22NettyMQServer.java%22%2C%22size%22%3A7210%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u0ca88953-3f38-4e45-984b-3635444ee04%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22uc92a400b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">NettyMQServer.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1677922569698-50ef2ac6-6029-45a6-affa-91b513fd2597.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1677922569698-50ef2ac6-6029-45a6-affa-91b513fd2597.java%22%2C%22name%22%3A%22NettyMQConsumer.java%22%2C%22size%22%3A4182%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u495980a7-67b8-4244-93e9-43d7a4a2073%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u57358565%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">NettyMQConsumer.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1677922569722-760c8e69-dd07-46c2-a6d3-e1cdb34fb5be.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1677922569722-760c8e69-dd07-46c2-a6d3-e1cdb34fb5be.java%22%2C%22name%22%3A%22NettyMQProduce.java%22%2C%22size%22%3A4579%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u9a7a267a-f4c8-4d80-a791-f4129711153%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ud6e420a2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">NettyMQProduce.java</a></p><h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><p>生产者投递消息给 MQ 服务器端，MQ 服务器端需要缓存该消息<br>如果 mq 服务器端宕机之后，消息如何保证不丢失</p><ol><li>持久化机制<br>① 生产者投递消息给消费者，消息不只是放在内存里，他也会持久化到我们的硬盘中<br>② 消息支持持久化到 Commitlog 里面，即使宕机后重启，未消费的消息也是可以加载出来的</li></ol><p>2、如果 mq 接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？<br>不会丢失，消息确认机制必须要消费者消费该消息成功之后，在通知给 mq 服务器端<br>删除该消息。</p><p>3、冗余部署：采用冗余部署的架构，使用多个 MQ 服务器组成集群或者使用主从复制机制。当主服务器宕机时，备份服务器可以接管服务，并保证消息的持久化和可靠传递。</p><p>4、数据备份与恢复：定期备份 MQ 服务器上的消息数据，并确保备份数据的完整性和可靠性。在服务器宕机后，可以通过恢复备份数据来恢复消息队列的状态。</p><p>5、监控与报警：建立监控系统，实时监测 MQ 服务器的状态。一旦服务器发生故障或宕机，及时触发报警机制，以便管理员能够尽快采取措施来保护消息不丢失。</p><p><strong>Mq 服务器端将该消息推送消费者和费者主动拉取消息的区别？</strong></p><p><strong>Mq 服务器端将该消息推送消费者：</strong><br>消费者已经和 mq 服务器保持长连接。</p><p><strong>消费者主动拉取消息：</strong><br>消费者第一次刚启动的时候</p><p><strong>两者区别：生产者将消息推送给 mq 服务器端，mq 服务器端发现消费者不在的情况下，就会将消息缓存起来，随后消费者上线与 mq 服务器建立连接，拉取消息的过程属于消费者主动拉取消息，消费者消费消息后，会通知 mq 服务器端删除该消息，随后生产者将消息推送给 mq 服务器端，mq 服务器在已经与消费者建立连接的情况下，主动将消息推送给消费者。</strong></p><p><strong>Mq 如何实现抗高并发思想？</strong></p><ol><li>异步处理：将业务逻辑解耦并异步化，通过将请求转化为消息并发送到消息队列中，而不是直接同步处理请求。这样可以将高并发的请求转化为消息并发放到消息队列中，让消费者以适合的速率进行处理，从而实现系统的高并发能力。</li><li>消息并发消费：通过增加消费者的数量，实现消息的并发消费能力。通过水平扩展消费者，可以增加系统的处理能力和并发处理的吞吐量。</li><li>消费者负载均衡：在有多个消费者的情况下，可以使用负载均衡策略来平均分配消息的处理负载。常见的负载均衡策略包括轮询、随机、最少连接等，确保消息能够平均地分发给多个消费者进行处理。</li><li>消息预取（Prefetch）：消息队列通常支持设置消费者的预取数量，即一次从队列中预取的消息数量。通过适当调整预取数量，可以提高消费者的处理效率和系统的吞吐量。</li><li>限流和流量控制：通过设置适当的限流策略和流量控制机制，控制消息的发送速率和消费速率。这可以避免系统被过多的请求压垮，保持系统的稳定性和可靠性。</li><li>消息批量处理：对于大量的小消息，可以进行批量处理，将多个消息打包成一个批次进行处理，减少系统的开销和通信成本。</li><li>消息重试和幂等性：在高并发场景下，可能会出现消息处理失败的情况。通过实现消息的重试机制和保证消息处理的幂等性，可以避免因为重复消息或消息处理失败而引发的问题。</li><li>高可用和故障恢复：通过使用多个消息队列节点和复制机制，实现高可用性和故障恢复能力。当某个节点发生故障时，其他节点可以接替其工作，确保系统的稳定性和可用性。</li></ol><p>缺点：存在延迟的问题</p><p><strong>如何避免 mq 消息堆积问题？</strong></p><p>需要考虑 mq 消费者提高速率的问题：<br>如何消费者提高速率：<strong>消费者实现集群、消费者批量获取消息即可。</strong><br>提供多个消费者，每个消费者每次取一百或者十条，从而提高效率</p><h4 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><p>| ```</p><dependencies><pre><code> &lt;dependency&gt;     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;     &lt;version&gt;1.2.62&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;io.netty&lt;/groupId&gt;     &lt;artifactId&gt;netty-all&lt;/artifactId&gt;     &lt;version&gt;4.0.23.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;     &lt;version&gt;1.2.62&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;     &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;     &lt;version&gt;3.11&lt;/version&gt; &lt;/dependency&gt;</code></pre><p>   &lt;/dependencies&gt;<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line"># RabbitMQ</span><br><span class="line"></span><br><span class="line">## RabbitMQ 基本介绍</span><br><span class="line"></span><br><span class="line">RabbitMQ 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件），RabbitMQ 服务器是用 Erlang 语言编写的。</span><br><span class="line">RabitMQ 官方网站:</span><br><span class="line">[https://www.rabbitmq.com/](https://www.rabbitmq.com/) 1.点对点(简单)的队列 2.工作(公平性)队列模式 3.发布订阅模式 4.路由模式 Routing 5.通配符模式 Topics</span><br><span class="line">6.RPC</span><br><span class="line">https://www.rabbitmq.com/getstarted.html</span><br><span class="line"></span><br><span class="line">## RabbitMQ 环境的基本安装</span><br><span class="line"></span><br><span class="line">1.下载并安装 erlang,下载地址：http://www.erlang.org/download 2.配置 erlang 环境变量信息</span><br><span class="line">新增环境变量 ERLANG_HOME=erlang 的安装地址</span><br><span class="line">将%ERLANG_HOME%\bin 加入到 path 中 3.下载并安装 RabbitMQ，下载地址：http://www.rabbitmq.com/download.html</span><br><span class="line">注意: RabbitMQ 它依赖于 Erlang,需要先安装 Erlang。</span><br><span class="line">[https://www.rabbitmq.com/install-windows.html](https://www.rabbitmq.com/install-windows.html)</span><br><span class="line"></span><br><span class="line">安装教程：[https://blog.csdn.net/tirster/article/details/121938987](https://blog.csdn.net/tirster/article/details/121938987)</span><br><span class="line"></span><br><span class="line">### 安装 RabbitMQ 环境步骤</span><br><span class="line"></span><br><span class="line">配置 Erlang 环境变量：</span><br><span class="line"></span><br><span class="line">### 如何启动 Rabbitmq</span><br><span class="line"></span><br><span class="line">net start RabbitMQ</span><br><span class="line"></span><br><span class="line">### 启动 Rabbitmq 常见问题</span><br><span class="line"></span><br><span class="line">如果 rabbitmq 启动成功无法访问管理平台页面</span><br><span class="line"></span><br><span class="line">进入到 F:\path\rabbitmq\rabbitmq\rabbitmq_server-3.6.9\sbin&gt;</span><br><span class="line">执行</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line">### Rabbitmq 管理平台中心</span><br><span class="line"></span><br><span class="line">RabbitMQ 管理平台地址 http://127.0.0.1:15672</span><br><span class="line">默认账号:guest/guest 用户可以自己创建新的账号</span><br><span class="line"></span><br><span class="line">Virtual Hosts:</span><br><span class="line">像 mysql 有数据库的概念并且可以指定用户对库和表等操作的权限。那 RabbitMQ 呢？</span><br><span class="line">RabbitMQ 也有类似的权限管理。在 RabbitMQ 中可以虚拟消息服务器 VirtualHost，每</span><br><span class="line">个 VirtualHost 相当月一个相对独立的 RabbitMQ 服务器，每个 VirtualHost 之间是相互</span><br><span class="line">隔离的。exchange、queue、message 不能互通。</span><br><span class="line"></span><br><span class="line">默认的端口 15672：rabbitmq 管理平台端口号</span><br><span class="line">默认的端口 5672： rabbitmq 消息中间内部通讯的端口</span><br><span class="line">默认的端口号 25672 rabbitmq 集群的端口号</span><br><span class="line"></span><br><span class="line">### RabbitMQ 常见名词</span><br><span class="line"></span><br><span class="line">/Virtual Hosts---分类</span><br><span class="line">/队列存放我们消息</span><br><span class="line">Exchange 分派我们消息在那个队列存放起来类似于 nginx</span><br><span class="line"></span><br><span class="line">15672---rabbitmq 控制台管理平台 http 协议</span><br><span class="line">25672rabbitmq 集群通信端口号</span><br><span class="line">Amqp 5672 rabbitmq 内部通信的一个端口号</span><br><span class="line"></span><br><span class="line">### RabbitMQ 创建账户</span><br><span class="line"></span><br><span class="line">### RabbitMQ 平台创建 Virtual Hosts</span><br><span class="line"></span><br><span class="line">### RabbitMQ 平台创建消息队列</span><br><span class="line"></span><br><span class="line">## 快速入门 RabbitMQ 简单队列</span><br><span class="line"></span><br><span class="line">首先需要再 RabbitMQ 平台创建 Virtual Hosts 和队列。</span><br><span class="line">/meiteVirtualHosts</span><br><span class="line">----订单队列</span><br><span class="line">----支付队列</span><br><span class="line"></span><br><span class="line">1.        在RabbitMQ平台创建一个队列；</span><br><span class="line">2.        在编写生产者代码</span><br><span class="line">3.        在编写消费者代码</span><br><span class="line"></span><br><span class="line">### RabbitMQ 如何保证消息不丢失</span><br><span class="line"></span><br><span class="line">先来看看消息都有可能再哪些环节丢失</span><br><span class="line">![JZ9O8F]IZ$ND00NCWW[R2(D.png](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678063490365-7adcdad9-0f2b-4208-9a45-51079bbc7de8.png#averageHue=%23f8f8f8&amp;clientId=ub4a67b8a-2261-4&amp;from=paste&amp;height=200&amp;id=u467660a7&amp;originHeight=200&amp;originWidth=677&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11164&amp;status=done&amp;style=none&amp;taskId=u30c0e8f7-b810-48b6-b612-f69425b7ca3&amp;title=&amp;width=677)</span><br><span class="line">Mq 如何保证消息不丢失：</span><br><span class="line"></span><br><span class="line">1.        生产者角色</span><br><span class="line"></span><br><span class="line">    由于网络波动导致消息发送失败</span><br><span class="line">    确保生产者投递消息到 MQ 服务器端成功。</span><br><span class="line">    解决:Ack 消息确认机制</span><br><span class="line">    存在同步或者异步的形式，同步会存在生产者将消息发送给 MQ 服务器端，MQ 服务器端未能及时响应给生产者，就会导致生产者服务延迟阻塞，响应给客户端。异步是在生产者和 MQ 服务第端之间会有一个观察者进行事件监听，只要 MQ 服务器端将消息持久化到硬盘，MQ 服务器端再给监听方法发通知，说明消息发送成功了。如果消息多久时间内一直未给响应结果的情况下，我们可以人为进行重试。</span><br><span class="line">    方式 1：Confirms 方式 2：事务消息</span><br><span class="line"></span><br><span class="line">2.        消费者角色</span><br><span class="line">    消费者在消费完消息之前宕机，MQ 服务器端认为认为消息消费成功，并把存储在内存中的消息删除，导致消息丢失</span><br><span class="line">    解决:</span><br><span class="line">    在 rabbitmq 情况下引入了消息应答机制：</span><br><span class="line">    必须要将消息消费成功之后，才会将该消息从 mq 服务器端中移除。</span><br><span class="line">    在 kafka 中的情况下：</span><br><span class="line">    不管是消费成功还是消费失败，该消息都不会立即从 mq 服务器端移除。</span><br><span class="line">    在 kafka 中，消费者宕机，MQ 服务器端如何判断这个消息消费了多少呢，kafka 中引入了分区 off、set，他会记录消费者消费了这个消息的哪个偏移量，消费者知道该从哪开始消费，消息清理，一般会有定时器在几天后定时把消费成功的消息进行清理</span><br><span class="line">3.        MQ服务器端把消息发送给消费者前宕机</span><br><span class="line"></span><br><span class="line">    Mq 服务器端在默认的情况下都会对队列中的消息实现持久化</span><br><span class="line">    持久化硬盘。</span><br><span class="line"></span><br><span class="line">4.  使用消息确认机制+持久技术</span><br><span class="line">    A.消费者确认收到消息机制</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, false, defaultConsumer);</span><br><span class="line">    注：第二个参数值为 false 代表关闭 RabbitMQ 的自动应答机制，改为手动应答。</span><br><span class="line">    在处理完消息时，返回应答状态，true 表示为自动应答模式。</span><br><span class="line">    channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">    B.生产者确认投递消息成功 使用 Confirm 机制 或者事务消息</span><br><span class="line"></span><br><span class="line">Confirm 机制：</span><br><span class="line">生产者将 Channel 设置成 confirm 模式，一旦 Channel 进入 confirm 模式，所有在该 Channel 上面发布的消息都将会被指派一个唯一的 ID(从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker 就会发送一个确认给生产者(包含消息的唯一 ID)，这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置 basic.ack 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理；</span><br><span class="line">confirm 模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等 Channel 返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果 RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消息，生产者应用程序同样可以在回调方法中处理该 nack 消息；</span><br><span class="line">事务模式： channel.txSelect(); _//开启事务_</span><br><span class="line">channel.txCommit(); _//提交事务_</span><br><span class="line">channel.txRollback(); _//回滚_</span><br><span class="line">在通过 txSelect 开启事务之后，我们便可以发布消息给 broker 服务器了，如果 txCommit 提交成功了，则消息一定到达了 broker 了，如果在 txCommit 执行之前 broker 异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过 txRollback 回滚事务了。</span><br><span class="line"></span><br><span class="line">这里注意一下：txSelect 与 Confirm 模式不能共存。</span><br><span class="line">Confirm 模式的三种编程方式：</span><br><span class="line"></span><br><span class="line">1. 串行 confirm 模式：peoducer 每发送一条消息后，调用 waitForConfirms()方法，等待 broker 端 confirm。</span><br><span class="line">2. 批量 confirm 模式：producer 每发送一批消息后，调用 waitForConfirms()方法，等待 broker 端 confirm。</span><br><span class="line">3. 异步 confirm 模式：提供一个回调方法，broker confirm 了一条或者多条消息后 producer 端会回调这个方法。</span><br><span class="line"></span><br><span class="line">2.RabbitMQ 默认创建是持久化的</span><br><span class="line"></span><br><span class="line">代码中设置 durable 为 true</span><br><span class="line"></span><br><span class="line">参数名称详解：</span><br><span class="line">durable 是否持久化 durable 为持久化、 Transient 不持久化</span><br><span class="line">autoDelete 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过 RabbitMQ Management，查看某个队列的消费者数量，当 consumers = 0 时队列就会自动删除 2. 使用 rabbitmq 事务消息；</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">channel.txSelect();</span><br><span class="line"></span><br><span class="line">channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, msg.getBytes());</span><br><span class="line"></span><br><span class="line">// int i = 1 / 0;</span><br><span class="line"></span><br><span class="line">channel.txCommit();</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 相关核心代码</span><br><span class="line">##### 生产者</span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.RabbitMQ;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author:22603</span><br><span class="line">* @Date:2023/3/6 0:39</span><br><span class="line">*/</span><br><span class="line">public class ProduceMQ &#123;</span><br><span class="line"></span><br><span class="line">    public static final String QUEUE_NAME=&quot;StudyingQueues&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        Connection connection=ConnectionMQ.getConnect();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        String msg=&quot;MQ你好呀啊222&quot;;</span><br><span class="line">        channel.basicPublish(&quot;&quot;,QUEUE_NAME,null,msg.getBytes());</span><br><span class="line">        //       关闭通道和连接</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">channel.confirmSelect();```java</span><br><span class="line">package com.example.demo1.RabbitMQ;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/6 0:29</span><br><span class="line">  \*/</span><br><span class="line">  public class ConnectionMQ &#123;</span><br><span class="line"></span><br><span class="line">      public static Connection getConnect() throws IOException, TimeoutException &#123;</span><br><span class="line">          ConnectionFactory connectionFactory=new ConnectionFactory();</span><br><span class="line">          //        设置连接的virtualhost</span><br><span class="line">          connectionFactory.setVirtualHost(&quot;/Study&quot;);</span><br><span class="line">          //        设置用户名密码</span><br><span class="line">          connectionFactory.setUsername(&quot;guest&quot;);</span><br><span class="line">          connectionFactory.setPassword(&quot;guest&quot;);</span><br><span class="line">          //        设置端口号和地址</span><br><span class="line">          connectionFactory.setPort(5672);</span><br><span class="line">          connectionFactory.setHost(&quot;127.0.0.1&quot;);</span><br><span class="line">          return connectionFactory.newConnection();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 消费者</span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.RabbitMQ;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author:22603</span><br><span class="line">* @Date:2023/3/6 0:39</span><br><span class="line">*/</span><br><span class="line">public class CustomMQ &#123;</span><br><span class="line"></span><br><span class="line">    public static final String QUEUE_NAME=&quot;StudyingQueues&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        Connection connection=ConnectionMQ.getConnect();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        DefaultConsumer consumer=new DefaultConsumer(channel)&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String msg=new String(body,&quot;utf-8&quot;);</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //        监听队列</span><br><span class="line">        //        autoAck true 自动签收 false 手动签收</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,true,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">## RabbitMQ 五种消息模式</span><br><span class="line"></span><br><span class="line">### RabitMQ 工作队列</span><br><span class="line"></span><br><span class="line">默认的传统队列是为均摊消费，存在不公平性；如果每个消费者速度不一样的情况下，均摊消费是不公平的，应该是能者多劳。</span><br><span class="line">采用工作队列</span><br><span class="line">在通道中只需要设置 basicQos 为 1 即可，表示 MQ 服务器每次只会给消费者推送 1 条消息必须手动 ack 确认之后才会继续发送。</span><br><span class="line">channel.basicQos(1);</span><br><span class="line"></span><br><span class="line">### RabbitMQ 交换机类型</span><br><span class="line"></span><br><span class="line">Direct exchange（直连交换机）</span><br><span class="line">Fanout exchange（扇型交换机）</span><br><span class="line">Topic exchange（主题交换机）</span><br><span class="line">Headers exchange（头交换机）</span><br><span class="line">/Virtual Hosts---区分不同的团队</span><br><span class="line">----队列存放消息</span><br><span class="line">----交换机路由消息存放在那个队列中类似于 nginx</span><br><span class="line">---路由 key 分发规则</span><br><span class="line"></span><br><span class="line">## Direct Exchange</span><br><span class="line"></span><br><span class="line">直连交换机，根据 Routing Key(路由键)进行投递到不同队列。</span><br><span class="line">单个绑定，一个路由键对应一个队列。如下所示：</span><br><span class="line"></span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420140-54852ce3-04e7-40d7-a60b-7340d21e1fb0.png#averageHue=%23150000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u8ea614a2&amp;originHeight=171&amp;originWidth=408&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ucefd7391-ea58-4e8e-898d-9d475721ba1&amp;title=)</span><br><span class="line">多个绑定，一个路由键对应多个队列，则消息会分别投递到两个队列中，如下所示：</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420167-b0448137-666c-453a-9c1b-4275e5cbcfe5.png#averageHue=%23160000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u1783ecdb&amp;originHeight=171&amp;originWidth=398&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u90472250-3f5e-48e2-971f-27fe37d1d41&amp;title=)</span><br><span class="line"></span><br><span class="line">## Fanout Exchange</span><br><span class="line"></span><br><span class="line">扇形交换机，采用广播模式，根据绑定的交换机，路由到与之对应的所有队列。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout 交换机转发消息是最快的。</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420143-c9df29e5-deac-494d-bdce-35b50551b85c.png#averageHue=%231b0000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u12903de6&amp;originHeight=160&amp;originWidth=329&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uec131518-b681-4fb7-b89a-759e4c379e8&amp;title=)</span><br><span class="line"></span><br><span class="line">## Topic Exchange</span><br><span class="line"></span><br><span class="line">主题交换机，对路由键进行模式匹配后进行投递，符号#表示一个或多个词，_表示一个词。因此“abc.#”能够匹配到“abc.def.ghi”，但是“abc._” 只会匹配到“abc.def”。如下所示：</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420143-c434869a-5462-4175-a76e-bb0b78b216f0.png#averageHue=%23140000&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u41779bab&amp;originHeight=171&amp;originWidth=424&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uecf232e1-a9fb-4854-956c-62a3dca002e&amp;title=)</span><br><span class="line"></span><br><span class="line">## Header Exchange</span><br><span class="line"></span><br><span class="line">头交换机，不处理路由键。而是根据发送的消息内容中的 headers 属性进行匹配。在绑定 Queue 与 Exchange 时指定一组键值对；当消息发送到 RabbitMQ 时会取到该消息的 headers 与 Exchange 绑定时指定的键值对进行匹配；如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers 属性是一个键值对，可以是 Hashtable，键值对的值可以是任何类型。而 fanout，direct，topic 的路由键都需要要字符串形式的。</span><br><span class="line">匹配规则 x-match 有下列两种类型：</span><br><span class="line">x-match = all ：表示所有的键值对都匹配才能接受到消息</span><br><span class="line">x-match = any ：表示只要有键值对匹配就能接受到消息</span><br><span class="line">消息头交换机，如下图所示：</span><br><span class="line">![](https://cdn.nlark.com/yuque/0/2023/png/33551426/1678158420156-98a6b621-2b38-4b60-a6bf-91a5de07480e.png#averageHue=%23fdf3f2&amp;clientId=uf635b9a6-f378-4&amp;from=paste&amp;id=u17ba6b1d&amp;originHeight=225&amp;originWidth=587&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u2c67e31b-0cec-47bb-86d8-01d37832700&amp;title=)</span><br><span class="line">以上就是 RabbitMQ 常见的四种交换机模式。</span><br><span class="line"></span><br><span class="line">#### RabbitMQ Fanout 发布订阅</span><br><span class="line"></span><br><span class="line">生产者发送一条消息，经过交换机转发到多个不同的队列，多个不同的队列就多个不同的消费者。</span><br><span class="line"></span><br><span class="line">原理：</span><br><span class="line"></span><br><span class="line">1.        需要创建两个队列，每个队列对应一个消费者；</span><br><span class="line">2.        队列需要绑定我们交换机</span><br><span class="line">3.        生产者投递消息到交换机中，交换机在将消息分配给两个队列中都存放起来；</span><br><span class="line">4.        消费者从队列中获取这个消息。</span><br><span class="line"></span><br><span class="line">##### 生产者代码</span><br><span class="line"></span><br><span class="line">| ```</span><br><span class="line">import com.mayikt.rabbitmq.RabbitMQConnection;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">public class ProducerFanout &#123;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义交换机的名称</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">         //  创建Connection</span><br><span class="line"></span><br><span class="line">         Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line"></span><br><span class="line">         // 创建Channel</span><br><span class="line"></span><br><span class="line">         Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">         // 通道关联交换机</span><br><span class="line"></span><br><span class="line">         channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;, true);</span><br><span class="line"></span><br><span class="line">         String msg = &quot;每特教育6666&quot;;</span><br><span class="line"></span><br><span class="line">         channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, msg.getBytes());</span><br><span class="line"></span><br><span class="line">         channel.close();</span><br><span class="line"></span><br><span class="line">         connection.close();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 消费者代码</span><br><span class="line">###### 邮件消费者</span><br><span class="line">| ```</span><br><span class="line">import com.mayikt.rabbitmq.RabbitMQConnection;</span><br><span class="line"></span><br><span class="line">   import com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   import java.io.IOException;</span><br><span class="line"></span><br><span class="line">   import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public class MailConsumer &#123;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义邮件队列</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String QUEUE_NAME = &quot;fanout_email_queue&quot;;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义交换机的名称</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">         System.out.println(&quot;邮件消费者...&quot;);</span><br><span class="line"></span><br><span class="line">         // 创建我们的连接</span><br><span class="line"></span><br><span class="line">         Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line"></span><br><span class="line">         // 创建我们通道</span><br><span class="line"></span><br><span class="line">         final Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">         // 关联队列消费者关联队列</span><br><span class="line"></span><br><span class="line">         channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">         DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line">             @Override</span><br><span class="line"></span><br><span class="line">             public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">                 String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">                 System.out.println(&quot;邮件消费者获取消息:&quot; + msg);</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         // 开始监听消息 自动签收</span><br><span class="line"></span><br><span class="line">         channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">###### 短信消费者</span><br><span class="line"></span><br><span class="line">| ```</span><br><span class="line">public class SmsConsumer &#123;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义短信队列</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String QUEUE_NAME = &quot;fanout_email_sms&quot;;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * 定义交换机的名称</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">     private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">         System.out.println(&quot;短信消费者...&quot;);</span><br><span class="line"></span><br><span class="line">         // 创建我们的连接</span><br><span class="line"></span><br><span class="line">         Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line"></span><br><span class="line">         // 创建我们通道</span><br><span class="line"></span><br><span class="line">         final Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">         // 关联队列消费者关联队列</span><br><span class="line"></span><br><span class="line">         channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">         DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line">             @Override</span><br><span class="line"></span><br><span class="line">             public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">                 String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">                 System.out.println(&quot;短信消费者获取消息:&quot; + msg);</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         // 开始监听消息 自动签收</span><br><span class="line"></span><br><span class="line">         channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Direct路由模式</span><br><span class="line">当交换机类型为direct类型时，根据队列绑定的路由建转发到具体的队列中存放消息</span><br><span class="line"></span><br><span class="line">##### 生产者</span><br><span class="line">##### 消费者</span><br><span class="line"></span><br><span class="line">#### Topic主题模式</span><br><span class="line">当交换机类型为topic类型时，根据队列绑定的路由建模糊转发到具体的队列中存放。</span><br><span class="line">#号表示支持匹配多个词；</span><br><span class="line">*号表示只能匹配一个词</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## SpringBoot整合RabbitMQ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Maven依赖</span><br><span class="line">| ```java</span><br><span class="line">&lt;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- springboot-web组件 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 添加springboot对amqp的支持 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--fastjson --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.2.49&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">### 配置类</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.FanoutExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/7 15:59</span><br><span class="line">  \*/</span><br><span class="line">  @Component</span><br><span class="line">  public class RabbitMQConfig &#123;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 定义交换机</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          private String EXCHANGE_SPRINGBOOT_NAME = &quot;/SpringBoot&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 短信队列</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          private String FANOUT_SMS_QUEUE = &quot;fanout_sms_queue&quot;;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 邮件队列</span><br><span class="line">  \*/</span><br><span class="line">  private String FANOUT_EMAIL_QUEUE = &quot;fanout_email_queue&quot;;</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public Queue sms() &#123;</span><br><span class="line">              return new Queue(FANOUT_SMS_QUEUE);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 配置 emailQueue</span><br><span class="line">-</span><br><span class="line">- @return</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line"></span><br><span class="line">          public Queue emailQueue() &#123;</span><br><span class="line"></span><br><span class="line">              return new Queue(FANOUT_EMAIL_QUEUE);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line"></span><br><span class="line">- 配置 fanoutExchange</span><br><span class="line">-</span><br><span class="line">- @return</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public FanoutExchange fanoutExchange() &#123;</span><br><span class="line">              return new FanoutExchange(EXCHANGE_SPRINGBOOT_NAME);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public Binding bindingSmsFanoutExchange(Queue sms,FanoutExchange fanoutExchange)&#123;</span><br><span class="line">              return BindingBuilder.bind(sms).to(fanoutExchange);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Bean</span><br><span class="line">          public Binding bindingEmailFanoutExchange(Queue emailQueue,FanoutExchange fanoutExchange)&#123;</span><br><span class="line">              return BindingBuilder.bind(emailQueue).to(fanoutExchange);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"> </span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 配置文件</span><br><span class="line">application.yml</span><br><span class="line"></span><br><span class="line">| ```yaml</span><br><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    ####连接地址</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line"></span><br><span class="line">    ####端口号</span><br><span class="line"></span><br><span class="line">    port: 5672</span><br><span class="line"></span><br><span class="line">    ####账号</span><br><span class="line"></span><br><span class="line">    username: guest</span><br><span class="line"></span><br><span class="line">    ####密码</span><br><span class="line"></span><br><span class="line">    password: guest</span><br><span class="line"></span><br><span class="line">    ### 地址</span><br><span class="line"></span><br><span class="line">    virtual-host: /Study</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual # 手动应答</span><br><span class="line">        prefetch: 1 #每次从队列中取一个,轮询分发，默认是公平分发</span><br><span class="line">        retry:</span><br><span class="line">          max-attempts: 5 # 重试次数</span><br><span class="line">          enabled: true # 开启重试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">### 生产者</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.controller;</span><br><span class="line"></span><br><span class="line">import com.example.demo1.eneity.MsgEneity;</span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/7 17:07</span><br><span class="line">  \*/</span><br><span class="line">  @RestController</span><br><span class="line">  public class fanoutController &#123;</span><br><span class="line"></span><br><span class="line">          @Resource</span><br><span class="line">          private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">          @RequestMapping(&quot;/sendMsg&quot;)</span><br><span class="line">          public String sendMsg()&#123;</span><br><span class="line">              MsgEneity msgEneity=new MsgEneity(UUID.randomUUID().toString(),&quot;1&quot;,</span><br><span class="line">                                                &quot;18790034997&quot;,&quot;1330105337@qq.com&quot;);</span><br><span class="line">              amqpTemplate.convertAndSend(&quot;/SpringBoot&quot;,&quot;&quot;,msgEneity);</span><br><span class="line">              return &quot;消息投递成功:&quot;+msgEneity;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 消费者</span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.Customer;</span><br><span class="line"></span><br><span class="line">import com.example.demo1.eneity.MsgEneity;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author:22603</span><br><span class="line">* @Date:2023/3/7 17:29</span><br><span class="line">*/</span><br><span class="line">@Slf4j</span><br><span class="line">    @Component</span><br><span class="line">    @RabbitListener(queues = &quot;fanout_email_queue&quot;)</span><br><span class="line">    public class EmailMsg &#123;</span><br><span class="line"></span><br><span class="line">        @RabbitHandler</span><br><span class="line">        public void process(MsgEneity msgEneity)&#123;</span><br><span class="line">            log.info(&quot;EmailMsg:&quot;+msgEneity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">| |</span><br><span class="line">| |</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">package com.example.demo1.Customer;</span><br><span class="line"></span><br><span class="line">import com.example.demo1.eneity.MsgEneity;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- @author:22603</span><br><span class="line">- @Date:2023/3/7 17:29</span><br><span class="line">  \*/</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;fanout_sms_queue&quot;)</span><br><span class="line">public class MsgCustom &#123;</span><br><span class="line"></span><br><span class="line">        @RabbitHandler</span><br><span class="line">        public void process(MsgEneity msgEneity)&#123;</span><br><span class="line">            log.info(&quot;MsgCustom:&quot;+msgEneity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p> |<br>| —- |</p><h2 id="MQ异步发送短信发邮件"><a href="#MQ异步发送短信发邮件" class="headerlink" title="MQ异步发送短信发邮件"></a>MQ异步发送短信发邮件</h2><p>生产者：<br><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204154156-3fb8e446-6388-4ea7-86ca-f376ba44d973.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204154156-3fb8e446-6388-4ea7-86ca-f376ba44d973.java%22%2C%22name%22%3A%22RabbitMQConfig.java%22%2C%22size%22%3A1595%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u2a0fd865-e26e-486a-b61d-7a11a67e31f%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ucf5824fa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">RabbitMQConfig.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204154169-a08ad0ad-575b-444a-a583-71c42fb06aee.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204154169-a08ad0ad-575b-444a-a583-71c42fb06aee.java%22%2C%22name%22%3A%22UserController.java%22%2C%22size%22%3A935%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ue9765300-6f17-4cb5-b6c6-240b5644961%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u91e9ed2a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">UserController.java</a><br>消费者：<br><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204178501-023b7911-3796-4e3b-924c-4d42e44c5051.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204178501-023b7911-3796-4e3b-924c-4d42e44c5051.java%22%2C%22name%22%3A%22MsgCustom.java%22%2C%22size%22%3A584%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u8a49c97b-53f2-479f-9f89-32e02d987ce%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u98be3257%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">MsgCustom.java</a><a href="https://www.yuque.com/attachments/yuque/0/2023/java/33551426/1678204178518-0b08e124-b312-47e6-a91b-87ed415a11b2.java?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fjava%2F33551426%2F1678204178518-0b08e124-b312-47e6-a91b-87ed415a11b2.java%22%2C%22name%22%3A%22EmailMsg.java%22%2C%22size%22%3A571%2C%22ext%22%3A%22java%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u77599c3e-f1e0-4025-8f3a-3f4d1269c7b%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u36bcfe16%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">EmailMsg.java</a></p><h2 id="生产者如何获取消费结果"><a href="#生产者如何获取消费结果" class="headerlink" title="生产者如何获取消费结果"></a>生产者如何获取消费结果</h2><p><strong>1.     根据业务来定</strong><br><strong>消费者消费成功结果：</strong><br><strong>1.能够在数据库中插入一条数据</strong></p><p><strong>2.     Rocketmq 自带全局消息id，能够根据该全局消息获取消费结果</strong><br><strong>原理：生产者投递消息到mq服务器，mq服务器端在这时候返回一个全局的消息id，</strong><br><strong>当我们消费者消费该消息成功之后，消费者会给我们mq服务器端发送通知标记该消息</strong><br><strong>消费成功。</strong><br><strong>生产者获取到该消息全局id，每隔2s时间调用mq服务器端接口查询该消息是否</strong><br><strong>有被消费成功。</strong></p><ol><li>异步返回一个全局id，前端使用ajax定时主动查询；</li><li>在rocketmq中，自带根据消息id查询是否消费成功</li></ol><h2 id="RabbitMQ实战解决方案"><a href="#RabbitMQ实战解决方案" class="headerlink" title="RabbitMQ实战解决方案"></a>RabbitMQ实战解决方案</h2><h4 id="RabbitMQ死信队列"><a href="#RabbitMQ死信队列" class="headerlink" title="RabbitMQ死信队列"></a>RabbitMQ死信队列</h4><h4 id="死信队列产生的背景"><a href="#死信队列产生的背景" class="headerlink" title="死信队列产生的背景"></a>死信队列产生的背景</h4><p>RabbitMQ死信队列俗称，备胎队列；消息中间件因为某种原因拒收该消息后，可以转移到死信队列中存放，死信队列也可以有交换机和路由key等。</p><h4 id="产生死信队列的原因"><a href="#产生死信队列的原因" class="headerlink" title="产生死信队列的原因"></a>产生死信队列的原因</h4><ol><li>消息投递到MQ中存放 消息已经过期  消费者没有及时的获取到我们消息，消息如果存放到mq服务器中过期之后，会转移到备胎死信队列存放。</li><li>队列达到最大的长度 （队列容器已经满了）<br><strong>3.       </strong>消费者消费多次消息失败，就会转移存放到死信队列中<br>代码整合参考 mayikt-springboot-rabbitmq|#中order-dead-letter-queue项目</li></ol><h4 id="死信队列的架构原理"><a href="#死信队列的架构原理" class="headerlink" title="死信队列的架构原理"></a>死信队列的架构原理</h4><p>死信队列和普通队列区别不是很大<br>普通与死信队列都有自己独立的交换机和路由key、队列和消费者。<br>区别：<br>1.生产者投递消息先投递到我们普通交换机中，普通交换机在将该消息投到<br>普通队列中缓存起来，普通队列对应有自己独立普通消费者。<br>2.如果生产者投递消息到普通队列中，普通队列发现该消息一直没有被消费者消费<br>的情况下，在这时候会将该消息转移到死信（备胎）交换机中，死信（备胎）交换机<br>对应有自己独立的死信（备胎）队列对应独立死信（备胎）消费者。</p><h4 id="死信队列应用场景"><a href="#死信队列应用场景" class="headerlink" title="死信队列应用场景"></a>死信队列应用场景</h4><p>1.30分钟订单超时设计<br>A.    Redis过期key ：<br>B.    死信延迟队列实现：<br>采用死信队列，创建一个普通队列没有对应的消费者消费消息，在30分钟过后<br>就会将该消息转移到死信备胎消费者实现消费。<br>备胎死信消费者会根据该订单号码查询是否已经支付过，如果没有支付的情况下<br>则会开始回滚库存操作。</p><h3 id="RabbitMQ消息幂等问题"><a href="#RabbitMQ消息幂等问题" class="headerlink" title="RabbitMQ消息幂等问题"></a>RabbitMQ消息幂等问题</h3><h4 id="RabbitMQ消息自动重试机制"><a href="#RabbitMQ消息自动重试机制" class="headerlink" title="RabbitMQ消息自动重试机制"></a>RabbitMQ消息自动重试机制</h4><ol><li>当我们消费者处理执行我们业务代码的时候，如果抛出异常的情况下<br>在这时候mq会自动触发重试机制，默认的情况下rabbitmq是无限次数的重试。<br>需要人为指定重试次数限制问题</li><li>在什么情况下消费者需要实现重试策略？</li></ol><p>A.消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试？<br>该情况下需要实现重试策略，网络延迟只是暂时调用不通，重试多次有可能会调用通。<br>还有数据库连接超时，也可以进行重试，重试多次有可能会调用通。<br>B.<br>消费者获取消息后，因为代码问题抛出数据异常，是否需要重试？<br>该情况下是不需要实现重试策略，就算重试多次，最终还是失败的。<br>可以将日志存放起来，后期通过定时任务或者人工补偿形式。<br>如果是重试多次还是失败消息，需要重新发布消费者版本实现消费<br>可以使用死信队列</p><p>Mq在重试的过程中，有可能会引发消费者重复消费的问题。<br>Mq消费者需要解决幂等性问题<br>幂等性保证数据唯一</p><p>方式1：<br>生产者在投递消息的时候，生成一个全局唯一id，放在我们消息中。<br>Msg id=123456</p><p>Msg id=123456<br>Msg id=123456</p><p>消费者获取到我们该消息，可以根据该全局唯一id实现去重复。<br>全局唯一id 根据业务来定的  订单号码作为全局的id<br>实际上还是需要再db层面解决数据防重复。<br>业务逻辑是在做insert操作使用唯一主键约束<br>业务逻辑是在做update操作使用乐观锁</p><ol><li>当消费者业务逻辑代码中，抛出异常自动实现重试 （默认是无数次重试）</li><li>应该对RabbitMQ重试次数实现限制，比如最多重试5次，每次间隔3s；重试多次还是失败的情况下，存放到死信队列或者存放到数据库表中记录后期人工补偿<h4 id="如何合理选择消息重试"><a href="#如何合理选择消息重试" class="headerlink" title="如何合理选择消息重试"></a>如何合理选择消息重试</h4></li><li>消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试 ？</li><li>消费者获取消息后，应该代码问题抛出数据异常，是否需要重试？</li></ol><p>总结：如果消费者处理消息时，因为代码原因抛出异常是需要从新发布版本才能解决的，那么就不需要重试，重试也解决不了该问题的。存放到死信队列或者是数据库表记录、后期人工实现补偿。</p><h4 id="Rabbitmq如何开启重试策略"><a href="#Rabbitmq如何开启重试策略" class="headerlink" title="Rabbitmq如何开启重试策略"></a>Rabbitmq如何开启重试策略</h4><p>| <strong>spring</strong>:<br>  <strong>rabbitmq</strong>:<br>    <em>####连接地址</em>    <em><strong>host</strong>: 127.0.0.1    </em>####端口号<em>    </em><strong>port</strong>: 5672<br>    <em>####账号</em>    <em><strong>username</strong>: guest    </em>####密码<em>    </em><strong>password</strong>: guest<br>    <em>### 地址</em>    <em><strong>virtual-host</strong>: /meite_rabbitmq<br>    <strong>listener</strong>:<br>      <strong>simple</strong>:<br>        <strong>retry</strong>:          </em>####开启消费者（程序出现异常的情况下会）进行重试<em>          </em><strong>enabled</strong>: <strong>true          </strong><em>####最大重试次数</em>          <em><strong>max-attempts</strong>: 5          </em>####重试间隔次数<em>          </em><strong>initial-interval</strong>: 3000<br> |<br>| —- |</p><h4 id="消费者重试过程中，如何避免幂等性问题"><a href="#消费者重试过程中，如何避免幂等性问题" class="headerlink" title="消费者重试过程中，如何避免幂等性问题"></a>消费者重试过程中，如何避免幂等性问题</h4><p><strong>重试的过程中，为了避免业务逻辑重复执行，建议提前全局id提前查询，如果存在</strong><br><strong>的情况下，就无需再继续做该流程。</strong><br><strong>重试的次数最好有一定间隔次数，在数据库底层层面保证数据唯一性，比如加上唯一id。</strong></p><h4 id="SpringBoot开启消MQ架构设计原理"><a href="#SpringBoot开启消MQ架构设计原理" class="headerlink" title="SpringBoot开启消MQ架构设计原理"></a>SpringBoot开启消MQ架构设计原理</h4><p>什么是消息中间件<br>消息中间件基于队列模型实现异步/同步传输数据<br>作用：可以实现支撑高并发、异步解耦、流量削峰、降低耦合度。<br>传统的http请求存在那些缺点</p><p>1.Http请求基于请求与响应的模型，在高并发的情况下，客户端发送大量的请求达到<br>服务器端有可能会导致我们服务器端处理请求堆积。<br>2.Tomcat服务器处理每个请求都有自己独立的线程，如果超过最大线程数会将该请求缓存到队列中，如果请求堆积过多的情况下，有可能会导致tomcat服务器崩溃的问题。<br>所以一般都会在nginx入口实现限流，整合服务保护框架。</p><ol><li>http请求处理业务逻辑如果比较耗时的情况下，容易造成客户端一直等待，阻塞等待<br>过程中会导致客户端超时发生重试策略，有可能会引发幂等性问题。</li></ol><p>注意事项：接口是为http协议的情况下，最好不要处理比较耗时的业务逻辑，耗时的业务逻辑应该单独交给多线程或者是mq处理。</p><p>Mq应用场景有那些</p><ol><li>异步发送短信</li><li>异步发送新人优惠券</li><li>处理一些比较耗时的操作</li><li>异步发送短信</li><li>异步发送优惠券</li><li>比较耗时操作</li></ol><p>为什么需要使用mq<br>可以实现支撑高并发、异步解耦、流量削峰、降低耦合度。</p><p>同步发送http请求</p><p>客户端发送请求到达服务器端，服务器端实现会员注册业务逻辑，<br>1.insertMember() —插入会员数据  1s<br>2.sendSms()——发送登陆短信提醒 3s<br>3.sendCoupons()——发送新人优惠券  3s<br>总共响应需要6s时间，可能会导致客户端阻塞6s时间，对用户体验<br>不是很好。</p><p>多线程与MQ方式实现异步？</p><p>互联网项目:<br>客户端 安卓/IOS</p><p>服务器端：php/java<br>最好使用mq实现异步</p><p>多线程处理业务逻辑</p><p>用户向数据库中插入一条数据之后，在单独开启一个线程异步发送短信和优惠操作。<br>客户端只需要等待1s时间<br>优点：适合于小项目 实现异步<br>缺点：有可能会消耗服务器cpu资源资源<br>Mq处理业务逻辑</p><p>先向数据库中插入一条会员数据，让后再向MQ中投递一个消息，MQ服务器端在将消息推送给消费者异步解耦处理发送短信和优惠券。<br>Mq与多线程之间区别</p><p>MQ可以实现异步/解耦/流量削峰问题；<br>多线程也可以实现异步，但是消耗到cpu资源，没有实现解耦。</p><p>Mq消息中间件名词</p><p>Producer 生产者：投递消息到MQ服务器端；<br>Consumer  消费者：从MQ服务器端获取消息处理业务逻辑；<br>Broker   MQ服务器端<br>Topic 主题：分类业务逻辑发送短信主题、发送优惠券主题<br>Queue 存放消息模型 队列 先进先出 后进后出原则 数组/链表<br>Message 生产者投递消息报文：json</p><p>主流mq区别对比比</p><p>特性    ActiveMQ    RabbitMQ    RocketMQ    kafka<br>开发语言    java    erlang    java    scala<br>单机吞吐量    万级    万级    10万级    10万级<br>时效性    ms级    us级    ms级    ms级以内<br>可用性    高（主从架构）    高（主从架构）    非常高（分布式架构）    非常高（分布式架构）<br>功能特性    成熟的产品，在很多公司得到应用；有较多的文档；各种协议支持较好    基于erlang开发，所以并发能力很强，性能极其好，延时很低管理界面较丰富    MQ功能比较完备，扩展性佳    只支持主要的MQ功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广。</p><p>Mq设计基础知识</p><p>多线程版本mq；<br>基于网络通讯版本mq netty实现</p><p>基于多线程队列简单实现mq<br>public class MayiktThreadMQ {<br>/**</p><ul><li>Broker<br>*/<br>private static LinkedBlockingDeque broker = new LinkedBlockingDeque();</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建生产者线程</span><br><span class="line">Thread producer = new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">while (true) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(1000);</span><br><span class="line">JSONObject data = new JSONObject();</span><br><span class="line">data.put(&quot;phone&quot;, &quot;18611111111&quot;);</span><br><span class="line">broker.offer(data);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &quot;生产者&quot;);</span><br><span class="line">    producer.start();</span><br><span class="line">    Thread consumer = new Thread(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    JSONObject data = broker.poll();</span><br><span class="line">                    if (data != null) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + &quot;,获取到数据:&quot; + data.toJSONString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &quot;消费者&quot;);</span><br><span class="line">    consumer.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>}</p><p>基于netty实现mq<br>消费者netty客户端与nettyServer端MQ服务器端保持长连接，MQ服务器端保存<br>消费者连接。<br>生产者netty客户端发送请求给nettyServer端MQ服务器端，MQ服务器端在将该<br>消息内容发送给消费者。</p><p>body:{“msg”:{“userId”:”123456”,”age”:”23”},”type”:”producer”，”topic”:””}</p><p>生产者投递消息给MQ服务器端，MQ服务器端需要缓存该消息<br>如果mq服务器端宕机之后，消息如何保证不丢失</p><ol><li>持久化机制<br>如果mq接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？<br>不会丢失，消息确认机制 必须要消费者消费该消息成功之后，在通知给mq服务器端<br>删除该消息。<br>Mq服务器端将该消息推送消费者：<br>消费者已经和mq服务器保持长连接。<br>消费者主动拉取消息：<br>消费者第一次刚启动的时候</li></ol><p>Mq如何实现抗高并发思想</p><p>Mq消费者根据自身能力情况 ，拉取mq服务器端消息消费。<br>默认的情况下是取出一条消息。</p><p>缺点：存在延迟的问题</p><p>需要考虑mq消费者提高速率的问题：</p><p>如何消费者提高速率：消费者实现集群、消费者批量获取消息即可。</p><p>Maven依赖</p><p>com.alibaba<br>fastjson<br>1.2.62</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.23.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.62&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.11&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>RabbitMQ<br>RabbitMQ基本介绍<br>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件），RabbitMQ服务器是用Erlang语言编写的。<br>RabitMQ官方网站:<br><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p>1.点对点(简单)的队列 2.工作(公平性)队列模式 3.发布订阅模式 4.路由模式 Routing 5.通配符模式 Topics<br>6.RPC<br><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a><br>RabbitMQ 环境的基本安装</p><p>1.下载并安装 erlang,下载地址：<a href="http://www.erlang.org/download">http://www.erlang.org/download</a> 2.配置 erlang 环境变量信息<br>新增环境变量 ERLANG_HOME=erlang 的安装地址<br>将%ERLANG_HOME%\bin 加入到 path 中 3.下载并安装 RabbitMQ，下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a><br>注意: RabbitMQ 它依赖于 Erlang,需要先安装 Erlang。<br><a href="https://www.rabbitmq.com/install-windows.html">https://www.rabbitmq.com/install-windows.html</a></p><p>Java<br>安装 RabbitMQ 环境步骤</p><p>配置 Erlang 环境变量：</p><p>如何启动 Rabbitmq</p><p>net start RabbitMQ</p><p>启动 Rabbitmq 常见问题<br>如果 rabbitmq 启动成功无法访问 管理平台页面</p><p>进入到 F:\path\rabbitmq\rabbitmq\rabbitmq_server-3.6.9\sbin&gt;<br>执行<br>rabbitmq-plugins enable rabbitmq_management<br>rabbitmqctl start_app</p><p>Rabbitmq 管理平台中心</p><p>RabbitMQ 管理平台地址 <a href="http://127.0.0.1:15672">http://127.0.0.1:15672</a><br>默认账号:guest/guest   用户可以自己创建新的账号</p><p>Virtual Hosts:<br>像 mysql 有数据库的概念并且可以指定用户对库和表等操作的权限。那 RabbitMQ 呢？<br>RabbitMQ 也有类似的权限管理。在 RabbitMQ 中可以虚拟消息服务器 VirtualHost，每<br>个 VirtualHost 相当月一个相对独立的 RabbitMQ 服务器，每个 VirtualHost 之间是相互<br>隔离的。exchange、queue、message 不能互通。</p><p>默认的端口 15672：rabbitmq 管理平台端口号<br>默认的端口 5672： rabbitmq 消息中间内部通讯的端口<br>默认的端口号 25672  rabbitmq 集群的端口号</p><p>RabbitMQ 常见名词<br>/Virtual Hosts—-分类<br>/队列 存放我们消息<br>Exchange 分派我们消息在那个队列存放起来 类似于 nginx</p><p>15672—-rabbitmq 控制台管理平台 http 协议<br>25672rabbitmq 集群通信端口号<br>Amqp 5672 rabbitmq 内部通信的一个端口号</p><p>RabbitMQ 创建账户<br>RabbitMQ 平台创建 Virtual Hosts<br>RabbitMQ 平台创建消息队列</p><p>快速入门 RabbitMQ 简单队列</p><p>首先需要再 RabbitMQ 平台创建 Virtual Hosts 和队列。<br>/meiteVirtualHosts<br>——订单队列<br>——支付队列</p><ol><li>在 RabbitMQ 平台创建一个队列；</li><li>在编写生产者代码</li><li>在编写消费者代码</li></ol><p>生产者<br>public class RabbitMQConnection {</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取连接</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static Connection getConnection() throws IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">    // 2.设置连接地址</span><br><span class="line">    connectionFactory.setHost(&quot;127.0.0.1&quot;);</span><br><span class="line">    // 3.设置端口号:</span><br><span class="line">    connectionFactory.setPort(5672);</span><br><span class="line">    // 4.设置账号和密码</span><br><span class="line">    connectionFactory.setUsername(&quot;yushengjun&quot;);</span><br><span class="line">    connectionFactory.setPassword(&quot;123456&quot;);</span><br><span class="line">    // 5.设置VirtualHost</span><br><span class="line">    connectionFactory.setVirtualHost(&quot;/mayikt&quot;);</span><br><span class="line">    return connectionFactory.newConnection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>public class Producer {<br>private static final String QUEUE_NAME = “mayikt”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    Connection connection = RabitMQConnection.getConnection();</span><br><span class="line">    // 2.设置通道</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    // 3.设置消息</span><br><span class="line">    String msg = &quot;每特教育第六期平均就业薪资破3万&quot;;</span><br><span class="line">    System.out.println(&quot;msg:&quot; + msg);</span><br><span class="line">    channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, msg.getBytes());</span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>Maven 依赖</p><p>com.rabbitmq<br>amqp-client<br>3.6.5</p><p>消费者</p><p>public class Consumer {<br>private static final String QUEUE_NAME = “mayikt”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    Connection connection = RabitMQConnection.getConnection();</span><br><span class="line">    // 2.设置通道</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;消费者获取消息:&quot; + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 3.监听队列</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>RabbitMQ 如何保证消息不丢失</p><p>Mq 如何保证消息不丢失：</p><ol><li>生产者角色<br>确保生产者投递消息到 MQ 服务器端成功。<br>Ack 消息确认机制<br>同步或者异步的形式<br>方式 1：Confirms<br>方式 2：事务消息</li><li>消费者角色<br>在 rabbitmq 情况下：<br>必须要将消息消费成功之后，才会将该消息从 mq 服务器端中移除。<br>在 kafka 中的情况下：<br>不管是消费成功还是消费失败，该消息都不会立即从 mq 服务器端移除。</li><li>Mq 服务器端 在默认的情况下 都会对队列中的消息实现持久化<br>持久化硬盘。</li><li>使用消息确认机制+持久技术<br>A.消费者确认收到消息机制<br>channel.basicConsume(QUEUE_NAME, false, defaultConsumer);<br>注：第二个参数值为 false 代表关闭 RabbitMQ 的自动应答机制，改为手动应答。<br>在处理完消息时，返回应答状态，true 表示为自动应答模式。<br>channel.basicAck(envelope.getDeliveryTag(), false);<br>B.生产者确认投递消息成功 使用 Confirm 机制 或者事务消息</li></ol><p>Confirm 机制 同步或者是异步的形式</p><p>2.RabbitMQ 默认创建是持久化的</p><p>代码中设置 durable 为 true</p><p>参数名称详解：<br>durable 是否持久化 durable 为持久化、 Transient 不持久化<br>autoDelete 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过 RabbitMQ Management，查看某个队列的消费者数量，当 consumers = 0 时队列就会自动删除 2. 使用 rabbitmq 事务消息；<br>channel.txSelect();<br>channel.basicPublish(“”, QUEUE_NAME, null, msg.getBytes());<br>//            int i = 1 / 0;<br>channel.txCommit();</p><p>相关核心代码<br>生产者<br>public class Producer {<br>private static final String QUEUE_NAME = “mayikt-queue”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">    //1.创建一个新连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    //2.设置channel</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    //3.发送消息</span><br><span class="line">    String msg = &quot;每特教育6666&quot;;</span><br></pre></td></tr></table></figure><p>channel.confirmSelect();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, msg.getBytes());</span><br><span class="line">    boolean result = channel.waitForConfirms();</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        System.out.println(&quot;消息投递成功&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        System.out.println(&quot;消息投递失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>消费者<br>public class Consumer {<br>private static final String QUEUE_NAME = “mayikt-queue”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException, IOException, TimeoutException &#123;</span><br><span class="line">    // 1.创建连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 2.设置通道</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;消费者获取消息:&quot; + msg);</span><br><span class="line">            // 消费者完成 消费该消息</span><br><span class="line">            channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 3.监听队列</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, false, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>RabbitMQ 五种消息模式</p><p>RabitMQ 工作队列<br>默认的传统队列是为均摊消费，存在不公平性；如果每个消费者速度不一样的情况下，均摊消费是不公平的，应该是能者多劳。</p><p>采用工作队列<br>在通道中只需要设置 basicQos 为 1 即可，表示 MQ 服务器每次只会给消费者推送 1 条消息必须手动 ack 确认之后才会继续发送。<br>channel.basicQos(1);<br>RabbitMQ 交换机类型</p><p>Direct exchange（直连交换机）<br>Fanout exchange（扇型交换机）<br>Topic exchange（主题交换机）<br>Headers exchange（头交换机）<br>/Virtual Hosts—-区分不同的团队<br>——队列 存放消息<br>——交换机 路由消息存放在那个队列中 类似于 nginx<br>—-路由 key 分发规则</p><p>RabbitMQ Fanout 发布订阅<br>生产者发送一条消息，经过交换机转发到多个不同的队列，多个不同的队列就多个不同的消费者。</p><p>原理：</p><ol><li>需要创建两个队列 ，每个队列对应一个消费者；</li><li>队列需要绑定我们交换机</li><li>生产者投递消息到交换机中，交换机在将消息分配给两个队列中都存放起来；</li><li>消费者从队列中获取这个消息。</li></ol><p>生产者代码<br>import com.mayikt.rabbitmq.RabbitMQConnection;<br>import com.rabbitmq.client.Channel;<br>import com.rabbitmq.client.Connection;</p><p>import java.io.IOException;<br>import java.util.concurrent.TimeoutException;</p><p>public class ProducerFanout {</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 定义交换机的名称</span><br><span class="line"> */</span><br><span class="line">private static final String EXCHANGE_NAME = &quot;fanout_exchange&quot;;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    //  创建Connection</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 创建Channel</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    // 通道关联交换机</span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;, true);</span><br><span class="line">    String msg = &quot;每特教育6666&quot;;</span><br><span class="line">    channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, msg.getBytes());</span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>消费者代码<br>邮件消费者<br>import com.mayikt.rabbitmq.RabbitMQConnection;<br>import com.rabbitmq.client.*;</p><p>import java.io.IOException;<br>import java.util.concurrent.TimeoutException;</p><p>public class MailConsumer {<br>/**</p><ul><li>定义邮件队列<br>*/<br>private static final String QUEUE_NAME = “fanout_email_queue”;<br>/**</li><li>定义交换机的名称<br>*/<br>private static final String EXCHANGE_NAME = “fanout_exchange”;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    System.out.println(&quot;邮件消费者...&quot;);</span><br><span class="line">    // 创建我们的连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 创建我们通道</span><br><span class="line">    final Channel channel = connection.createChannel();</span><br><span class="line">    // 关联队列消费者关联队列</span><br><span class="line">    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;邮件消费者获取消息:&quot; + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 开始监听消息 自动签收</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>短信消费者</p><p>public class SmsConsumer {<br>/**</p><ul><li>定义短信队列<br>*/<br>private static final String QUEUE_NAME = “fanout_email_sms”;<br>/**</li><li>定义交换机的名称<br>*/<br>private static final String EXCHANGE_NAME = “fanout_exchange”;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">    System.out.println(&quot;短信消费者...&quot;);</span><br><span class="line">    // 创建我们的连接</span><br><span class="line">    Connection connection = RabbitMQConnection.getConnection();</span><br><span class="line">    // 创建我们通道</span><br><span class="line">    final Channel channel = connection.createChannel();</span><br><span class="line">    // 关联队列消费者关联队列</span><br><span class="line">    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">    DefaultConsumer defaultConsumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">            String msg = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">            System.out.println(&quot;短信消费者获取消息:&quot; + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 开始监听消息 自动签收</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, true, defaultConsumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>Direct 路由模式<br>当交换机类型为 direct 类型时，根据队列绑定的路由建转发到具体的队列中存放消息</p><p>生产者<br>消费者</p><p>Topic 主题模式<br>当交换机类型为 topic 类型时，根据队列绑定的路由建模糊转发到具体的队列中存放。 #号表示支持匹配多个词； *号表示只能匹配一个词</p><p>SpringBoot 整合 RabbitMQ</p><p>Maven 依赖</p><p>org.springframework.boot<br>spring-boot-starter-parent<br>2.0.0.RELEASE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- springboot-web组件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 添加springboot对amqp的支持 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--fastjson --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.49&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置类</p><p>import org.springframework.amqp.core.Binding;<br>import org.springframework.amqp.core.BindingBuilder;<br>import org.springframework.amqp.core.FanoutExchange;<br>import org.springframework.amqp.core.Queue;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.stereotype.Component;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> RabbitMQConfig</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><a href="/Version">@Version </a> V1.0<br><strong>/<br><a href="/Component">@Component </a><br>public class RabbitMQConfig {<br>/</strong><ul><li>定义交换机<br>*/<br>private String EXCHANGE_SPRINGBOOT_NAME = “/mayikt_ex”;</li></ul></li></ul><p>/**</p><ul><li>短信队列<br>*/<br>private String FANOUT_SMS_QUEUE = “fanout_sms_queue”;<br>/**</li><li>邮件队列<br>*/<br>private String FANOUT_EMAIL_QUEUE = “fanout_email_queue”;</li></ul><p>/**</p><ul><li><p>配置 smsQueue<br>-</p></li><li><p><a href="/return">@return </a><br>*/<br><a href="/Bean">@Bean </a><br>public Queue smsQueue() {<br>return new Queue(FANOUT_SMS_QUEUE);<br>}</p></li></ul><p>/**</p><ul><li><p>配置 emailQueue<br>-</p></li><li><p><a href="/return">@return </a><br>*/<br><a href="/Bean">@Bean </a><br>public Queue emailQueue() {<br>return new Queue(FANOUT_EMAIL_QUEUE);<br>}</p></li></ul><p>/**</p><ul><li><p>配置 fanoutExchange<br>-</p></li><li><p><a href="/return">@return </a><br>*/<br><a href="/Bean">@Bean </a><br>public FanoutExchange fanoutExchange() {<br>return new FanoutExchange(EXCHANGE_SPRINGBOOT_NAME);<br>}</p></li></ul><p>// 绑定交换机 sms<br><a href="/Bean">@Bean </a>public Binding bindingSmsFanoutExchange(Queue smsQueue, FanoutExchange fanoutExchange) {<br>return BindingBuilder.bind(smsQueue).to(fanoutExchange);<br>}<br>// 绑定交换机 email<br><a href="/Bean">@Bean </a>public Binding bindingEmailFanoutExchange(Queue emailQueue, FanoutExchange fanoutExchange) {<br>return BindingBuilder.bind(emailQueue).to(fanoutExchange);<br>}<br>}</p><p>配置文件<br>application.yml<br>spring:<br>rabbitmq: ####连接地址<br>host: 127.0.0.1 ####端口号<br>port: 5672 ####账号<br>username: guest ####密码<br>password: guest</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>virtual-host: /meiteVirtualHosts</p><p>生产者<br>import org.springframework.amqp.core.AmqpTemplate;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> FanoutProducer</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><p><a href="/Version">@Version </a> V1.0<br><strong>/<br><a href="/RestController">@RestController </a><br>public class FanoutProducer {<br><a href="/Autowired">@Autowired </a><br>private AmqpTemplate amqpTemplate;<br>/</strong></p><ul><li><p>发送消息<br>-</p></li><li><p><a href="/return">@return </a><br><em>/<br>@RequestMapping(“/sendMsg”)<br>public String sendMsg(String msg) {<br>/** - 1.交换机名称 - 2.路由 key 名称 - 3.发送内容</em>/<br>amqpTemplate.convertAndSend(“/mayikt_ex”, “”, msg);<br>return “success”;<br>}<br>}</p></li></ul></li></ul><p>消费者</p><p>import lombok.extern.slf4j.Slf4j;<br>import org.springframework.amqp.rabbit.annotation.RabbitHandler;<br>import org.springframework.amqp.rabbit.annotation.RabbitListener;<br>import org.springframework.stereotype.Component;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> FanoutEmailConsumer</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><a href="/Version">@Version </a> V1.0<br>**/<br><a href="/Slf4j">@Slf4j </a><br><a href="/Component">@Component </a><br><a href="/RabbitListener(queues">@RabbitListener(queues </a> = “fanout_email_queue”)<br>public class FanoutEmailConsumer {<br><a href="/RabbitHandler">@RabbitHandler </a><br>public void process(String msg) {<br>log.info(“&gt;&gt;邮件消费者消息 msg:{}&lt;&lt;”, msg);<br>}<br>}</li></ul><p>import lombok.extern.slf4j.Slf4j;<br>import org.springframework.amqp.rabbit.annotation.RabbitHandler;<br>import org.springframework.amqp.rabbit.annotation.RabbitListener;<br>import org.springframework.stereotype.Component;</p><p>/**</p><ul><li><a href="/ClassName">@ClassName </a> fanout_sms_queue</li><li><a href="/Author">@Author </a> 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com</li><li><a href="/Version">@Version </a> V1.0<br>**/<br><a href="/Slf4j">@Slf4j </a><br><a href="/Component">@Component </a><br><a href="/RabbitListener(queues">@RabbitListener(queues </a> = “fanout_sms_queue”)<br>public class FanoutSmsConsumer {<br><a href="/RabbitHandler">@RabbitHandler </a><br>public void process(String msg) {<br>log.info(“&gt;&gt;短信消费者消息 msg:{}&lt;&lt;”, msg);<br>}<br>}</li></ul><p>生产者如何获取消费结果</p><ol><li>根据业务来定<br>消费者消费成功结果： 1.能够在数据库中插入一条数据</li><li>Rocketmq 自带全局消息 id，能够根据该全局消息获取消费结果<br>原理： 生产者投递消息到 mq 服务器，mq 服务器端在这时候返回一个全局的消息 id，<br>当我们消费者消费该消息成功之后，消费者会给我们 mq 服务器端发送通知标记该消息<br>消费成功。<br>生产者获取到该消息全局 id，每隔 2s 时间调用 mq 服务器端接口查询该消息是否<br>有被消费成功。</li><li>异步返回一个全局 id，前端使用 ajax 定时主动查询；</li><li>在 rocketmq 中，自带根据消息 id 查询是否消费成功</li></ol><p>RabbitMQ 实战解决方案</p><p>RabbitMQ 死信队列<br>死信队列产生的背景<br>RabbitMQ 死信队列俗称，备胎队列；消息中间件因为某种原因拒收该消息后，可以转移到死信队列中存放，死信队列也可以有交换机和路由 key 等。<br>产生死信队列的原因</p><ol><li>消息投递到 MQ 中存放 消息已经过期   消费者没有及时的获取到我们消息，消息如果存放到 mq 服务器中过期之后，会转移到备胎死信队列存放。</li><li>队列达到最大的长度 （队列容器已经满了）</li><li>消费者消费多次消息失败，就会转移存放到死信队列中</li></ol><p>代码整合 参考 mayikt-springboot-rabbitmq|#中 order-dead-letter-queue 项目</p><p>死信队列的架构原理<br>死信队列和普通队列区别不是很大<br>普通与死信队列都有自己独立的交换机和路由 key、队列和消费者。<br>区别： 1.生产者投递消息先投递到我们普通交换机中，普通交换机在将该消息投到<br>普通队列中缓存起来，普通队列对应有自己独立普通消费者。 2.如果生产者投递消息到普通队列中，普通队列发现该消息一直没有被消费者消费<br>的情况下，在这时候会将该消息转移到死信（备胎）交换机中，死信（备胎）交换机<br>对应有自己独立的 死信（备胎）队列 对应独立死信（备胎）消费者。</p><p>死信队列应用场景<br>1.30 分钟订单超时设计<br>A. Redis 过期 key ：<br>B. 死信延迟队列实现：<br>采用死信队列，创建一个普通队列没有对应的消费者消费消息，在 30 分钟过后<br>就会将该消息转移到死信备胎消费者实现消费。<br>备胎死信消费者会根据该订单号码查询是否已经支付过，如果没有支付的情况下<br>则会开始回滚库存操作。</p><p>RabbitMQ 消息幂等问题<br>RabbitMQ 消息自动重试机制</p><ol><li>当我们消费者处理执行我们业务代码的时候，如果抛出异常的情况下<br>在这时候 mq 会自动触发重试机制，默认的情况下 rabbitmq 是无限次数的重试。<br>需要人为指定重试次数限制问题</li><li>在什么情况下消费者需要实现重试策略？</li></ol><p>A.消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试？<br>该情况下需要实现重试策略，网络延迟只是暂时调用不通，重试多次有可能会调用通。<br>数据库连接超时，可以进行重试，重试多次有可能会调用通。<br>B.<br>消费者获取消息后，因为代码问题抛出数据异常，是否需要重试？<br>该情况下是不需要实现重试策略，就算重试多次，最终还是失败的。<br>可以将日志存放起来，后期通过定时任务或者人工补偿形式。<br>如果是重试多次还是失败消息，需要重新发布消费者版本实现消费<br>可以使用死信队列</p><p>Mq 在重试的过程中，有可能会引发消费者重复消费的问题。<br>Mq 消费者需要解决 幂等性问题<br>幂等性 保证数据唯一</p><p>方式 1：<br>生产者在投递消息的时候，生成一个全局唯一 id，放在我们消息中。<br>Msg id=123456</p><p>Msg id=123456<br>Msg id=123456</p><p>消费者获取到我们该消息，可以根据该全局唯一 id 实现去重复。<br>全局唯一 id 根据业务来定的   订单号码作为全局的 id<br>实际上还是需要再 db 层面解决数据防重复。<br>业务逻辑是在做 insert 操作 使用唯一主键约束<br>业务逻辑是在做 update 操作 使用乐观锁</p><ol><li>当消费者业务逻辑代码中，抛出异常自动实现重试 （默认是无数次重试）</li><li>应该对 RabbitMQ 重试次数实现限制，比如最多重试 5 次，每次间隔 3s；重试多次还是失败的情况下，存放到死信队列或者存放到数据库表中记录后期人工补偿<br>如何合理选择消息重试</li><li>消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试 ？</li><li>消费者获取消息后，应该代码问题抛出数据异常，是否需要重试？</li></ol><p>总结：如果消费者处理消息时，因为代码原因抛出异常是需要从新发布版本才能解决的，那么就不需要重试，重试也解决不了该问题的。存放到死信队列或者是数据库表记录、后期人工实现补偿。</p><p>Rabbitmq 如何开启重试策略</p><p>spring:<br>rabbitmq: ####连接地址<br>host: 127.0.0.1 ####端口号<br>port: 5672 ####账号<br>username: guest ####密码<br>password: guest</p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p>virtual-host: /meite_rabbitmq<br>listener:<br>simple:<br>retry: ####开启消费者（程序出现异常的情况下会）进行重试<br>enabled: true ####最大重试次数<br>max-attempts: 5 ####重试间隔次数<br>initial-interval: 3000</p><p>消费者重试过程中，如何避免幂等性问题</p><p>重试的过程中，为了避免业务逻辑重复执行，建议提前全局 id 提前查询，如果存在<br>的情况下，就无需再继续做该流程。<br>重试的次数最好有一定间隔次数，在数据库底层层面保证数据唯一性，比如加上唯一 id。</p><p>SpringBoot 开启消息确认机制</p><p>配置文件新增<br>spring:<br>rabbitmq: ####连接地址<br>host: 127.0.0.1 ####端口号<br>port: 5672 ####账号<br>username: guest ####密码<br>password: guest</p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p>virtual-host: /meiteVirtualHosts<br>listener:<br>simple:<br>retry: ####开启消费者（程序出现异常的情况下会）进行重试<br>enabled: true ####最大重试次数<br>max-attempts: 5 ####重试间隔次数<br>initial-interval: 3000<br>acknowledge-mode: manual<br>datasource:<br>url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8<br>username: root<br>password: root<br>driver-class-name: com.mysql.jdbc.Driver</p><p>消费者 ack 代码</p><p><a href="/Slf4j">@Slf4j </a><br><a href="/Component">@Component </a><br><a href="/RabbitListener(queues">@RabbitListener(queues </a> = “fanout_order_queue”)<br>public class FanoutOrderConsumer {</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private OrderManager orderManager;</span><br><span class="line">@Autowired</span><br><span class="line">private OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">@RabbitHandler</span><br><span class="line">public void process(OrderEntity orderEntity, Message message, Channel channel) throws IOException &#123;</span><br></pre></td></tr></table></figure><p>//        try {<br>log.info(“&gt;&gt;orderEntity:{}&lt;&lt;”, orderEntity.toString());<br>String orderId = orderEntity.getOrderId();<br>if (StringUtils.isEmpty(orderId)) {<br>log.error(“&gt;&gt;orderId is null&lt;&lt;”);<br>return;<br>}<br>OrderEntity dbOrderEntity = orderMapper.getOrder(orderId);<br>if (dbOrderEntity != null) {<br>log.info(“&gt;&gt;该订单已经被消费过，无需重复消费!&lt;&lt;”);<br>// 无需继续重试<br>channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);<br>return;<br>}<br>int result = orderManager.addOrder(orderEntity);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log.info(&quot;&gt;&gt;插入数据库中数据成功&lt;&lt;&quot;);</span><br><span class="line">if (result &gt;= 0) &#123;</span><br><span class="line">    // 开启消息确认机制</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//        int i = 1 / 0;<br>//        } catch (Exception e) {<br>//            // 将失败的消息记录下来，后期采用人工补偿的形式<br>//        }<br>}<br>}</p><h4 id="息确认机制"><a href="#息确认机制" class="headerlink" title="息确认机制"></a>息确认机制</h4><h5 id="配置文件新增"><a href="#配置文件新增" class="headerlink" title="配置文件新增"></a>配置文件新增</h5><p>| ```xml<br>spring:</p><p>rabbitmq:</p><h4 id="连接地址"><a href="#连接地址" class="headerlink" title="连接地址"></a>连接地址</h4><p>host: 127.0.0.1</p><pre><code>####端口号port: 5672####账号username: guest####密码password: guest### 地址virtual-host: /meiteVirtualHostslistener:</code></pre><p>simple:</p><p>retry:</p><h4 id="开启消费者（程序出现异常的情况下会）进行重试"><a href="#开启消费者（程序出现异常的情况下会）进行重试" class="headerlink" title="开启消费者（程序出现异常的情况下会）进行重试"></a>开启消费者（程序出现异常的情况下会）进行重试</h4><p>enabled: true</p><pre><code>####最大重试次数max-attempts: 5####重试间隔次数initial-interval: 3000acknowledge-mode: manualdatasource:url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</code></pre><p>username: root</p><pre><code>password: rootdriver-class-name: com.mysql.jdbc.Driver</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line">##### 消费者ack代码</span><br><span class="line"></span><br><span class="line">| ```java</span><br><span class="line">@Slf4j</span><br><span class="line"></span><br><span class="line">    @Component</span><br><span class="line"></span><br><span class="line">    @RabbitListener(queues = &quot;fanout_order_queue&quot;)</span><br><span class="line"></span><br><span class="line">    public class FanoutOrderConsumer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line"></span><br><span class="line">        private OrderManager orderManager;</span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line"></span><br><span class="line">        private OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @RabbitHandler</span><br><span class="line"></span><br><span class="line">        public void process(OrderEntity orderEntity, Message message, Channel channel) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">            //        try &#123;</span><br><span class="line"></span><br><span class="line">            log.info(&quot;&gt;&gt;orderEntity:&#123;&#125;&lt;&lt;&quot;, orderEntity.toString());</span><br><span class="line"></span><br><span class="line">            String orderId = orderEntity.getOrderId();</span><br><span class="line"></span><br><span class="line">            if (StringUtils.isEmpty(orderId)) &#123;</span><br><span class="line"></span><br><span class="line">                log.error(&quot;&gt;&gt;orderId is null&lt;&lt;&quot;);</span><br><span class="line"></span><br><span class="line">                return;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            OrderEntity dbOrderEntity = orderMapper.getOrder(orderId);</span><br><span class="line"></span><br><span class="line">            if (dbOrderEntity != null) &#123;</span><br><span class="line"></span><br><span class="line">                log.info(&quot;&gt;&gt;该订单已经被消费过，无需重复消费!&lt;&lt;&quot;);</span><br><span class="line"></span><br><span class="line">                // 无需继续重试</span><br><span class="line"></span><br><span class="line">                channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span><br><span class="line"></span><br><span class="line">                return;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int result = orderManager.addOrder(orderEntity);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            log.info(&quot;&gt;&gt;插入数据库中数据成功&lt;&lt;&quot;);</span><br><span class="line"></span><br><span class="line">            if (result &gt;= 0) &#123;</span><br><span class="line"></span><br><span class="line">                // 开启消息确认机制</span><br><span class="line"></span><br><span class="line">                channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //        int i = 1 / 0;</span><br><span class="line"></span><br><span class="line">            //        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            //            // 将失败的消息记录下来，后期采用人工补偿的形式</span><br><span class="line"></span><br><span class="line">            //        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>| |<br>| |</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
